<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="24:BootLedsAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4062b5f8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40635528"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40635528"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406304f0"/></to>
    </wire>
    <wire loc="25:BootLedsAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40892260"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40880a90"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40880a90"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x4087fb20"/></to>
    </wire>
    <wire loc="26:BootLedsAppC.nc">
      <from><interface-ref name="LigarTimerA" scoped="" ref="0x40891010"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4087dcd8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4087dcd8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:BootLedsAppC.nc">
      <from><interface-ref name="LigarTimerB" scoped="" ref="0x408893b8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409adc00"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x409adc00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="28:BootLedsAppC.nc">
      <from><interface-ref name="LigarTimerC" scoped="" ref="0x40887710"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409aaab8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x409aaab8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="29:BootLedsAppC.nc">
      <from><interface-ref name="LigarTimerHelloWorld" scoped="" ref="0x408a0b00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409a6958"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x409a6958"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="30:BootLedsAppC.nc">
      <from><interface-ref name="LigarTimerSensor" scoped="" ref="0x4089c010"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409a27a8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x409a27a8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="32:BootLedsAppC.nc">
      <from><interface-ref name="Read1" scoped="" ref="0x408976c8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40cdddf0"/></to>
    </wire>
    <wire loc="47:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40cdddf0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x41440ec0"/></to>
    </wire>
    <wire loc="33:BootLedsAppC.nc">
      <from><interface-ref name="Read2" scoped="" ref="0x40898458"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40f43100"/></to>
    </wire>
    <wire loc="47:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40f43100"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x414ee2c8"/></to>
    </wire>
    <wire loc="34:BootLedsAppC.nc">
      <from><interface-ref name="Read3" scoped="" ref="0x40896180"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x4107f0c0"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Humidity" scoped="" ref="0x4107f0c0"/></from>
      <to><interface-ref name="Humidity" scoped="" ref="0x41516da0"/></to>
    </wire>
    <wire loc="35:BootLedsAppC.nc">
      <from><interface-ref name="Read4" scoped="" ref="0x40896e48"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x41080110"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Temperature" scoped="" ref="0x41080110"/></from>
      <to><interface-ref name="Temperature" scoped="" ref="0x41518df8"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x406401a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406301a8"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x4063f370"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x40629290"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40629290"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x4085f348"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x4063fd58"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x40629c98"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x40629c98"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x4086fb50"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x40631820"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x40641760"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x40641760"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x4086c398"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x407385f8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406401a0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x4085fcc0"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x40682368"/></to>
    </wire>
    <wire loc="486:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x40682368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4071ad68"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x4086e510"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x406804c8"/></to>
    </wire>
    <wire loc="487:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x406804c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407175c8"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x4086cd10"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x4067f688"/></to>
    </wire>
    <wire loc="488:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x4067f688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40715d68"/></to>
    </wire>
    <wire loc="442:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x40657ae8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406c1010"/></to>
    </wire>
    <wire loc="455:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x4065fbc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e5d68"/></to>
    </wire>
    <wire loc="531:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x40686d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406dd5c8"/></to>
    </wire>
    <wire loc="551:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x4069aad8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072dd68"/></to>
    </wire>
    <wire loc="532:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x40684010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f1d68"/></to>
    </wire>
    <wire loc="460:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x4065c010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e0d68"/></to>
    </wire>
    <wire loc="473:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x40665178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40708d68"/></to>
    </wire>
    <wire loc="497:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x4068c178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40732d68"/></to>
    </wire>
    <wire loc="535:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x406953e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ecd68"/></to>
    </wire>
    <wire loc="545:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x406a0168"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40726d68"/></to>
    </wire>
    <wire loc="557:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x406a9170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072a5c8"/></to>
    </wire>
    <wire loc="445:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x40653010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ce5c8"/></to>
    </wire>
    <wire loc="536:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x406945a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e95c8"/></to>
    </wire>
    <wire loc="450:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x40664368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406dc5c8"/></to>
    </wire>
    <wire loc="463:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x4066d4c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ee5c8"/></to>
    </wire>
    <wire loc="476:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x40676688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407005c8"/></to>
    </wire>
    <wire loc="489:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x4067e848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407285c8"/></to>
    </wire>
    <wire loc="500:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x40689688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072a5c8"/></to>
    </wire>
    <wire loc="440:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x4064e768"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406c6140"/></to>
    </wire>
    <wire loc="453:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x40661848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406d5de8"/></to>
    </wire>
    <wire loc="466:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x4066aa08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406fcd68"/></to>
    </wire>
    <wire loc="530:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x40687bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406dd5c8"/></to>
    </wire>
    <wire loc="548:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x4069d598"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407345c8"/></to>
    </wire>
    <wire loc="555:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x406aa010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072a5c8"/></to>
    </wire>
    <wire loc="541:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x40690ca0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4071c5c8"/></to>
    </wire>
    <wire loc="471:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x40668d88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f7e68"/></to>
    </wire>
    <wire loc="484:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x40670010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070ad68"/></to>
    </wire>
    <wire loc="495:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x4067bd88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40721d68"/></to>
    </wire>
    <wire loc="549:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x4069c758"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40732d68"/></to>
    </wire>
    <wire loc="538:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x40693758"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070fd68"/></to>
    </wire>
    <wire loc="443:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x40656ca8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406bf730"/></to>
    </wire>
    <wire loc="456:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x4065ed88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e25c8"/></to>
    </wire>
    <wire loc="493:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x4067da08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40726d68"/></to>
    </wire>
    <wire loc="461:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x4065b178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406dd5c8"/></to>
    </wire>
    <wire loc="474:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x40678368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407055c8"/></to>
    </wire>
    <wire loc="498:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x4068b368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072f5c8"/></to>
    </wire>
    <wire loc="540:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x40691ae0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070ad68"/></to>
    </wire>
    <wire loc="438:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x406593c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406a5220"/></to>
    </wire>
    <wire loc="451:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x406634c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406dad68"/></to>
    </wire>
    <wire loc="464:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x4066c688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ecd68"/></to>
    </wire>
    <wire loc="477:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x40675848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406fed68"/></to>
    </wire>
    <wire loc="542:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x4068fe60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406fcd68"/></to>
    </wire>
    <wire loc="546:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x4069f280"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407235c8"/></to>
    </wire>
    <wire loc="552:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x40699c98"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072a5c8"/></to>
    </wire>
    <wire loc="482:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x40673bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070fd68"/></to>
    </wire>
    <wire loc="543:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x4068d010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f95c8"/></to>
    </wire>
    <wire loc="441:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x40658928"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406c48a0"/></to>
    </wire>
    <wire loc="454:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x40660a08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e75c8"/></to>
    </wire>
    <wire loc="467:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x40669bc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f95c8"/></to>
    </wire>
    <wire loc="539:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x40692920"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070c5c8"/></to>
    </wire>
    <wire loc="550:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x4069b918"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072f5c8"/></to>
    </wire>
    <wire loc="472:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x40666010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f45c8"/></to>
    </wire>
    <wire loc="485:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x4066f178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4071c5c8"/></to>
    </wire>
    <wire loc="496:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x40679010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407345c8"/></to>
    </wire>
    <wire loc="444:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x40655e68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406d1df8"/></to>
    </wire>
    <wire loc="494:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x4067cbc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407235c8"/></to>
    </wire>
    <wire loc="449:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x40652178"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ccd68"/></to>
    </wire>
    <wire loc="462:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x4066e368"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406f1d68"/></to>
    </wire>
    <wire loc="475:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x406774c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40703d68"/></to>
    </wire>
    <wire loc="499:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x4068a4c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072dd68"/></to>
    </wire>
    <wire loc="439:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x4064f5a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406b5918"/></to>
    </wire>
    <wire loc="452:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x40662688"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406d75c8"/></to>
    </wire>
    <wire loc="465:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x4066b848"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e95c8"/></to>
    </wire>
    <wire loc="478:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x40674a08"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407115c8"/></to>
    </wire>
    <wire loc="534:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x40696270"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ee5c8"/></to>
    </wire>
    <wire loc="547:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x4069e3d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40721d68"/></to>
    </wire>
    <wire loc="533:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x40683170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406ee5c8"/></to>
    </wire>
    <wire loc="483:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x40672d88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4070c5c8"/></to>
    </wire>
    <wire loc="554:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x40698e58"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4072dd68"/></to>
    </wire>
    <wire loc="558:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x406a8290"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407285c8"/></to>
    </wire>
    <wire loc="529:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x40688868"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x406e0d68"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4073b010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4073b9c0"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x4073bdd0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x40754bf8"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x40754bf8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40753478"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x40738218"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40735010"/></to>
    </wire>
    <wire loc="46:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40753478"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4075b838"/></to>
    </wire>
    <wire loc="47:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x4074db10"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x4075bc08"/></to>
    </wire>
    <wire loc="48:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x405e38a8"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x4075a678"/></to>
    </wire>
    <wire loc="113:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x40785548"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407eb870"/></to>
    </wire>
    <wire loc="126:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x4078a2a8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407e7700"/></to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x4078e358"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407efb08"/></to>
    </wire>
    <wire loc="149:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x40797788"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x4080d430"/></to>
    </wire>
    <wire loc="107:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x4077a518"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407ef430"/></to>
    </wire>
    <wire loc="148:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x4079bbf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407f4c78"/></to>
    </wire>
    <wire loc="170:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x40795278"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x4081a010"/></to>
    </wire>
    <wire loc="154:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x407861c8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x4080a120"/></to>
    </wire>
    <wire loc="99:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x4077cd58"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407b8a10"/></to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x407985f8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407fc6e8"/></to>
    </wire>
    <wire loc="134:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x4079cbf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407fc010"/></to>
    </wire>
    <wire loc="133:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x4078ae18"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407fd588"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x4078ebf8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407eaa28"/></to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x40796090"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x40809270"/></to>
    </wire>
    <wire loc="140:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x40789a58"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407f8430"/></to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x4077acd8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407ea350"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x407800e8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40793e58"/></to>
    </wire>
    <wire loc="155:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x4079a438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x4080ab78"/></to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x4076e9a8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407f08f8"/></to>
    </wire>
    <wire loc="161:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x40786d38"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x40806010"/></to>
    </wire>
    <wire loc="101:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x4078ba58"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407b7be8"/></to>
    </wire>
    <wire loc="142:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x40798e98"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407f7570"/></to>
    </wire>
    <wire loc="100:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x40790ca8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407b7510"/></to>
    </wire>
    <wire loc="141:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x4079b438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x407f8e88"/></to>
    </wire>
    <wire loc="163:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x40796930"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x40805190"/></to>
    </wire>
    <wire loc="147:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x40788628"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x407f4220"/></to>
    </wire>
    <wire loc="120:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="162:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x4079abf8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40806a68"/></to>
    </wire>
    <wire loc="128:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x40799cf8"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x40800868"/></to>
    </wire>
    <wire loc="169:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x40799438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x408018d0"/></to>
    </wire>
    <wire loc="127:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x4079c438"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40800190"/></to>
    </wire>
    <wire loc="168:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x4079d8c8"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x40802e68"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x40792e90"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40792b28"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x407be200"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x40818980"/></to>
    </wire>
    <wire loc="96:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x407be558"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x40818e08"/></to>
    </wire>
    <wire loc="102:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407f2430"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40793e58"/></to>
    </wire>
    <wire loc="103:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407f1080"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40792b28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407ed350"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40793e58"/></to>
    </wire>
    <wire loc="110:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407ec010"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40792b28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407e9270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40793e58"/></to>
    </wire>
    <wire loc="117:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407e9e88"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x40792b28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x407ba910"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x407bac68"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x408152c0"/></to>
    </wire>
    <wire loc="123:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x407b9010"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x40815748"/></to>
    </wire>
    <wire loc="129:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407ff050"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="130:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407ffc68"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407fcea0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="137:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407fbb00"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407f7d28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="144:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x407f6970"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4080dbe8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="151:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x4080c890"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40809a28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="158:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x408086d0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40805948"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="165:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x408035f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4081a7c8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407bb838"/></to>
    </wire>
    <wire loc="172:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x40819430"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x407ba5a8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="103:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41566ce8"/></to>
    </wire>
    <wire loc="37:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40eab8a0"/></to>
    </wire>
    <wire loc="96:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41470b08"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40d5ab70"/></to>
    </wire>
    <wire loc="49:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40cdba08"/></to>
    </wire>
    <wire loc="65:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40cc77b8"/></to>
    </wire>
    <wire loc="103:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41400ed8"/></to>
    </wire>
    <wire loc="59:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a22970"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408c88c8"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4087feb8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x4035d5f0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4035d5f0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x405c2cd0"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4087c4b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4073b010"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4087c8b8"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x405d1590"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x405cc210"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x4035ea90"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c5100"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x408c5100"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40964f00"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408c88c8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408bf010"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x408c10d0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40997940"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408bf010"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41315788"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x4099c338"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40943cb0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40968010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x408bf468"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x408bf468"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x413126b8"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40996360"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40911088"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40911088"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4091d320"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x41315788"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4134c060"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x4130e3b8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x41315be0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x41315be0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x4134c4d8"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4130f180"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40911088"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x4134be48"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x4134f480"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x4134f480"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x41349a70"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x4134e090"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x4134e090"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x413484f0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x4134eac8"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x4134eac8"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x4078a2a8"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x4079c438"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x40789a58"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x4079b438"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x40788628"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x4079bbf8"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x407861c8"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x4079a438"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="79:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x40786d38"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x4079abf8"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x4079d8c8"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x40799438"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x4091c5f8"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x40910c10"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x40910c10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40909578"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x40908730"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x409679a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x40999560"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x409bf9f0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40880a90"/></to>
    </wire>
    <wire loc="47:../../tos/lib/serial/SerialStartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x409b7f20"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x409b40e0"/></to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x409b40e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40a22d08"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40a22d08"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40a16b50"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x409ccac0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x409d5be8"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x409c8010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40a03310"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x409b1100"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x409d33a8"/></to>
    </wire>
    <wire loc="67:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x409c2010"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40a039a8"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x409dbdf8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x409d36d0"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40a22970"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a167b8"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40a1a840"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x409c2548"/></to>
    </wire>
    <wire loc="69:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40a03ed0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40a1fc20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40a025a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40a1f618"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40a1a338"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x40c51bd8"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40a1fc20"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40a95c60"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40a1f618"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40a958a0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x40ac8400"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40a1a338"/></to>
    </wire>
    <wire loc="70:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40a14010"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40a1a840"/></to>
    </wire>
    <wire loc="71:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40ac73f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40a1a840"/></to>
    </wire>
    <wire loc="72:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40ae5420"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40a1a840"/></to>
    </wire>
    <wire loc="74:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40ac88e8"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40a30430"/></to>
    </wire>
    <wire loc="75:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x40ac8dc0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x40a33348"/></to>
    </wire>
    <wire loc="77:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x40a2d708"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x40ac4858"/></to>
    </wire>
    <wire loc="78:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40a2bd38"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40ac3328"/></to>
    </wire>
    <wire loc="17:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40ac3328"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40c5b560"/></to>
    </wire>
    <wire loc="80:../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40adfb80"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40ac37a8"/></to>
    </wire>
    <wire loc="13:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40ac37a8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40c5d748"/></to>
    </wire>
    <wire loc="332:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x40a63ce8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x40a3d168"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x40a65578"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40a61998"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x40ac5030"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x40ac5468"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40af25d8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40c5c010"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40c5c010"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40b294a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40c5d748"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40b2a8b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40c5c428"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40c5ba38"/></to>
    </wire>
    <wire loc="19:../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40c5bdc8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40af3c10"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40af3c10"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40b31778"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40c5d330"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x413eca58"/></to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x413eca58"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40bf82a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40b287b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40c5c428"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x413e9e48"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40b2a158"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x40b29ca0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x413ec3a0"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x413ec3a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40bf9850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x40b25d50"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x413e9a30"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x413e9a30"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x40bf9100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40b2a158"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40b23e28"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40b294a8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40b77c48"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40b2a8b8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40b77328"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40b31778"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40b236c8"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40b768a8"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40b287b0"/></to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x40b76148"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x40b29ca0"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x40b734c8"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x40b25d50"/></to>
    </wire>
    <wire loc="64:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x40b76c10"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x40b91bb0"/></to>
    </wire>
    <wire loc="88:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x40b91bb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x40b8fd08"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40b73a10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40be2f28"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40be2f28"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x40910c10"/></to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40b72b98"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40635528"/></to>
    </wire>
    <wire loc="89:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x40b90508"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x40b8a670"/></to>
    </wire>
    <wire loc="87:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40b91708"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40b8f808"/></to>
    </wire>
    <wire loc="91:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x40b8ab90"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x40692920"/></to>
    </wire>
    <wire loc="92:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x40b89ca0"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x40691ae0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x40b88e58"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x40690ca0"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x40b85010"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x4068d010"/></to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x40b84168"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x4068fe60"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x413eb2b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x40b91bb0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x413ece70"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40bf8730"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40bf8730"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4eb08"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40bf8ed8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x413e9e48"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40bf82a8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40c4e068"/></to>
    </wire>
    <wire loc="106:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40c4e068"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x413fdac8"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x40bf9100"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x40bebec8"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40bf9850"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40be7908"/></to>
    </wire>
    <wire loc="105:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40be7908"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x413fd388"/></to>
    </wire>
    <wire loc="108:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4eb08"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x413fb580"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x40bf6720"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x40b90508"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40c4d010"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40bf8ed8"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40bf6e90"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4eb08"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4b828"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4e470"/></to>
    </wire>
    <wire loc="107:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4e470"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x413fded0"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40c4b118"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40b91708"/></to>
    </wire>
    <wire loc="109:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x413fba40"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40c4d010"/></to>
    </wire>
    <wire loc="111:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x413fbe68"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x413fe220"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x413f9080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x4142b770"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40c4b118"/></to>
    </wire>
    <wire loc="82:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x4142bb68"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x40c4b510"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4142be80"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4b828"/></to>
    </wire>
    <wire loc="85:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x41429530"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4bec0"/></to>
    </wire>
    <wire loc="66:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40cc2a58"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x40caf428"/></to>
    </wire>
    <wire loc="67:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40cc13c8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40cb3920"/></to>
    </wire>
    <wire loc="63:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40cb3920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x41422560"/></to>
    </wire>
    <wire loc="68:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40cc1aa0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40cb2010"/></to>
    </wire>
    <wire loc="64:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40cb2010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x409c8010"/></to>
    </wire>
    <wire loc="71:../../tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x40cc5e80"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x40cc2578"/></to>
    </wire>
    <wire loc="65:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40cb26a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x409dbdf8"/></to>
    </wire>
    <wire loc="66:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x40cb1330"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x409c2010"/></to>
    </wire>
    <wire loc="60:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x41422c28"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c8a100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/lib/serial/SerialAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x41421310"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x409dbdf8"/></to>
    </wire>
    <wire loc="54:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40c8a100"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40cb8010"/></to>
    </wire>
    <wire loc="55:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40cb8780"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x409ccac0"/></to>
    </wire>
    <wire loc="56:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40cb8e28"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x409dbdf8"/></to>
    </wire>
    <wire loc="57:../../tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40cb7a50"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x409c8010"/></to>
    </wire>
    <wire loc="169:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x40cb6190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="126:../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x40cb65c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x40cbe800"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x40cdbd88"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x40cc5e80"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x41440ec0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40ce9c98"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x40cdca28"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x4143dd78"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x4143dd78"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x40eb02d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <from><interface-ref name="DeviceMetadata" scoped="" ref="0x40cdda28"/></from>
      <to><interface-ref name="DeviceMetadata" scoped="" ref="0x40f17498"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x4143eb20"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x40f17a40"/></to>
    </wire>
    <wire loc="55:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x4143b460"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x40f17a40"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40d123f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x4143eb20"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x40d11010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x41438d98"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x41438d98"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x40d16c08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x41438700"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x41438700"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x41481070"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x4143eb20"/></to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/adc12/AdcP.nc">
      <from><interface-ref name="readDone" scoped="" ref="0x40d24a68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x41482690"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x41482b68"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40d5f530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x4147ad28"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x41481070"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40e28638"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x4147a3c0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x40d55100"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="DMAExtension" scoped="" ref="0x40d5a010"/></from>
      <to><interface-ref name="DMAExtension" scoped="" ref="0x40d54238"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x40d559f0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x40d57398"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40d5f530"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40dc2e20"/></to>
    </wire>
    <wire loc="98:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40dc2e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4146ee58"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ADCArbiterInfo" scoped="" ref="0x40d54790"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40e399b0"/></to>
    </wire>
    <wire loc="100:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40e399b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x4146d9b0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x40d4b3b8"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x40dc4768"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x40d49918"/></from>
      <to><interface-ref name="Port60" scoped="" ref="0x4067da08"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x40d77ac8"/></from>
      <to><interface-ref name="Port61" scoped="" ref="0x4067cbc8"/></to>
    </wire>
    <wire loc="64:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x40d76c88"/></from>
      <to><interface-ref name="Port62" scoped="" ref="0x4067bd88"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x40d74e48"/></from>
      <to><interface-ref name="Port63" scoped="" ref="0x40679010"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x40d72010"/></from>
      <to><interface-ref name="Port64" scoped="" ref="0x4068c178"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x40d71178"/></from>
      <to><interface-ref name="Port65" scoped="" ref="0x4068b368"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x40d70348"/></from>
      <to><interface-ref name="Port66" scoped="" ref="0x4068a4c8"/></to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x40d6f4a8"/></from>
      <to><interface-ref name="Port67" scoped="" ref="0x40689688"/></to>
    </wire>
    <wire loc="74:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x40d53540"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x407800e8"/></to>
    </wire>
    <wire loc="75:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x40d52288"/></from>
      <to><interface-ref name="ControlA0" scoped="" ref="0x4077cd58"/></to>
    </wire>
    <wire loc="76:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x40d52dd8"/></from>
      <to><interface-ref name="ControlA1" scoped="" ref="0x4076e9a8"/></to>
    </wire>
    <wire loc="77:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x40d4a958"/></from>
      <to><interface-ref name="CompareA0" scoped="" ref="0x40790ca8"/></to>
    </wire>
    <wire loc="78:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x40d49168"/></from>
      <to><interface-ref name="CompareA1" scoped="" ref="0x4077a518"/></to>
    </wire>
    <wire loc="99:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40e395a8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x4146d5a8"/></to>
    </wire>
    <wire loc="101:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x4146de70"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40e39e60"/></to>
    </wire>
    <wire loc="103:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x4146c2b0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x41470e40"/></to>
    </wire>
    <wire loc="68:../../tos/system/SimpleArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x4146c8a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x40e25a50"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x40e8a570"/></from>
      <to><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40e88010"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x40e28638"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_1_5V" scoped="" ref="0x40e8ad28"/></from>
      <to><interface-ref name="RefVolt_1_5V" scoped="" ref="0x40e27590"/></to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="RefVolt_2_5V" scoped="" ref="0x40e89430"/></from>
      <to><interface-ref name="RefVolt_2_5V" scoped="" ref="0x40e27c68"/></to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOnTimer" scoped="" ref="0x40e23468"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40e58b78"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40e58b78"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffTimer" scoped="" ref="0x40e55888"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40e9d9b8"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40e9d9b8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x40e52c40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40e9a7d0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40e9a7d0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <from><interface-ref name="HplAdc12" scoped="" ref="0x40e242d0"/></from>
      <to><interface-ref name="HplAdc12" scoped="" ref="0x40dc4768"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <from><interface-ref name="switchOff" scoped="" ref="0x40e865c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x41498a38"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x4143b460"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x40eafe58"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x4143b460"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40ead750"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x4149a178"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x4149a178"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x40eaeae8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x4149a810"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x4149a810"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x40eb02d0"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x40f07e98"/></to>
    </wire>
    <wire loc="32:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x40ea6968"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x40eafe58"/></to>
    </wire>
    <wire loc="33:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40f22d40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40ead750"/></to>
    </wire>
    <wire loc="35:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40f24650"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x40ea8028"/></to>
    </wire>
    <wire loc="38:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x40ea7b08"/></from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x40eaeae8"/></to>
    </wire>
    <wire loc="39:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40ed8410"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40f0a608"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40f0a608"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x4148e0e8"/></to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="bufferDone" scoped="" ref="0x40ec1a68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamDone" scoped="" ref="0x40ec9b98"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <from><interface-ref name="readStreamFail" scoped="" ref="0x40ec5390"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40f0a1b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x414911f8"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x414911f8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41483b68"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x4148cde0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x41491650"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x41491650"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x414ce010"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4148db90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40911088"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x414cd988"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x41486010"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x41486010"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x414cc5d0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x41486c08"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x41486c08"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x414cb030"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x414846b0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x414846b0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x41498078"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x41498550"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40d5f530"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x414f31b8"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x41498a38"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40e28638"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x414a9818"/></to>
    </wire>
    <wire loc="65:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x414ee2c8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40ce9c98"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x40f43d08"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x414ec120"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="ReadStream" scoped="" ref="0x414ec120"/></from>
      <to><interface-ref name="ReadStream" scoped="" ref="0x40eb02d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="DeviceMetadata" scoped="" ref="0x40f44d20"/></from>
      <to><interface-ref name="DeviceMetadata" scoped="" ref="0x40f3a888"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x414eef10"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x40f3ae30"/></to>
    </wire>
    <wire loc="55:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x414ea7f8"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x40f3ae30"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40d123f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414eef10"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="SingleChannel" scoped="" ref="0x40d11010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414e7158"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414e7158"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="ResourceRead" scoped="" ref="0x40d16c08"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x414e8ab0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x414e8ab0"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x414e5380"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414eef10"/></to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x414e79b0"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x414e7e88"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40d5f530"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x414de700"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414e5380"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40e28638"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x414dfd68"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x414d7168"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414ea7f8"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="AdcConfigure" scoped="" ref="0x40eafe58"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414ea7f8"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40ead750"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x414d9888"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x414d9888"/></from>
      <to><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x40eaeae8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414d9f20"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414d9f20"/></from>
      <to><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x414d8790"/></from>
      <to><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x414d8c68"/></from>
      <to><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40d5f530"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="ConfUp" scoped="" ref="0x414cf978"/></from>
      <to><interface-ref name="AdcConfigure" scoped="" ref="0x414d7168"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x40e28638"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfSub" scoped="" ref="0x414cf010"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="HumidityMetadata" scoped="" ref="0x4107fc58"/></from>
      <to><interface-ref name="HumidityMetadata" scoped="" ref="0x415169b8"/></to>
    </wire>
    <wire loc="55:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="TemperatureMetadata" scoped="" ref="0x41080ca8"/></from>
      <to><interface-ref name="TemperatureMetadata" scoped="" ref="0x41518a10"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="TempResource" scoped="" ref="0x41515950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40f6f5f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Sht11Temp" scoped="" ref="0x41514728"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x40f6e100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="HumResource" scoped="" ref="0x41514050"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40f6f5f8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <from><interface-ref name="Sht11Hum" scoped="" ref="0x41512278"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x40f6e100"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="SensirionSht11" scoped="" ref="0x40f6e100"/></from>
      <to><interface-ref name="SensirionSht11" scoped="" ref="0x40f6be78"/></to>
    </wire>
    <wire loc="52:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40f6f5f8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40fc68e8"/></to>
    </wire>
    <wire loc="77:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40fc68e8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4106f4e0"/></to>
    </wire>
    <wire loc="53:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x40fce9d0"/></from>
      <to><interface-ref name="DATA" scoped="" ref="0x40fc3090"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x40fc3090"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40fc1518"/></to>
    </wire>
    <wire loc="54:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="CLOCK" scoped="" ref="0x40fcd358"/></from>
      <to><interface-ref name="SCK" scoped="" ref="0x40fc3a88"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x40fc3a88"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40fbfcc0"/></to>
    </wire>
    <wire loc="55:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x40fcdcd0"/></from>
      <to><interface-ref name="InterruptDATA" scoped="" ref="0x40fc2540"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="InterruptDATA" scoped="" ref="0x40fc2540"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x410780f8"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40fcc3c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x41087010"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x41087010"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40fca5d8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40635528"/></to>
    </wire>
    <wire loc="102:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <from><interface-ref name="readSensor" scoped="" ref="0x40fc96a8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="103:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <from><interface-ref name="signalStatusDone" scoped="" ref="0x40fc9270"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x4106f4e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x415621b8"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x40fc1e90"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x40656ca8"/></to>
    </wire>
    <wire loc="57:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x40fbe6d0"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x40655e68"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x40fbce90"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x40653010"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="PWR" scoped="" ref="0x40feb050"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40fbc518"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="DATA" scoped="" ref="0x40feba58"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40fc1518"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x40fea4b0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x40fbfcc0"/></to>
    </wire>
    <wire loc="69:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40fb9d88"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40fe42e0"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40fe42e0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x410786f0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x40fdceb8"/></to>
    </wire>
    <wire loc="71:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x40fdceb8"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x41006608"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x4106beb8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40fb96a8"/></to>
    </wire>
    <wire loc="81:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x4106ae50"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x4106e6d8"/></to>
    </wire>
    <wire loc="108:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x4106e6d8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x415613f0"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106a7b8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106e040"/></to>
    </wire>
    <wire loc="107:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106e040"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x41562d00"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0x40fe9308"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x40fdc608"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x41007cf8"/></to>
    </wire>
    <wire loc="82:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x40fd3010"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x410016e8"/></to>
    </wire>
    <wire loc="73:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x40fd8070"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x41005798"/></to>
    </wire>
    <wire loc="77:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x40fd7288"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x41004920"/></to>
    </wire>
    <wire loc="68:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x40fdd448"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x41008b38"/></to>
    </wire>
    <wire loc="80:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x40fd6cf8"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x41002448"/></to>
    </wire>
    <wire loc="83:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x40fd38c0"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x41000010"/></to>
    </wire>
    <wire loc="66:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x40fda218"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x40fd2998"/></to>
    </wire>
    <wire loc="78:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x40fd7b38"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x41003288"/></to>
    </wire>
    <wire loc="69:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x40fddcf8"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x41007448"/></to>
    </wire>
    <wire loc="81:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x40fd46e8"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x41002d78"/></to>
    </wire>
    <wire loc="72:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x40fd9798"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x41006eb8"/></to>
    </wire>
    <wire loc="76:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x40fd8920"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x41004070"/></to>
    </wire>
    <wire loc="67:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x40fdaac8"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x41008288"/></to>
    </wire>
    <wire loc="79:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x40fd6448"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x41003b38"/></to>
    </wire>
    <wire loc="106:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x4106fc20"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x415628f8"/></to>
    </wire>
    <wire loc="109:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x415618b0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x4106eb88"/></to>
    </wire>
    <wire loc="111:../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x41561cd8"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x41564050"/></to>
    </wire>
    <wire loc="75:../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x41560f28"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x41547b90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x4106beb8"/></to>
    </wire>
    <wire loc="81:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x41594158"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x4106a4a0"/></to>
    </wire>
    <wire loc="83:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x41594470"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106a7b8"/></to>
    </wire>
    <wire loc="84:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x41594b08"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x4106ae50"/></to>
    </wire>
    <wire loc="78:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="stopTask" scoped="" ref="0x41593010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../tos/lib/power/PowerManagerP.nc">
      <from><interface-ref name="startTask" scoped="" ref="0x41593448"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformC" loc="40:../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="45:../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BootLedsC" loc="4:BootLedsC.nc">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BootLedsAppC.LigarTimerA" loc="44(BootLedsAppC.LigarTimerA):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <value cst="I:10">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BootLedsAppC.LigarTimerB" loc="44(BootLedsAppC.LigarTimerB):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.LigarTimerC" loc="44(BootLedsAppC.LigarTimerC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.LigarTimerHelloWorld" loc="44(BootLedsAppC.LigarTimerHelloWorld):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.LigarTimerSensor" loc="44(BootLedsAppC.LigarTimerSensor):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SerialStartP" loc="37:../../tos/lib/serial/SerialStartP.nc">
      <documentation loc="33:../../tos/lib/serial/SerialStartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Thomas Schmid&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="41(Msp430Uart1P.UartP):../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="31:../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="73:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <documentation loc="62:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
        <short>&#10; Implementation of USART1 lowlevel functionality - stateless.</short>
        <long>&#10; Implementation of USART1 lowlevel functionality - stateless.&#10; Setting a mode will by default disable USART-Interrupts.&#10;&#10; @author: Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10; @author: Jonathan Hui &#60;jhui@archedrock.com>&#10; @author: Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author: Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-04 22:30:21 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="89(Msp430UsartShare1P.ArbiterC):../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="52(Msp430UsartShare1P.ArbiterC.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="47(PrintfC.SerialAMSenderC):../../tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="43(PrintfC.SerialAMSenderC.AMQueueEntryP):../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:../../tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):../../tos/system/BigQueueC.nc">
      <documentation loc="33:../../tos/system/BigQueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2007-09-19 17:20:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BigQueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <value cst="I:1024">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="87:../../tos/lib/printf/PrintfP.nc" safe="">
      <documentation loc="33:../../tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.17 $&#10; @date $Date: 2010-06-29 22:07:50 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:../../tos/lib/printf/PutcharC.nc">
      <documentation loc="32:../../tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:../../tos/lib/printf/PutcharP.nc">
      <documentation loc="64:../../tos/lib/printf/PutcharP.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Kevin Klues &#60;klueska@cs.stanford.edu>&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor1" loc="40(BootLedsAppC.Sensor1):../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
        <short>&#10; HamamatsuS1087ParC is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform.</short>
        <long>&#10; HamamatsuS1087ParC is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HamamatsuS1087ParC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadClientC" loc="47(BootLedsAppC.Sensor1.AdcReadClientC):../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AdcP" loc="36:../../tos/chips/msp430/adc12/AdcP.nc" safe="">
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient" loc="43(BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient):../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P" loc="37:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <configuration/>
    </component>
    <component qname="Msp430Adc12ImplP" loc="37:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc" safe="">
      <module/>
    </component>
    <component qname="HplAdc12P" loc="45:../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/HplAdc12P.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter" loc="83(Msp430Adc12P.Arbiter):../../tos/system/SimpleRoundRobinArbiterC.nc">
      <documentation loc="62:../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleRoundRobinArbiterC"/>
        <arguments>
          <value cst="S:Msp430Adc12C.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Queue" loc="42(Msp430Adc12P.Arbiter.Queue):../../tos/system/RoundRobinResourceQueueC.nc">
      <documentation loc="33:../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430Adc12P.Arbiter.Arbiter" loc="49(Msp430Adc12P.Arbiter.Arbiter):../../tos/system/SimpleArbiterP.nc">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP" loc="50:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
        <short> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter.</short>
        <long> &#10; This component is meant to intercept requests to the &#60;code>Resource&#60;/code>&#10; interface on their way to the adc arbiter. It checks whether the client's&#10; adc configuration requires the internal reference voltage generator of the&#10; MSP430 to be enabled during the conversion by inspecting the client's&#10; configuration data (using the &#60;code>AdcConfigure&#60;/code> interface). If so it&#10; makes sure that Resource.granted() is held back until the reference voltage&#10; is stable. Clients SHOULD NOT wire to &#60;code>Msp430RefVoltArbiterP&#60;/code> but&#10; to the Resource interface provided by&#10; &#60;code>Msp430Adc12ClientAutoRVGC&#60;/code>.&#10; &#10; @author Jan Hauer&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltGeneratorP" loc="36:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterImplP" loc="36:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <module/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOnDelayTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffDelayTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer" loc="44(Msp430RefVoltArbiterP.SwitchOffSettleTimer):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadStreamClientC" loc="47(BootLedsAppC.Sensor1.AdcReadStreamClientC):../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP" loc="19:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <documentation loc="10:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
        <short>&#10; Support component for AdcReadStreamClientC.</short>
        <long>&#10; Support component for AdcReadStreamClientC.&#10;&#10; @author David Gay&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcStreamP" loc="46:../../tos/chips/msp430/adc12/AdcStreamP.nc" safe="">
      <documentation loc="39:../../tos/chips/msp430/adc12/AdcStreamP.nc">
        <short>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).</short>
        <long>&#10; Convert MSP430 HAL A/D interface to the HIL interfaces (adapted atmega code).&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm" loc="41(WireAdcStreamP.Alarm):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom" loc="41(WireAdcStreamP.Alarm.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer" loc="37(WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm" loc="43(WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.Alarm.Transform" loc="51(WireAdcStreamP.Alarm.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="WireAdcStreamP.ArbitrateReadStream" loc="23(WireAdcStreamP.ArbitrateReadStream):../../tos/system/ArbitratedReadStreamC.nc">
      <documentation loc="10:../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadStreamC"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient" loc="43(BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient):../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="HamamatsuS1087ParP" loc="42:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParP.nc">
      <documentation loc="34:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParP.nc">
        <short>&#10; HamamatsuS1087ParP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform.</short>
        <long>&#10; HamamatsuS1087ParP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor2" loc="40(BootLedsAppC.Sensor2):../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
        <short>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HamamatsuS10871TsrC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadClientC" loc="47(BootLedsAppC.Sensor2.AdcReadClientC):../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <instance number="1">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient" loc="43(BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient):../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadStreamClientC" loc="47(BootLedsAppC.Sensor2.AdcReadStreamClientC):../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AdcReadStreamClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient" loc="43(BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient):../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430Adc12ClientAutoRVGC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC" loc="42(BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC):../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430Adc12ConfAlertC"/>
      </instance>
      <module/>
    </component>
    <component qname="HamamatsuS10871TsrP" loc="42:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <documentation loc="34:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
        <short>&#10; HamamatsuS10871TsrP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrP is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BootLedsAppC.Sensor3" loc="45(BootLedsAppC.Sensor3):../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP" loc="45(BootLedsAppC.Sensor3.SensirionSht11ReaderP):../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <instance number="0">
        <component-ref qname="SensirionSht11ReaderP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C" loc="43:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
        <short>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform.</short>
        <long>&#10; HalSensirionSht11C is an advanced access component for the&#10; Sensirion SHT11 model humidity and temperature sensor, available on&#10; the telosb platform. This component provides the SensirionSht11&#10; interface, which offers full control over the device. Please&#10; acquire the Resource before using it.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HalSensirionSht11C.SensirionSht11LogicP" loc="53(HalSensirionSht11C.SensirionSht11LogicP):../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <documentation loc="35:../../tos/chips/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SensirionSht11LogicP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C" loc="43:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <documentation loc="32:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
        <short>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them.</short>
        <long>&#10; HplSensirionSht11C is a low-level component, intended to provide&#10; the physical resources used by the Sensirion SHT11 sensor on the&#10; telosb platform so that the chip driver can make use of them. You&#10; really shouldn't be wiring to this, unless you're writing a new&#10; Sensirion SHT11 driver.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.6 $ $Date: 2007-02-04 19:56:29 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.DATAM" loc="42(HplSensirionSht11C.DATAM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.SCKM" loc="42(HplSensirionSht11C.SCKM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.PWRM" loc="42(HplSensirionSht11C.PWRM):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11P" loc="42:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <documentation loc="34:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
        <short>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.</short>
        <long>&#10; HplSensirionSht11P is a low-level component that controls power for&#10; the Sensirion SHT11 sensor on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:45 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.TimerMilliC" loc="44(HplSensirionSht11C.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="36:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.InterruptDATAC" loc="43(HplSensirionSht11C.InterruptDATAC):../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter" loc="89(HplSensirionSht11C.Arbiter):../../tos/system/FcfsArbiterC.nc">
      <documentation loc="69:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Sht11.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Queue" loc="42(HplSensirionSht11C.Arbiter.Queue):../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.Arbiter.Arbiter" loc="52(HplSensirionSht11C.Arbiter.Arbiter):../../tos/system/ArbiterP.nc">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC" loc="67(HplSensirionSht11C.SplitControlPowerManagerC):../../tos/lib/power/SplitControlPowerManagerC.nc">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SplitControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager" loc="58(HplSensirionSht11C.SplitControlPowerManagerC.PowerManager):../../tos/lib/power/PowerManagerP.nc">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="HalSensirionSht11C.TimerMilliC" loc="44(HalSensirionSht11C.TimerMilliC):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x406a47b8" loc="40:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x406a49e8" loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x406a4c18" loc="42:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x406a4e48" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x406a2068" loc="44:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x40794b88" loc="40:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x40794dc0" loc="41:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x407a9030" loc="42:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x407a9248" loc="43:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x407a9460" loc="44:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x407a9670" loc="45:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x407a9898" loc="46:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x407a9ac0" loc="47:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x407a9d30" loc="48:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x407b6108" loc="40:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x407b6368" loc="41:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x408f3d40" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x408f3d40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x4090a738" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x4090a738"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x4090d900" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x4090d900"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x4090dd60" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x4090dd60"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x4091b010" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x4091b010"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x4091b480" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x4091b480"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x4091b6e8" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x4091bb70" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x4091bb70"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x40914570" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x40914570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x409149d0" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x409149d0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40914c38" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40914c38"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x409260d8" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x409260d8"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x40926340" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40944910" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40944910"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40962010" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40962010"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x409621f0" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x409988e0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x409988e0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="41:../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.7 $ $Date: 2008-06-04 05:31:15 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40be9858" loc="89:../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x40c0bd40" loc="42:../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x40bfb7c0" loc="52:../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:../../tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40c72378" loc="47:../../tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40c6de30" loc="43:../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x40c895f0" loc="45:../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BigQueueC" loc="42:../../tos/system/BigQueueC.nc" abstract="">
      <documentation loc="33:../../tos/system/BigQueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2007-09-19 17:20:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x40cb0700" loc="42:../../tos/system/BigQueueC.nc">
          <component-ref qname="BigQueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x40cb0700"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x40cb0938" loc="42:../../tos/system/BigQueueC.nc">
          <component-ref qname="BigQueueC"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HamamatsuS1087ParC" loc="40:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc" abstract="">
      <documentation loc="32:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
        <short>&#10; HamamatsuS1087ParC is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform.</short>
        <long>&#10; HamamatsuS1087ParC is a driver for a photosynthetically-active&#10; radiation sensor available on the telosb platform. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="47:../../tos/chips/msp430/adc12/AdcReadClientC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Adc12ClientAutoRVGC" loc="43:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
        <short> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.</short>
        <long> &#10; This component virtualizes access to the HAL of the MSP430 ADC12.&#10; Reference voltage is enabled automatically as required by the configuration.&#10; &#10; @author Jan Hauer &#10;&#10; @see  Please refer to the README.txt and TEP 101 for more information about&#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SimpleRoundRobinArbiterC" loc="83:../../tos/system/SimpleRoundRobinArbiterC.nc" abstract="">
      <documentation loc="62:../../tos/system/SimpleRoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40dc3bc0" loc="83:../../tos/system/SimpleRoundRobinArbiterC.nc">
          <component-ref qname="SimpleRoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:../../tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/system/RoundRobinResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x40e026b8" loc="42:../../tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:../../tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:../../tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Adc12ConfAlertC" loc="42:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
        <short> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.</short>
        <long> &#10; The only purpose of this component is to generate a nesC warning&#10; if someone has wired to Msp430Adc12ClientAutoRVGC or &#10; Msp430Adc12ClientAutoDMA_RVGC and forgotten to wire to AdcConfigure.&#10; (nesC optimizes all of its code away).&#10;&#10; @author: Jan Hauer&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadStreamClientC" loc="47:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc" abstract="">
      <documentation loc="36:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
        <short> &#10; This component virtualizes the HIL of ADC12 on MSP430.</short>
        <long> &#10; This component virtualizes the HIL of ADC12 on MSP430. A client must wire&#10; &#60;code>AdcConfigure&#60;/code> to a component that returns the client's adc&#10; configuration data.&#10;&#10; @author Jan Hauer &#10; @see  Please refer to the README.txt and TEP 101 for more information about &#10; this component and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadStreamC" loc="23:../../tos/system/ArbitratedReadStreamC.nc" abstract="">
      <documentation loc="10:../../tos/system/ArbitratedReadStreamC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using&#10; ArbitratedReadStreamC in a safe way.&#10;&#10; @param width_t Width of the underlying ReadStream interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <constant name="nClients" ref="0x40f05148" loc="23:../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </constant>
        <typedef name="val_t" ref="0x40f05320" loc="23:../../tos/system/ArbitratedReadStreamC.nc">
          <component-ref qname="ArbitratedReadStreamC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40f05320"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HamamatsuS10871TsrC" loc="40:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc" abstract="">
      <documentation loc="32:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
        <short>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.</short>
        <long>&#10; HamamatsuS10871TsrC is a driver for a total solar radiation sensor&#10; available on the telosb platform.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SensirionSht11C" loc="45:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc" abstract="">
      <documentation loc="32:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
        <short>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform.</short>
        <long>&#10; SensirionSht11C is a top-level access component for the Sensirion&#10; SHT11 model humidity and temperature sensor, available on the&#10; telosb platform. Because this component represents one physical&#10; device, simultaneous calls to read temperature and humidity will be&#10; arbitrated and executed in sequential order. Feel free to read both&#10; at the same time, just be aware that they'll come back&#10; sequentially.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2007-04-13 21:46:18 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SensirionSht11ReaderP" loc="45:../../tos/chips/sht11/SensirionSht11ReaderP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SensirionSht11LogicP" loc="53:../../tos/chips/sht11/SensirionSht11LogicP.nc" abstract="">
      <documentation loc="35:../../tos/chips/sht11/SensirionSht11LogicP.nc">
        <short>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11LogicP contains the actual driver logic needed to&#10; read from the Sensirion SHT11 temperature/humidity sensor. It&#10; depends on 2 underlying GeneralIO interfaces, one for the data pin&#10; and one for the clock pin, and one underlying GpioInterrupt.  It&#10; provides the HAL-level SensirionSht11 interface. It's generic, so&#10; you can instantiate it multiple times if you have more than one&#10; Sensirion SHT11 attached to a node. &#10; &#10; &#60;p>&#10; This code assumes that the MCU clock is less than 10 MHz.  If you&#10; ever run this on a faster MCU, you'll need to insert a lot of&#10; waits to keep the Sensirion happy.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="43:../../tos/chips/msp430/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SplitControlPowerManagerC" loc="67:../../tos/lib/power/SplitControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/SplitControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component povides a power management policy for managing the power&#10; states of non-virtualized devices.  Non-virtualized devices are shared&#10; using a parameterized Resource interface, and are powered down according&#10; to some policy whenever there are no more pending requests to that Resource.&#10; The policy implemented by this component is to delay the power down of a&#10; device by some contant factor.  Such a policy is useful whenever a device&#10; has a long wake-up latency.  The cost of waiting for the device to power&#10; up can be avoided if the device is requested again before some predetermined&#10; amount of time.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>SplitControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>AsyncStdControl&#60;/code> or&#10; &#60;code>StdControl&#60;/code> interfaces, please use either the&#10; &#60;code>AsyncStdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="PowerManagerP" loc="58:../../tos/lib/power/PowerManagerP.nc" abstract="">
      <documentation loc="41:../../tos/lib/power/PowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="1" name="Leds" ref="0x40635528" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40635528"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40635700"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406357e0"/>
        <function-ref name="led1On" scoped="" ref="0x406358c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406359a0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40635a80"/>
        <function-ref name="get" scoped="" ref="0x40635b60"/>
        <function-ref name="led1Off" scoped="" ref="0x40635c40"/>
        <function-ref name="led2Off" scoped="" ref="0x4062a010"/>
        <function-ref name="set" scoped="" ref="0x40635d20"/>
        <function-ref name="led0On" scoped="" ref="0x40635e00"/>
        <function-ref name="led2On" scoped="" ref="0x40635ee0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x4063f370" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x4063f370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4063f548"/>
        <function-ref name="isInput" scoped="" ref="0x4063f628"/>
        <function-ref name="toggle" scoped="" ref="0x4063f708"/>
        <function-ref name="isOutput" scoped="" ref="0x4063f7e8"/>
        <function-ref name="get" scoped="" ref="0x4063f8c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4063f9a8"/>
        <function-ref name="set" scoped="" ref="0x4063fa88"/>
        <function-ref name="clr" scoped="" ref="0x4063fb68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406301a8" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x406301a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40630380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x4063fd58" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x4063fd58"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40631010"/>
        <function-ref name="isInput" scoped="" ref="0x406310f0"/>
        <function-ref name="toggle" scoped="" ref="0x406311d0"/>
        <function-ref name="isOutput" scoped="" ref="0x406312b0"/>
        <function-ref name="get" scoped="" ref="0x40631390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40631470"/>
        <function-ref name="set" scoped="" ref="0x40631550"/>
        <function-ref name="clr" scoped="" ref="0x40631630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x406304f0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x406304f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406306c8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406307a8"/>
        <function-ref name="led1On" scoped="" ref="0x40630888"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40630968"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40630a48"/>
        <function-ref name="get" scoped="" ref="0x40630b28"/>
        <function-ref name="led1Off" scoped="" ref="0x40630c08"/>
        <function-ref name="led2Off" scoped="" ref="0x40633010"/>
        <function-ref name="set" scoped="" ref="0x40630ce8"/>
        <function-ref name="led0On" scoped="" ref="0x40630dc8"/>
        <function-ref name="led2On" scoped="" ref="0x40630ea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x40631820" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x40631820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406319f8"/>
        <function-ref name="isInput" scoped="" ref="0x40631ad8"/>
        <function-ref name="toggle" scoped="" ref="0x40631bb8"/>
        <function-ref name="isOutput" scoped="" ref="0x40631c98"/>
        <function-ref name="get" scoped="" ref="0x40631d78"/>
        <function-ref name="makeOutput" scoped="" ref="0x40631e58"/>
        <function-ref name="set" scoped="" ref="0x4062f010"/>
        <function-ref name="clr" scoped="" ref="0x4062f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x40629290" loc="41:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x40629290"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40629468"/>
        <function-ref name="isInput" scoped="" ref="0x40629548"/>
        <function-ref name="toggle" scoped="" ref="0x40629628"/>
        <function-ref name="isOutput" scoped="" ref="0x40629708"/>
        <function-ref name="get" scoped="" ref="0x406297e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x406298c8"/>
        <function-ref name="set" scoped="" ref="0x406299a8"/>
        <function-ref name="clr" scoped="" ref="0x40629a88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x40629c98" loc="42:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x40629c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40629e70"/>
        <function-ref name="isInput" scoped="" ref="0x40641010"/>
        <function-ref name="toggle" scoped="" ref="0x406410f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406411d0"/>
        <function-ref name="get" scoped="" ref="0x406412b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40641390"/>
        <function-ref name="set" scoped="" ref="0x40641470"/>
        <function-ref name="clr" scoped="" ref="0x40641550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x406401a0" loc="44:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x406401a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40640378"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x40641760" loc="43:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x40641760"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40641938"/>
        <function-ref name="isInput" scoped="" ref="0x40641a18"/>
        <function-ref name="toggle" scoped="" ref="0x40641af8"/>
        <function-ref name="isOutput" scoped="" ref="0x40641bd8"/>
        <function-ref name="get" scoped="" ref="0x40641cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40641d98"/>
        <function-ref name="set" scoped="" ref="0x40641e78"/>
        <function-ref name="clr" scoped="" ref="0x40640010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x40657ae8" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x40657ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40657cc0"/>
        <function-ref name="isInput" scoped="" ref="0x40657da0"/>
        <function-ref name="setResistor" scoped="" ref="0x40657e80"/>
        <function-ref name="toggle" scoped="" ref="0x40656010"/>
        <function-ref name="isOutput" scoped="" ref="0x406560f0"/>
        <function-ref name="getResistor" scoped="" ref="0x406561d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406562b0"/>
        <function-ref name="get" scoped="" ref="0x40656390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40656470"/>
        <function-ref name="getRaw" scoped="" ref="0x40656550"/>
        <function-ref name="set" scoped="" ref="0x40656630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40656710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406567f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40656950"/>
        <function-ref name="clr" scoped="" ref="0x40656a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x4065fbc8" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x4065fbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4065fda0"/>
        <function-ref name="isInput" scoped="" ref="0x4065fe80"/>
        <function-ref name="setResistor" scoped="" ref="0x4065e010"/>
        <function-ref name="toggle" scoped="" ref="0x4065e0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4065e1d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4065e2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065e390"/>
        <function-ref name="get" scoped="" ref="0x4065e470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4065e550"/>
        <function-ref name="getRaw" scoped="" ref="0x4065e630"/>
        <function-ref name="set" scoped="" ref="0x4065e710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4065e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4065e8d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4065ea30"/>
        <function-ref name="clr" scoped="" ref="0x4065eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x40686d68" loc="145:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x40686d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40685010"/>
        <function-ref name="isInput" scoped="" ref="0x406850f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406851d0"/>
        <function-ref name="toggle" scoped="" ref="0x406852b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40685390"/>
        <function-ref name="getResistor" scoped="" ref="0x40685470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40685550"/>
        <function-ref name="get" scoped="" ref="0x40685630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40685710"/>
        <function-ref name="getRaw" scoped="" ref="0x406857f0"/>
        <function-ref name="set" scoped="" ref="0x406858d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406859b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40685a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40685bf0"/>
        <function-ref name="clr" scoped="" ref="0x40685cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x4069aad8" loc="165:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x4069aad8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069acb0"/>
        <function-ref name="isInput" scoped="" ref="0x4069ad90"/>
        <function-ref name="setResistor" scoped="" ref="0x4069ae70"/>
        <function-ref name="toggle" scoped="" ref="0x40699010"/>
        <function-ref name="isOutput" scoped="" ref="0x406990f0"/>
        <function-ref name="getResistor" scoped="" ref="0x406991d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406992b0"/>
        <function-ref name="get" scoped="" ref="0x40699390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40699470"/>
        <function-ref name="getRaw" scoped="" ref="0x40699550"/>
        <function-ref name="set" scoped="" ref="0x40699630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40699710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406997f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40699950"/>
        <function-ref name="clr" scoped="" ref="0x40699a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x40684010" loc="146:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x40684010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406841e8"/>
        <function-ref name="isInput" scoped="" ref="0x406842c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406843a8"/>
        <function-ref name="toggle" scoped="" ref="0x40684488"/>
        <function-ref name="isOutput" scoped="" ref="0x40684568"/>
        <function-ref name="getResistor" scoped="" ref="0x40684648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40684728"/>
        <function-ref name="get" scoped="" ref="0x40684808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406848e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406849c8"/>
        <function-ref name="set" scoped="" ref="0x40684aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40684b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40684c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40684dc8"/>
        <function-ref name="clr" scoped="" ref="0x40684ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x4065c010" loc="71:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x4065c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4065c1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4065c2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4065c3a8"/>
        <function-ref name="toggle" scoped="" ref="0x4065c488"/>
        <function-ref name="isOutput" scoped="" ref="0x4065c568"/>
        <function-ref name="getResistor" scoped="" ref="0x4065c648"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065c728"/>
        <function-ref name="get" scoped="" ref="0x4065c808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4065c8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x4065c9c8"/>
        <function-ref name="set" scoped="" ref="0x4065caa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4065cb88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4065cc68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4065cdc8"/>
        <function-ref name="clr" scoped="" ref="0x4065cea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x40665178" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x40665178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40665350"/>
        <function-ref name="isInput" scoped="" ref="0x40665430"/>
        <function-ref name="setResistor" scoped="" ref="0x40665510"/>
        <function-ref name="toggle" scoped="" ref="0x406655f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406656d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406657b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40665890"/>
        <function-ref name="get" scoped="" ref="0x40665970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40665a50"/>
        <function-ref name="getRaw" scoped="" ref="0x40665b30"/>
        <function-ref name="set" scoped="" ref="0x40665c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40665cf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40665dd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40678010"/>
        <function-ref name="clr" scoped="" ref="0x406780f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x40682368" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x40682368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40682540"/>
        <function-ref name="isInput" scoped="" ref="0x40682620"/>
        <function-ref name="setResistor" scoped="" ref="0x40682700"/>
        <function-ref name="toggle" scoped="" ref="0x406827e0"/>
        <function-ref name="isOutput" scoped="" ref="0x406828c0"/>
        <function-ref name="getResistor" scoped="" ref="0x406829a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40682a80"/>
        <function-ref name="get" scoped="" ref="0x40682b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40682c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40682d20"/>
        <function-ref name="set" scoped="" ref="0x40682e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40682ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40680010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40680170"/>
        <function-ref name="clr" scoped="" ref="0x40680250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x4068c178" loc="108:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x4068c178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4068c350"/>
        <function-ref name="isInput" scoped="" ref="0x4068c430"/>
        <function-ref name="setResistor" scoped="" ref="0x4068c510"/>
        <function-ref name="toggle" scoped="" ref="0x4068c5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4068c6d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4068c7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068c890"/>
        <function-ref name="get" scoped="" ref="0x4068c970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068ca50"/>
        <function-ref name="getRaw" scoped="" ref="0x4068cb30"/>
        <function-ref name="set" scoped="" ref="0x4068cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4068ccf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4068cdd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4068b010"/>
        <function-ref name="clr" scoped="" ref="0x4068b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x406953e0" loc="149:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x406953e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406955b8"/>
        <function-ref name="isInput" scoped="" ref="0x40695698"/>
        <function-ref name="setResistor" scoped="" ref="0x40695778"/>
        <function-ref name="toggle" scoped="" ref="0x40695858"/>
        <function-ref name="isOutput" scoped="" ref="0x40695938"/>
        <function-ref name="getResistor" scoped="" ref="0x40695a18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40695af8"/>
        <function-ref name="get" scoped="" ref="0x40695bd8"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40695cb8"/>
        <function-ref name="getRaw" scoped="" ref="0x40695d98"/>
        <function-ref name="set" scoped="" ref="0x40695e78"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40694010"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406940f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40694250"/>
        <function-ref name="clr" scoped="" ref="0x40694330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x406a0168" loc="159:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x406a0168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406a0340"/>
        <function-ref name="isInput" scoped="" ref="0x406a0420"/>
        <function-ref name="setResistor" scoped="" ref="0x406a0500"/>
        <function-ref name="toggle" scoped="" ref="0x406a05e0"/>
        <function-ref name="isOutput" scoped="" ref="0x406a06c0"/>
        <function-ref name="getResistor" scoped="" ref="0x406a07a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406a0880"/>
        <function-ref name="get" scoped="" ref="0x406a0960"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406a0a40"/>
        <function-ref name="getRaw" scoped="" ref="0x406a0b20"/>
        <function-ref name="set" scoped="" ref="0x406a0c00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406a0ce0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406a0dc0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406a0f20"/>
        <function-ref name="clr" scoped="" ref="0x4069f018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x406a9170" loc="171:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x406a9170"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406a9348"/>
        <function-ref name="isInput" scoped="" ref="0x406a9428"/>
        <function-ref name="setResistor" scoped="" ref="0x406a9508"/>
        <function-ref name="toggle" scoped="" ref="0x406a95e8"/>
        <function-ref name="isOutput" scoped="" ref="0x406a96c8"/>
        <function-ref name="getResistor" scoped="" ref="0x406a97a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x406a9888"/>
        <function-ref name="get" scoped="" ref="0x406a9968"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406a9a48"/>
        <function-ref name="getRaw" scoped="" ref="0x406a9b28"/>
        <function-ref name="set" scoped="" ref="0x406a9c08"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406a9ce8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406a9dc8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406a9f28"/>
        <function-ref name="clr" scoped="" ref="0x406a8018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x40653010" loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x40653010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406531e8"/>
        <function-ref name="isInput" scoped="" ref="0x406532c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406533a8"/>
        <function-ref name="toggle" scoped="" ref="0x40653488"/>
        <function-ref name="isOutput" scoped="" ref="0x40653568"/>
        <function-ref name="getResistor" scoped="" ref="0x40653648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40653728"/>
        <function-ref name="get" scoped="" ref="0x40653808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406538e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406539c8"/>
        <function-ref name="set" scoped="" ref="0x40653aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40653b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40653c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40653dc8"/>
        <function-ref name="clr" scoped="" ref="0x40653ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x406945a0" loc="150:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x406945a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40694778"/>
        <function-ref name="isInput" scoped="" ref="0x40694858"/>
        <function-ref name="setResistor" scoped="" ref="0x40694938"/>
        <function-ref name="toggle" scoped="" ref="0x40694a18"/>
        <function-ref name="isOutput" scoped="" ref="0x40694af8"/>
        <function-ref name="getResistor" scoped="" ref="0x40694bd8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40694cb8"/>
        <function-ref name="get" scoped="" ref="0x40694d98"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40694e78"/>
        <function-ref name="getRaw" scoped="" ref="0x40693010"/>
        <function-ref name="set" scoped="" ref="0x406930f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406931d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406932b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40693410"/>
        <function-ref name="clr" scoped="" ref="0x406934f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x40664368" loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x40664368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40664540"/>
        <function-ref name="isInput" scoped="" ref="0x40664620"/>
        <function-ref name="setResistor" scoped="" ref="0x40664700"/>
        <function-ref name="toggle" scoped="" ref="0x406647e0"/>
        <function-ref name="isOutput" scoped="" ref="0x406648c0"/>
        <function-ref name="getResistor" scoped="" ref="0x406649a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40664a80"/>
        <function-ref name="get" scoped="" ref="0x40664b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40664c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40664d20"/>
        <function-ref name="set" scoped="" ref="0x40664e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40664ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40663010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40663170"/>
        <function-ref name="clr" scoped="" ref="0x40663250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x4066d4c8" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x4066d4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066d6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4066d780"/>
        <function-ref name="setResistor" scoped="" ref="0x4066d860"/>
        <function-ref name="toggle" scoped="" ref="0x4066d940"/>
        <function-ref name="isOutput" scoped="" ref="0x4066da20"/>
        <function-ref name="getResistor" scoped="" ref="0x4066db00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4066dbe0"/>
        <function-ref name="get" scoped="" ref="0x4066dcc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4066dda0"/>
        <function-ref name="getRaw" scoped="" ref="0x4066de80"/>
        <function-ref name="set" scoped="" ref="0x4066c010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4066c0f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4066c1d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4066c330"/>
        <function-ref name="clr" scoped="" ref="0x4066c410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x40676688" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x40676688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40676860"/>
        <function-ref name="isInput" scoped="" ref="0x40676940"/>
        <function-ref name="setResistor" scoped="" ref="0x40676a20"/>
        <function-ref name="toggle" scoped="" ref="0x40676b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40676be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40676cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40676da0"/>
        <function-ref name="get" scoped="" ref="0x40676e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40675010"/>
        <function-ref name="getRaw" scoped="" ref="0x406750f0"/>
        <function-ref name="set" scoped="" ref="0x406751d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406752b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40675390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406754f0"/>
        <function-ref name="clr" scoped="" ref="0x406755d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x4067e848" loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x4067e848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4067ea20"/>
        <function-ref name="isInput" scoped="" ref="0x4067eb00"/>
        <function-ref name="setResistor" scoped="" ref="0x4067ebe0"/>
        <function-ref name="toggle" scoped="" ref="0x4067ecc0"/>
        <function-ref name="isOutput" scoped="" ref="0x4067eda0"/>
        <function-ref name="getResistor" scoped="" ref="0x4067ee80"/>
        <function-ref name="makeOutput" scoped="" ref="0x4067d010"/>
        <function-ref name="get" scoped="" ref="0x4067d0f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4067d1d0"/>
        <function-ref name="getRaw" scoped="" ref="0x4067d2b0"/>
        <function-ref name="set" scoped="" ref="0x4067d390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067d470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067d550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067d6b0"/>
        <function-ref name="clr" scoped="" ref="0x4067d790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x40689688" loc="111:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x40689688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40689860"/>
        <function-ref name="isInput" scoped="" ref="0x40689940"/>
        <function-ref name="setResistor" scoped="" ref="0x40689a20"/>
        <function-ref name="toggle" scoped="" ref="0x40689b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40689be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40689cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40689da0"/>
        <function-ref name="get" scoped="" ref="0x40689e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40688010"/>
        <function-ref name="getRaw" scoped="" ref="0x406880f0"/>
        <function-ref name="set" scoped="" ref="0x406881d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406882b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40688390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406884f0"/>
        <function-ref name="clr" scoped="" ref="0x406885d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x4064e768" loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x4064e768"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4064e940"/>
        <function-ref name="isInput" scoped="" ref="0x4064ea20"/>
        <function-ref name="setResistor" scoped="" ref="0x4064eb00"/>
        <function-ref name="toggle" scoped="" ref="0x4064ebe0"/>
        <function-ref name="isOutput" scoped="" ref="0x4064ecc0"/>
        <function-ref name="getResistor" scoped="" ref="0x4064eda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064ee80"/>
        <function-ref name="get" scoped="" ref="0x40658010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406580f0"/>
        <function-ref name="getRaw" scoped="" ref="0x406581d0"/>
        <function-ref name="set" scoped="" ref="0x406582b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40658390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40658470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406585d0"/>
        <function-ref name="clr" scoped="" ref="0x406586b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x40661848" loc="64:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x40661848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40661aa0"/>
        <function-ref name="isInput" scoped="" ref="0x40661b80"/>
        <function-ref name="setResistor" scoped="" ref="0x40661c60"/>
        <function-ref name="toggle" scoped="" ref="0x40661d40"/>
        <function-ref name="isOutput" scoped="" ref="0x40661e20"/>
        <function-ref name="getResistor" scoped="" ref="0x40661f00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40660010"/>
        <function-ref name="get" scoped="" ref="0x406600f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406601d0"/>
        <function-ref name="getRaw" scoped="" ref="0x406602b0"/>
        <function-ref name="set" scoped="" ref="0x40660390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40660470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40660550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406606b0"/>
        <function-ref name="clr" scoped="" ref="0x40660790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x4066aa08" loc="77:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x4066aa08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066abe0"/>
        <function-ref name="isInput" scoped="" ref="0x4066acc0"/>
        <function-ref name="setResistor" scoped="" ref="0x4066ada0"/>
        <function-ref name="toggle" scoped="" ref="0x4066ae80"/>
        <function-ref name="isOutput" scoped="" ref="0x40669010"/>
        <function-ref name="getResistor" scoped="" ref="0x406690f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406691d0"/>
        <function-ref name="get" scoped="" ref="0x406692b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40669390"/>
        <function-ref name="getRaw" scoped="" ref="0x40669470"/>
        <function-ref name="set" scoped="" ref="0x40669550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40669630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40669710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40669870"/>
        <function-ref name="clr" scoped="" ref="0x40669950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x40687bc0" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x40687bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40687d98"/>
        <function-ref name="isInput" scoped="" ref="0x40687e78"/>
        <function-ref name="setResistor" scoped="" ref="0x40686010"/>
        <function-ref name="toggle" scoped="" ref="0x406860f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406861d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406862b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40686390"/>
        <function-ref name="get" scoped="" ref="0x40686470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40686550"/>
        <function-ref name="getRaw" scoped="" ref="0x40686630"/>
        <function-ref name="set" scoped="" ref="0x40686710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406867f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406868d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40686a30"/>
        <function-ref name="clr" scoped="" ref="0x40686b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x4069d598" loc="162:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x4069d598"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069d770"/>
        <function-ref name="isInput" scoped="" ref="0x4069d850"/>
        <function-ref name="setResistor" scoped="" ref="0x4069d930"/>
        <function-ref name="toggle" scoped="" ref="0x4069da10"/>
        <function-ref name="isOutput" scoped="" ref="0x4069daf0"/>
        <function-ref name="getResistor" scoped="" ref="0x4069dbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4069dcb0"/>
        <function-ref name="get" scoped="" ref="0x4069dd90"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4069de70"/>
        <function-ref name="getRaw" scoped="" ref="0x4069c010"/>
        <function-ref name="set" scoped="" ref="0x4069c0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4069c1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4069c2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4069c410"/>
        <function-ref name="clr" scoped="" ref="0x4069c4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x406aa010" loc="169:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x406aa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406aa1e8"/>
        <function-ref name="isInput" scoped="" ref="0x406aa2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406aa3a8"/>
        <function-ref name="toggle" scoped="" ref="0x406aa488"/>
        <function-ref name="isOutput" scoped="" ref="0x406aa568"/>
        <function-ref name="getResistor" scoped="" ref="0x406aa648"/>
        <function-ref name="makeOutput" scoped="" ref="0x406aa728"/>
        <function-ref name="get" scoped="" ref="0x406aa808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406aa8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406aa9c8"/>
        <function-ref name="set" scoped="" ref="0x406aaaa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406aab88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406aac68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406aadc8"/>
        <function-ref name="clr" scoped="" ref="0x406aaea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x40690ca0" loc="155:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x40690ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40690e78"/>
        <function-ref name="isInput" scoped="" ref="0x4068f010"/>
        <function-ref name="setResistor" scoped="" ref="0x4068f0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4068f1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4068f2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4068f390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068f470"/>
        <function-ref name="get" scoped="" ref="0x4068f550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068f630"/>
        <function-ref name="getRaw" scoped="" ref="0x4068f710"/>
        <function-ref name="set" scoped="" ref="0x4068f7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4068f8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4068f9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4068fb10"/>
        <function-ref name="clr" scoped="" ref="0x4068fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x40668d88" loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x40668d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40667070"/>
        <function-ref name="isInput" scoped="" ref="0x40667150"/>
        <function-ref name="setResistor" scoped="" ref="0x40667230"/>
        <function-ref name="toggle" scoped="" ref="0x40667310"/>
        <function-ref name="isOutput" scoped="" ref="0x406673f0"/>
        <function-ref name="getResistor" scoped="" ref="0x406674d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406675b0"/>
        <function-ref name="get" scoped="" ref="0x40667690"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40667770"/>
        <function-ref name="getRaw" scoped="" ref="0x40667850"/>
        <function-ref name="set" scoped="" ref="0x40667930"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40667a10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40667af0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40667c50"/>
        <function-ref name="clr" scoped="" ref="0x40667d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x40670010" loc="95:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x40670010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406701e8"/>
        <function-ref name="isInput" scoped="" ref="0x406702c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406703a8"/>
        <function-ref name="toggle" scoped="" ref="0x40670488"/>
        <function-ref name="isOutput" scoped="" ref="0x40670568"/>
        <function-ref name="getResistor" scoped="" ref="0x40670648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40670728"/>
        <function-ref name="get" scoped="" ref="0x40670808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406708e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406709c8"/>
        <function-ref name="set" scoped="" ref="0x40670aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40670b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40670c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40670dc8"/>
        <function-ref name="clr" scoped="" ref="0x40670ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x4067bd88" loc="106:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x4067bd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4067a010"/>
        <function-ref name="isInput" scoped="" ref="0x4067a0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4067a1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4067a2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4067a390"/>
        <function-ref name="getResistor" scoped="" ref="0x4067a470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4067a550"/>
        <function-ref name="get" scoped="" ref="0x4067a630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4067a710"/>
        <function-ref name="getRaw" scoped="" ref="0x4067a7f0"/>
        <function-ref name="set" scoped="" ref="0x4067a8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067a9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067aa90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067abf0"/>
        <function-ref name="clr" scoped="" ref="0x4067acd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x4069c758" loc="163:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x4069c758"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069c930"/>
        <function-ref name="isInput" scoped="" ref="0x4069ca10"/>
        <function-ref name="setResistor" scoped="" ref="0x4069caf0"/>
        <function-ref name="toggle" scoped="" ref="0x4069cbd0"/>
        <function-ref name="isOutput" scoped="" ref="0x4069ccb0"/>
        <function-ref name="getResistor" scoped="" ref="0x4069cd90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4069ce70"/>
        <function-ref name="get" scoped="" ref="0x4069b010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4069b0f0"/>
        <function-ref name="getRaw" scoped="" ref="0x4069b1d0"/>
        <function-ref name="set" scoped="" ref="0x4069b2b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4069b390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4069b470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4069b5d0"/>
        <function-ref name="clr" scoped="" ref="0x4069b6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x40693758" loc="152:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x40693758"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40693930"/>
        <function-ref name="isInput" scoped="" ref="0x40693a10"/>
        <function-ref name="setResistor" scoped="" ref="0x40693af0"/>
        <function-ref name="toggle" scoped="" ref="0x40693bd0"/>
        <function-ref name="isOutput" scoped="" ref="0x40693cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x40693d90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40693e70"/>
        <function-ref name="get" scoped="" ref="0x40692010"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406920f0"/>
        <function-ref name="getRaw" scoped="" ref="0x406921d0"/>
        <function-ref name="set" scoped="" ref="0x406922b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40692390"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40692470"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406925d0"/>
        <function-ref name="clr" scoped="" ref="0x406926b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x40656ca8" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x40656ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40656e80"/>
        <function-ref name="isInput" scoped="" ref="0x40655010"/>
        <function-ref name="setResistor" scoped="" ref="0x406550f0"/>
        <function-ref name="toggle" scoped="" ref="0x406551d0"/>
        <function-ref name="isOutput" scoped="" ref="0x406552b0"/>
        <function-ref name="getResistor" scoped="" ref="0x40655390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40655470"/>
        <function-ref name="get" scoped="" ref="0x40655550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40655630"/>
        <function-ref name="getRaw" scoped="" ref="0x40655710"/>
        <function-ref name="set" scoped="" ref="0x406557f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406558d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406559b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40655b10"/>
        <function-ref name="clr" scoped="" ref="0x40655bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x4065ed88" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x4065ed88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4065d010"/>
        <function-ref name="isInput" scoped="" ref="0x4065d0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4065d1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4065d2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4065d390"/>
        <function-ref name="getResistor" scoped="" ref="0x4065d470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065d550"/>
        <function-ref name="get" scoped="" ref="0x4065d630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4065d710"/>
        <function-ref name="getRaw" scoped="" ref="0x4065d7f0"/>
        <function-ref name="set" scoped="" ref="0x4065d8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4065d9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4065da90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4065dbf0"/>
        <function-ref name="clr" scoped="" ref="0x4065dcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x4067da08" loc="104:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x4067da08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4067dbe0"/>
        <function-ref name="isInput" scoped="" ref="0x4067dcc0"/>
        <function-ref name="setResistor" scoped="" ref="0x4067dda0"/>
        <function-ref name="toggle" scoped="" ref="0x4067de80"/>
        <function-ref name="isOutput" scoped="" ref="0x4067c010"/>
        <function-ref name="getResistor" scoped="" ref="0x4067c0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4067c1d0"/>
        <function-ref name="get" scoped="" ref="0x4067c2b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4067c390"/>
        <function-ref name="getRaw" scoped="" ref="0x4067c470"/>
        <function-ref name="set" scoped="" ref="0x4067c550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067c630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067c710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067c870"/>
        <function-ref name="clr" scoped="" ref="0x4067c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x4065b178" loc="72:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x4065b178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4065b350"/>
        <function-ref name="isInput" scoped="" ref="0x4065b430"/>
        <function-ref name="setResistor" scoped="" ref="0x4065b510"/>
        <function-ref name="toggle" scoped="" ref="0x4065b5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4065b6d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4065b7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065b890"/>
        <function-ref name="get" scoped="" ref="0x4065b970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4065ba50"/>
        <function-ref name="getRaw" scoped="" ref="0x4065bb30"/>
        <function-ref name="set" scoped="" ref="0x4065bc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4065bcf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4065bdd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4066e010"/>
        <function-ref name="clr" scoped="" ref="0x4066e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x40678368" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x40678368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40678540"/>
        <function-ref name="isInput" scoped="" ref="0x40678620"/>
        <function-ref name="setResistor" scoped="" ref="0x40678700"/>
        <function-ref name="toggle" scoped="" ref="0x406787e0"/>
        <function-ref name="isOutput" scoped="" ref="0x406788c0"/>
        <function-ref name="getResistor" scoped="" ref="0x406789a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40678a80"/>
        <function-ref name="get" scoped="" ref="0x40678b60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40678c40"/>
        <function-ref name="getRaw" scoped="" ref="0x40678d20"/>
        <function-ref name="set" scoped="" ref="0x40678e00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40678ee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40677010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40677170"/>
        <function-ref name="clr" scoped="" ref="0x40677250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x406804c8" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x406804c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406806a0"/>
        <function-ref name="isInput" scoped="" ref="0x40680780"/>
        <function-ref name="setResistor" scoped="" ref="0x40680860"/>
        <function-ref name="toggle" scoped="" ref="0x40680940"/>
        <function-ref name="isOutput" scoped="" ref="0x40680a20"/>
        <function-ref name="getResistor" scoped="" ref="0x40680b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40680be0"/>
        <function-ref name="get" scoped="" ref="0x40680cc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40680da0"/>
        <function-ref name="getRaw" scoped="" ref="0x40680e80"/>
        <function-ref name="set" scoped="" ref="0x4067f010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067f0f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067f1d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067f330"/>
        <function-ref name="clr" scoped="" ref="0x4067f410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x4068b368" loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x4068b368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4068b540"/>
        <function-ref name="isInput" scoped="" ref="0x4068b620"/>
        <function-ref name="setResistor" scoped="" ref="0x4068b700"/>
        <function-ref name="toggle" scoped="" ref="0x4068b7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4068b8c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4068b9a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068ba80"/>
        <function-ref name="get" scoped="" ref="0x4068bb60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068bc40"/>
        <function-ref name="getRaw" scoped="" ref="0x4068bd20"/>
        <function-ref name="set" scoped="" ref="0x4068be00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4068bee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4068a010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4068a170"/>
        <function-ref name="clr" scoped="" ref="0x4068a250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x40691ae0" loc="154:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x40691ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40691cb8"/>
        <function-ref name="isInput" scoped="" ref="0x40691d98"/>
        <function-ref name="setResistor" scoped="" ref="0x40691e78"/>
        <function-ref name="toggle" scoped="" ref="0x40690010"/>
        <function-ref name="isOutput" scoped="" ref="0x406900f0"/>
        <function-ref name="getResistor" scoped="" ref="0x406901d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406902b0"/>
        <function-ref name="get" scoped="" ref="0x40690390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40690470"/>
        <function-ref name="getRaw" scoped="" ref="0x40690550"/>
        <function-ref name="set" scoped="" ref="0x40690630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40690710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406907f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40690950"/>
        <function-ref name="clr" scoped="" ref="0x40690a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x406593c8" loc="49:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x406593c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406595a0"/>
        <function-ref name="isInput" scoped="" ref="0x40659680"/>
        <function-ref name="setResistor" scoped="" ref="0x40659760"/>
        <function-ref name="toggle" scoped="" ref="0x40659840"/>
        <function-ref name="isOutput" scoped="" ref="0x40659920"/>
        <function-ref name="getResistor" scoped="" ref="0x40659a00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40659ae0"/>
        <function-ref name="get" scoped="" ref="0x40659bc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40659ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x40659d80"/>
        <function-ref name="set" scoped="" ref="0x40659e60"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4064f010"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4064f0f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4064f250"/>
        <function-ref name="clr" scoped="" ref="0x4064f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x406634c8" loc="62:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x406634c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406636a0"/>
        <function-ref name="isInput" scoped="" ref="0x40663780"/>
        <function-ref name="setResistor" scoped="" ref="0x40663860"/>
        <function-ref name="toggle" scoped="" ref="0x40663940"/>
        <function-ref name="isOutput" scoped="" ref="0x40663a20"/>
        <function-ref name="getResistor" scoped="" ref="0x40663b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40663be0"/>
        <function-ref name="get" scoped="" ref="0x40663cc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40663da0"/>
        <function-ref name="getRaw" scoped="" ref="0x40663e80"/>
        <function-ref name="set" scoped="" ref="0x40662010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406620f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406621d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40662330"/>
        <function-ref name="clr" scoped="" ref="0x40662410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x4066c688" loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x4066c688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066c860"/>
        <function-ref name="isInput" scoped="" ref="0x4066c940"/>
        <function-ref name="setResistor" scoped="" ref="0x4066ca20"/>
        <function-ref name="toggle" scoped="" ref="0x4066cb00"/>
        <function-ref name="isOutput" scoped="" ref="0x4066cbe0"/>
        <function-ref name="getResistor" scoped="" ref="0x4066ccc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4066cda0"/>
        <function-ref name="get" scoped="" ref="0x4066ce80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4066b010"/>
        <function-ref name="getRaw" scoped="" ref="0x4066b0f0"/>
        <function-ref name="set" scoped="" ref="0x4066b1d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4066b2b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4066b390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4066b4f0"/>
        <function-ref name="clr" scoped="" ref="0x4066b5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x40675848" loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x40675848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40675a20"/>
        <function-ref name="isInput" scoped="" ref="0x40675b00"/>
        <function-ref name="setResistor" scoped="" ref="0x40675be0"/>
        <function-ref name="toggle" scoped="" ref="0x40675cc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40675da0"/>
        <function-ref name="getResistor" scoped="" ref="0x40675e80"/>
        <function-ref name="makeOutput" scoped="" ref="0x40674010"/>
        <function-ref name="get" scoped="" ref="0x406740f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406741d0"/>
        <function-ref name="getRaw" scoped="" ref="0x406742b0"/>
        <function-ref name="set" scoped="" ref="0x40674390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40674470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40674550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406746b0"/>
        <function-ref name="clr" scoped="" ref="0x40674790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x4068fe60" loc="156:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x4068fe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4068e050"/>
        <function-ref name="isInput" scoped="" ref="0x4068e130"/>
        <function-ref name="setResistor" scoped="" ref="0x4068e210"/>
        <function-ref name="toggle" scoped="" ref="0x4068e2f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4068e3d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4068e4b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068e590"/>
        <function-ref name="get" scoped="" ref="0x4068e670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068e750"/>
        <function-ref name="getRaw" scoped="" ref="0x4068e830"/>
        <function-ref name="set" scoped="" ref="0x4068e910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4068e9f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4068ead0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4068ec30"/>
        <function-ref name="clr" scoped="" ref="0x4068ed10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x4069f280" loc="160:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x4069f280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069f458"/>
        <function-ref name="isInput" scoped="" ref="0x4069f538"/>
        <function-ref name="setResistor" scoped="" ref="0x4069f618"/>
        <function-ref name="toggle" scoped="" ref="0x4069f6f8"/>
        <function-ref name="isOutput" scoped="" ref="0x4069f7d8"/>
        <function-ref name="getResistor" scoped="" ref="0x4069f8b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4069f998"/>
        <function-ref name="get" scoped="" ref="0x4069fa78"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4069fb58"/>
        <function-ref name="getRaw" scoped="" ref="0x4069fc38"/>
        <function-ref name="set" scoped="" ref="0x4069fd18"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4069fdf8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4069fed8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4069e090"/>
        <function-ref name="clr" scoped="" ref="0x4069e170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x40699c98" loc="166:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x40699c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40699e70"/>
        <function-ref name="isInput" scoped="" ref="0x40698010"/>
        <function-ref name="setResistor" scoped="" ref="0x406980f0"/>
        <function-ref name="toggle" scoped="" ref="0x406981d0"/>
        <function-ref name="isOutput" scoped="" ref="0x406982b0"/>
        <function-ref name="getResistor" scoped="" ref="0x40698390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40698470"/>
        <function-ref name="get" scoped="" ref="0x40698550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40698630"/>
        <function-ref name="getRaw" scoped="" ref="0x40698710"/>
        <function-ref name="set" scoped="" ref="0x406987f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406988d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406989b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40698b10"/>
        <function-ref name="clr" scoped="" ref="0x40698bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x40673bc8" loc="93:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x40673bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40673da0"/>
        <function-ref name="isInput" scoped="" ref="0x40673e80"/>
        <function-ref name="setResistor" scoped="" ref="0x40672010"/>
        <function-ref name="toggle" scoped="" ref="0x406720f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406721d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406722b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40672390"/>
        <function-ref name="get" scoped="" ref="0x40672470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40672550"/>
        <function-ref name="getRaw" scoped="" ref="0x40672630"/>
        <function-ref name="set" scoped="" ref="0x40672710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406727f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406728d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40672a30"/>
        <function-ref name="clr" scoped="" ref="0x40672b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x4068d010" loc="157:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x4068d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4068d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4068d2c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4068d3a8"/>
        <function-ref name="toggle" scoped="" ref="0x4068d488"/>
        <function-ref name="isOutput" scoped="" ref="0x4068d568"/>
        <function-ref name="getResistor" scoped="" ref="0x4068d648"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068d728"/>
        <function-ref name="get" scoped="" ref="0x4068d808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068d8e8"/>
        <function-ref name="getRaw" scoped="" ref="0x4068d9c8"/>
        <function-ref name="set" scoped="" ref="0x4068daa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4068db88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4068dc68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4068ddc8"/>
        <function-ref name="clr" scoped="" ref="0x4068dea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x40658928" loc="52:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x40658928"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40658b00"/>
        <function-ref name="isInput" scoped="" ref="0x40658be0"/>
        <function-ref name="setResistor" scoped="" ref="0x40658cc0"/>
        <function-ref name="toggle" scoped="" ref="0x40658da0"/>
        <function-ref name="isOutput" scoped="" ref="0x40658e80"/>
        <function-ref name="getResistor" scoped="" ref="0x40657010"/>
        <function-ref name="makeOutput" scoped="" ref="0x406570f0"/>
        <function-ref name="get" scoped="" ref="0x406571d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406572b0"/>
        <function-ref name="getRaw" scoped="" ref="0x40657390"/>
        <function-ref name="set" scoped="" ref="0x40657470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40657550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40657630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40657790"/>
        <function-ref name="clr" scoped="" ref="0x40657870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x40660a08" loc="65:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x40660a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40660be0"/>
        <function-ref name="isInput" scoped="" ref="0x40660cc0"/>
        <function-ref name="setResistor" scoped="" ref="0x40660da0"/>
        <function-ref name="toggle" scoped="" ref="0x40660e80"/>
        <function-ref name="isOutput" scoped="" ref="0x4065f010"/>
        <function-ref name="getResistor" scoped="" ref="0x4065f0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4065f1d0"/>
        <function-ref name="get" scoped="" ref="0x4065f2b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4065f390"/>
        <function-ref name="getRaw" scoped="" ref="0x4065f470"/>
        <function-ref name="set" scoped="" ref="0x4065f550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4065f630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4065f710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4065f870"/>
        <function-ref name="clr" scoped="" ref="0x4065f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x40669bc8" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x40669bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40669da0"/>
        <function-ref name="isInput" scoped="" ref="0x40669e80"/>
        <function-ref name="setResistor" scoped="" ref="0x40668010"/>
        <function-ref name="toggle" scoped="" ref="0x406680f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406681d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406682b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40668390"/>
        <function-ref name="get" scoped="" ref="0x40668470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40668550"/>
        <function-ref name="getRaw" scoped="" ref="0x40668630"/>
        <function-ref name="set" scoped="" ref="0x40668710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406687f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406688d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40668a30"/>
        <function-ref name="clr" scoped="" ref="0x40668b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x40692920" loc="153:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x40692920"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40692af8"/>
        <function-ref name="isInput" scoped="" ref="0x40692bd8"/>
        <function-ref name="setResistor" scoped="" ref="0x40692cb8"/>
        <function-ref name="toggle" scoped="" ref="0x40692d98"/>
        <function-ref name="isOutput" scoped="" ref="0x40692e78"/>
        <function-ref name="getResistor" scoped="" ref="0x40691010"/>
        <function-ref name="makeOutput" scoped="" ref="0x406910f0"/>
        <function-ref name="get" scoped="" ref="0x406911d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406912b0"/>
        <function-ref name="getRaw" scoped="" ref="0x40691390"/>
        <function-ref name="set" scoped="" ref="0x40691470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40691550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40691630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40691790"/>
        <function-ref name="clr" scoped="" ref="0x40691870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x4069b918" loc="164:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x4069b918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069baf0"/>
        <function-ref name="isInput" scoped="" ref="0x4069bbd0"/>
        <function-ref name="setResistor" scoped="" ref="0x4069bcb0"/>
        <function-ref name="toggle" scoped="" ref="0x4069bd90"/>
        <function-ref name="isOutput" scoped="" ref="0x4069be70"/>
        <function-ref name="getResistor" scoped="" ref="0x4069a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4069a0f0"/>
        <function-ref name="get" scoped="" ref="0x4069a1d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4069a2b0"/>
        <function-ref name="getRaw" scoped="" ref="0x4069a390"/>
        <function-ref name="set" scoped="" ref="0x4069a470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4069a550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4069a630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4069a790"/>
        <function-ref name="clr" scoped="" ref="0x4069a870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x40666010" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x40666010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406661e8"/>
        <function-ref name="isInput" scoped="" ref="0x406662c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406663a8"/>
        <function-ref name="toggle" scoped="" ref="0x40666488"/>
        <function-ref name="isOutput" scoped="" ref="0x40666568"/>
        <function-ref name="getResistor" scoped="" ref="0x40666648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40666728"/>
        <function-ref name="get" scoped="" ref="0x40666808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406668e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406669c8"/>
        <function-ref name="set" scoped="" ref="0x40666aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40666b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40666c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40666dc8"/>
        <function-ref name="clr" scoped="" ref="0x40666ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x4066f178" loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x4066f178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066f350"/>
        <function-ref name="isInput" scoped="" ref="0x4066f430"/>
        <function-ref name="setResistor" scoped="" ref="0x4066f510"/>
        <function-ref name="toggle" scoped="" ref="0x4066f5f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4066f6d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4066f7b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4066f890"/>
        <function-ref name="get" scoped="" ref="0x4066f970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4066fa50"/>
        <function-ref name="getRaw" scoped="" ref="0x4066fb30"/>
        <function-ref name="set" scoped="" ref="0x4066fc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4066fcf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4066fdd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40682010"/>
        <function-ref name="clr" scoped="" ref="0x406820f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x40679010" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x40679010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406791e8"/>
        <function-ref name="isInput" scoped="" ref="0x406792c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406793a8"/>
        <function-ref name="toggle" scoped="" ref="0x40679488"/>
        <function-ref name="isOutput" scoped="" ref="0x40679568"/>
        <function-ref name="getResistor" scoped="" ref="0x40679648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40679728"/>
        <function-ref name="get" scoped="" ref="0x40679808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406798e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406799c8"/>
        <function-ref name="set" scoped="" ref="0x40679aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40679b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40679c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40679dc8"/>
        <function-ref name="clr" scoped="" ref="0x40679ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x40655e68" loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x40655e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40654050"/>
        <function-ref name="isInput" scoped="" ref="0x40654130"/>
        <function-ref name="setResistor" scoped="" ref="0x40654210"/>
        <function-ref name="toggle" scoped="" ref="0x406542f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406543d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406544b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40654590"/>
        <function-ref name="get" scoped="" ref="0x40654670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40654750"/>
        <function-ref name="getRaw" scoped="" ref="0x40654830"/>
        <function-ref name="set" scoped="" ref="0x40654910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406549f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40654ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40654c30"/>
        <function-ref name="clr" scoped="" ref="0x40654d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x4067cbc8" loc="105:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x4067cbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4067cda0"/>
        <function-ref name="isInput" scoped="" ref="0x4067ce80"/>
        <function-ref name="setResistor" scoped="" ref="0x4067b010"/>
        <function-ref name="toggle" scoped="" ref="0x4067b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4067b1d0"/>
        <function-ref name="getResistor" scoped="" ref="0x4067b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4067b390"/>
        <function-ref name="get" scoped="" ref="0x4067b470"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4067b550"/>
        <function-ref name="getRaw" scoped="" ref="0x4067b630"/>
        <function-ref name="set" scoped="" ref="0x4067b710"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067b8d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067ba30"/>
        <function-ref name="clr" scoped="" ref="0x4067bb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x40652178" loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x40652178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40652350"/>
        <function-ref name="isInput" scoped="" ref="0x40652430"/>
        <function-ref name="setResistor" scoped="" ref="0x40652510"/>
        <function-ref name="toggle" scoped="" ref="0x406525f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406526d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406527b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40652890"/>
        <function-ref name="get" scoped="" ref="0x40652970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40652a50"/>
        <function-ref name="getRaw" scoped="" ref="0x40652b30"/>
        <function-ref name="set" scoped="" ref="0x40652c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40652cf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40652dd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40664010"/>
        <function-ref name="clr" scoped="" ref="0x406640f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x4066e368" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x4066e368"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066e540"/>
        <function-ref name="isInput" scoped="" ref="0x4066e620"/>
        <function-ref name="setResistor" scoped="" ref="0x4066e700"/>
        <function-ref name="toggle" scoped="" ref="0x4066e7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4066e8c0"/>
        <function-ref name="getResistor" scoped="" ref="0x4066e9a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4066ea80"/>
        <function-ref name="get" scoped="" ref="0x4066eb60"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4066ec40"/>
        <function-ref name="getRaw" scoped="" ref="0x4066ed20"/>
        <function-ref name="set" scoped="" ref="0x4066ee00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4066eee0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4066d010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4066d170"/>
        <function-ref name="clr" scoped="" ref="0x4066d250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x406774c8" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x406774c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406776a0"/>
        <function-ref name="isInput" scoped="" ref="0x40677780"/>
        <function-ref name="setResistor" scoped="" ref="0x40677860"/>
        <function-ref name="toggle" scoped="" ref="0x40677940"/>
        <function-ref name="isOutput" scoped="" ref="0x40677a20"/>
        <function-ref name="getResistor" scoped="" ref="0x40677b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40677be0"/>
        <function-ref name="get" scoped="" ref="0x40677cc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40677da0"/>
        <function-ref name="getRaw" scoped="" ref="0x40677e80"/>
        <function-ref name="set" scoped="" ref="0x40676010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406760f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406761d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40676330"/>
        <function-ref name="clr" scoped="" ref="0x40676410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x4067f688" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x4067f688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4067f860"/>
        <function-ref name="isInput" scoped="" ref="0x4067f940"/>
        <function-ref name="setResistor" scoped="" ref="0x4067fa20"/>
        <function-ref name="toggle" scoped="" ref="0x4067fb00"/>
        <function-ref name="isOutput" scoped="" ref="0x4067fbe0"/>
        <function-ref name="getResistor" scoped="" ref="0x4067fcc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4067fda0"/>
        <function-ref name="get" scoped="" ref="0x4067fe80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4067e010"/>
        <function-ref name="getRaw" scoped="" ref="0x4067e0f0"/>
        <function-ref name="set" scoped="" ref="0x4067e1d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4067e2b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4067e390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4067e4f0"/>
        <function-ref name="clr" scoped="" ref="0x4067e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x4068a4c8" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x4068a4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4068a6a0"/>
        <function-ref name="isInput" scoped="" ref="0x4068a780"/>
        <function-ref name="setResistor" scoped="" ref="0x4068a860"/>
        <function-ref name="toggle" scoped="" ref="0x4068a940"/>
        <function-ref name="isOutput" scoped="" ref="0x4068aa20"/>
        <function-ref name="getResistor" scoped="" ref="0x4068ab00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4068abe0"/>
        <function-ref name="get" scoped="" ref="0x4068acc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4068ada0"/>
        <function-ref name="getRaw" scoped="" ref="0x4068ae80"/>
        <function-ref name="set" scoped="" ref="0x40689010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406890f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406891d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40689330"/>
        <function-ref name="clr" scoped="" ref="0x40689410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x4064f5a8" loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x4064f5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4064f780"/>
        <function-ref name="isInput" scoped="" ref="0x4064f860"/>
        <function-ref name="setResistor" scoped="" ref="0x4064f940"/>
        <function-ref name="toggle" scoped="" ref="0x4064fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x4064fb00"/>
        <function-ref name="getResistor" scoped="" ref="0x4064fbe0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4064fcc0"/>
        <function-ref name="get" scoped="" ref="0x4064fda0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4064fe80"/>
        <function-ref name="getRaw" scoped="" ref="0x4064e010"/>
        <function-ref name="set" scoped="" ref="0x4064e0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4064e1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4064e2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4064e410"/>
        <function-ref name="clr" scoped="" ref="0x4064e4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x40662688" loc="63:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x40662688"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40662860"/>
        <function-ref name="isInput" scoped="" ref="0x40662940"/>
        <function-ref name="setResistor" scoped="" ref="0x40662a20"/>
        <function-ref name="toggle" scoped="" ref="0x40662b00"/>
        <function-ref name="isOutput" scoped="" ref="0x40662be0"/>
        <function-ref name="getResistor" scoped="" ref="0x40662cc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40662da0"/>
        <function-ref name="get" scoped="" ref="0x40662e80"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40661010"/>
        <function-ref name="getRaw" scoped="" ref="0x406610f0"/>
        <function-ref name="set" scoped="" ref="0x406611d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406612b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40661390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406614f0"/>
        <function-ref name="clr" scoped="" ref="0x406615d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x4066b848" loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x4066b848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4066ba20"/>
        <function-ref name="isInput" scoped="" ref="0x4066bb00"/>
        <function-ref name="setResistor" scoped="" ref="0x4066bbe0"/>
        <function-ref name="toggle" scoped="" ref="0x4066bcc0"/>
        <function-ref name="isOutput" scoped="" ref="0x4066bda0"/>
        <function-ref name="getResistor" scoped="" ref="0x4066be80"/>
        <function-ref name="makeOutput" scoped="" ref="0x4066a010"/>
        <function-ref name="get" scoped="" ref="0x4066a0f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4066a1d0"/>
        <function-ref name="getRaw" scoped="" ref="0x4066a2b0"/>
        <function-ref name="set" scoped="" ref="0x4066a390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4066a470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4066a550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4066a6b0"/>
        <function-ref name="clr" scoped="" ref="0x4066a790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x40674a08" loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x40674a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40674be0"/>
        <function-ref name="isInput" scoped="" ref="0x40674cc0"/>
        <function-ref name="setResistor" scoped="" ref="0x40674da0"/>
        <function-ref name="toggle" scoped="" ref="0x40674e80"/>
        <function-ref name="isOutput" scoped="" ref="0x40673010"/>
        <function-ref name="getResistor" scoped="" ref="0x406730f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406731d0"/>
        <function-ref name="get" scoped="" ref="0x406732b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40673390"/>
        <function-ref name="getRaw" scoped="" ref="0x40673470"/>
        <function-ref name="set" scoped="" ref="0x40673550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40673630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40673710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40673870"/>
        <function-ref name="clr" scoped="" ref="0x40673950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x40696270" loc="148:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x40696270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40696448"/>
        <function-ref name="isInput" scoped="" ref="0x40696528"/>
        <function-ref name="setResistor" scoped="" ref="0x40696608"/>
        <function-ref name="toggle" scoped="" ref="0x406966e8"/>
        <function-ref name="isOutput" scoped="" ref="0x406967c8"/>
        <function-ref name="getResistor" scoped="" ref="0x406968a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40696988"/>
        <function-ref name="get" scoped="" ref="0x40696a68"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40696b48"/>
        <function-ref name="getRaw" scoped="" ref="0x40696c28"/>
        <function-ref name="set" scoped="" ref="0x40696d08"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40696de8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40696ec8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40695090"/>
        <function-ref name="clr" scoped="" ref="0x40695170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x4069e3d8" loc="161:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x4069e3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4069e5b0"/>
        <function-ref name="isInput" scoped="" ref="0x4069e690"/>
        <function-ref name="setResistor" scoped="" ref="0x4069e770"/>
        <function-ref name="toggle" scoped="" ref="0x4069e850"/>
        <function-ref name="isOutput" scoped="" ref="0x4069e930"/>
        <function-ref name="getResistor" scoped="" ref="0x4069ea10"/>
        <function-ref name="makeOutput" scoped="" ref="0x4069eaf0"/>
        <function-ref name="get" scoped="" ref="0x4069ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4069ecb0"/>
        <function-ref name="getRaw" scoped="" ref="0x4069ed90"/>
        <function-ref name="set" scoped="" ref="0x4069ee70"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4069d010"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4069d0f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4069d250"/>
        <function-ref name="clr" scoped="" ref="0x4069d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x40683170" loc="147:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x40683170"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40683348"/>
        <function-ref name="isInput" scoped="" ref="0x40683428"/>
        <function-ref name="setResistor" scoped="" ref="0x40683508"/>
        <function-ref name="toggle" scoped="" ref="0x406835e8"/>
        <function-ref name="isOutput" scoped="" ref="0x406836c8"/>
        <function-ref name="getResistor" scoped="" ref="0x406837a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40683888"/>
        <function-ref name="get" scoped="" ref="0x40683968"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40683a48"/>
        <function-ref name="getRaw" scoped="" ref="0x40683b28"/>
        <function-ref name="set" scoped="" ref="0x40683c08"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40683ce8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40683dc8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40683f28"/>
        <function-ref name="clr" scoped="" ref="0x40696018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x40672d88" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x40672d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40671010"/>
        <function-ref name="isInput" scoped="" ref="0x406710f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406711d0"/>
        <function-ref name="toggle" scoped="" ref="0x406712b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40671390"/>
        <function-ref name="getResistor" scoped="" ref="0x40671470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40671550"/>
        <function-ref name="get" scoped="" ref="0x40671630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40671710"/>
        <function-ref name="getRaw" scoped="" ref="0x406717f0"/>
        <function-ref name="set" scoped="" ref="0x406718d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406719b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40671a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40671bf0"/>
        <function-ref name="clr" scoped="" ref="0x40671cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x40698e58" loc="168:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x40698e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40697050"/>
        <function-ref name="isInput" scoped="" ref="0x40697130"/>
        <function-ref name="setResistor" scoped="" ref="0x40697210"/>
        <function-ref name="toggle" scoped="" ref="0x406972f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406973d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406974b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40697590"/>
        <function-ref name="get" scoped="" ref="0x40697670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40697750"/>
        <function-ref name="getRaw" scoped="" ref="0x40697830"/>
        <function-ref name="set" scoped="" ref="0x40697910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406979f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40697ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40697c30"/>
        <function-ref name="clr" scoped="" ref="0x40697d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x406a8290" loc="172:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x406a8290"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406a8468"/>
        <function-ref name="isInput" scoped="" ref="0x406a8548"/>
        <function-ref name="setResistor" scoped="" ref="0x406a8628"/>
        <function-ref name="toggle" scoped="" ref="0x406a8708"/>
        <function-ref name="isOutput" scoped="" ref="0x406a87e8"/>
        <function-ref name="getResistor" scoped="" ref="0x406a88c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x406a89a8"/>
        <function-ref name="get" scoped="" ref="0x406a8a88"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406a8b68"/>
        <function-ref name="getRaw" scoped="" ref="0x406a8c48"/>
        <function-ref name="set" scoped="" ref="0x406a8d28"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406a8e08"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406a8ee8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406a7090"/>
        <function-ref name="clr" scoped="" ref="0x406a7170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x40688868" loc="143:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x40688868"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40688c40"/>
        <function-ref name="isInput" scoped="" ref="0x40688d20"/>
        <function-ref name="setResistor" scoped="" ref="0x40688e00"/>
        <function-ref name="toggle" scoped="" ref="0x40688ee0"/>
        <function-ref name="isOutput" scoped="" ref="0x40687010"/>
        <function-ref name="getResistor" scoped="" ref="0x406870f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406871d0"/>
        <function-ref name="get" scoped="" ref="0x406872b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40687390"/>
        <function-ref name="getRaw" scoped="" ref="0x40687470"/>
        <function-ref name="set" scoped="" ref="0x40687550"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40687630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40687710"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40687870"/>
        <function-ref name="clr" scoped="" ref="0x40687950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406a5220" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406a5220"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406a53f8"/>
        <function-ref name="isInput" scoped="" ref="0x406a54d8"/>
        <function-ref name="setResistor" scoped="" ref="0x406a55b8"/>
        <function-ref name="toggle" scoped="" ref="0x406a5698"/>
        <function-ref name="isOutput" scoped="" ref="0x406a5778"/>
        <function-ref name="getResistor" scoped="" ref="0x406a5858"/>
        <function-ref name="makeOutput" scoped="" ref="0x406a5938"/>
        <function-ref name="get" scoped="" ref="0x406a5a18"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406a5af8"/>
        <function-ref name="getRaw" scoped="" ref="0x406a5bd8"/>
        <function-ref name="set" scoped="" ref="0x406a5cb8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406a5d98"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406a5e78"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406b6010"/>
        <function-ref name="clr" scoped="" ref="0x406b60f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406b5918" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406b5918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406b5af0"/>
        <function-ref name="isInput" scoped="" ref="0x406b5bd0"/>
        <function-ref name="setResistor" scoped="" ref="0x406b5cb0"/>
        <function-ref name="toggle" scoped="" ref="0x406b5d90"/>
        <function-ref name="isOutput" scoped="" ref="0x406b5e70"/>
        <function-ref name="getResistor" scoped="" ref="0x406c8010"/>
        <function-ref name="makeOutput" scoped="" ref="0x406c80f0"/>
        <function-ref name="get" scoped="" ref="0x406c81d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406c82b0"/>
        <function-ref name="getRaw" scoped="" ref="0x406c8390"/>
        <function-ref name="set" scoped="" ref="0x406c8470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406c8550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406c8630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406c8790"/>
        <function-ref name="clr" scoped="" ref="0x406c8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406c6140" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406c6140"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406c6318"/>
        <function-ref name="isInput" scoped="" ref="0x406c63f8"/>
        <function-ref name="setResistor" scoped="" ref="0x406c64d8"/>
        <function-ref name="toggle" scoped="" ref="0x406c65b8"/>
        <function-ref name="isOutput" scoped="" ref="0x406c6698"/>
        <function-ref name="getResistor" scoped="" ref="0x406c6778"/>
        <function-ref name="makeOutput" scoped="" ref="0x406c6858"/>
        <function-ref name="get" scoped="" ref="0x406c6938"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406c6a18"/>
        <function-ref name="getRaw" scoped="" ref="0x406c6af8"/>
        <function-ref name="set" scoped="" ref="0x406c6bd8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406c6cb8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406c6d98"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406c6ef8"/>
        <function-ref name="clr" scoped="" ref="0x406c5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406c48a0" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406c48a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406c4a78"/>
        <function-ref name="isInput" scoped="" ref="0x406c4b58"/>
        <function-ref name="setResistor" scoped="" ref="0x406c4c38"/>
        <function-ref name="toggle" scoped="" ref="0x406c4d18"/>
        <function-ref name="isOutput" scoped="" ref="0x406c4df8"/>
        <function-ref name="getResistor" scoped="" ref="0x406c4ed8"/>
        <function-ref name="makeOutput" scoped="" ref="0x406c3010"/>
        <function-ref name="get" scoped="" ref="0x406c30f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406c31d0"/>
        <function-ref name="getRaw" scoped="" ref="0x406c32b0"/>
        <function-ref name="set" scoped="" ref="0x406c3390"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406c3470"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406c3550"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406c36b0"/>
        <function-ref name="clr" scoped="" ref="0x406c3790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406c1010" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406c1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406c11e8"/>
        <function-ref name="isInput" scoped="" ref="0x406c12c8"/>
        <function-ref name="setResistor" scoped="" ref="0x406c13a8"/>
        <function-ref name="toggle" scoped="" ref="0x406c1488"/>
        <function-ref name="isOutput" scoped="" ref="0x406c1568"/>
        <function-ref name="getResistor" scoped="" ref="0x406c1648"/>
        <function-ref name="makeOutput" scoped="" ref="0x406c1728"/>
        <function-ref name="get" scoped="" ref="0x406c1808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406c18e8"/>
        <function-ref name="getRaw" scoped="" ref="0x406c19c8"/>
        <function-ref name="set" scoped="" ref="0x406c1aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406c1b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406c1c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406c1dc8"/>
        <function-ref name="clr" scoped="" ref="0x406c1ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406bf730" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406bf730"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406bf908"/>
        <function-ref name="isInput" scoped="" ref="0x406bf9e8"/>
        <function-ref name="setResistor" scoped="" ref="0x406bfac8"/>
        <function-ref name="toggle" scoped="" ref="0x406bfba8"/>
        <function-ref name="isOutput" scoped="" ref="0x406bfc88"/>
        <function-ref name="getResistor" scoped="" ref="0x406bfd68"/>
        <function-ref name="makeOutput" scoped="" ref="0x406bfe48"/>
        <function-ref name="get" scoped="" ref="0x406bff28"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406d2018"/>
        <function-ref name="getRaw" scoped="" ref="0x406d20f8"/>
        <function-ref name="set" scoped="" ref="0x406d21d8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406d22b8"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406d2398"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406d24f8"/>
        <function-ref name="clr" scoped="" ref="0x406d25d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406d1df8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406d1df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406d0010"/>
        <function-ref name="isInput" scoped="" ref="0x406d00f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406d01d0"/>
        <function-ref name="toggle" scoped="" ref="0x406d02b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406d0390"/>
        <function-ref name="getResistor" scoped="" ref="0x406d0470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406d0550"/>
        <function-ref name="get" scoped="" ref="0x406d0630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406d0710"/>
        <function-ref name="getRaw" scoped="" ref="0x406d07f0"/>
        <function-ref name="set" scoped="" ref="0x406d08d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406d09b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406d0a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406d0bf0"/>
        <function-ref name="clr" scoped="" ref="0x406d0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406ce5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406ce5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406ce7a0"/>
        <function-ref name="isInput" scoped="" ref="0x406ce880"/>
        <function-ref name="setResistor" scoped="" ref="0x406ce960"/>
        <function-ref name="toggle" scoped="" ref="0x406cea40"/>
        <function-ref name="isOutput" scoped="" ref="0x406ceb20"/>
        <function-ref name="getResistor" scoped="" ref="0x406cec00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406cece0"/>
        <function-ref name="get" scoped="" ref="0x406cedc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406ceea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406cd010"/>
        <function-ref name="set" scoped="" ref="0x406cd0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406cd1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406cd2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406cd410"/>
        <function-ref name="clr" scoped="" ref="0x406cd4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406ccd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406ccd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406ca010"/>
        <function-ref name="isInput" scoped="" ref="0x406ca0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406ca1d0"/>
        <function-ref name="toggle" scoped="" ref="0x406ca2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406ca390"/>
        <function-ref name="getResistor" scoped="" ref="0x406ca470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406ca550"/>
        <function-ref name="get" scoped="" ref="0x406ca630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406ca710"/>
        <function-ref name="getRaw" scoped="" ref="0x406ca7f0"/>
        <function-ref name="set" scoped="" ref="0x406ca8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406ca9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406caa90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406cabf0"/>
        <function-ref name="clr" scoped="" ref="0x406cacd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406dc5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406dc5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406dc7a0"/>
        <function-ref name="isInput" scoped="" ref="0x406dc880"/>
        <function-ref name="setResistor" scoped="" ref="0x406dc960"/>
        <function-ref name="toggle" scoped="" ref="0x406dca40"/>
        <function-ref name="isOutput" scoped="" ref="0x406dcb20"/>
        <function-ref name="getResistor" scoped="" ref="0x406dcc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406dcce0"/>
        <function-ref name="get" scoped="" ref="0x406dcdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406dcea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406db010"/>
        <function-ref name="set" scoped="" ref="0x406db0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406db1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406db2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406db410"/>
        <function-ref name="clr" scoped="" ref="0x406db4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406dad68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406dad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406d9010"/>
        <function-ref name="isInput" scoped="" ref="0x406d90f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406d91d0"/>
        <function-ref name="toggle" scoped="" ref="0x406d92b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406d9390"/>
        <function-ref name="getResistor" scoped="" ref="0x406d9470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406d9550"/>
        <function-ref name="get" scoped="" ref="0x406d9630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406d9710"/>
        <function-ref name="getRaw" scoped="" ref="0x406d97f0"/>
        <function-ref name="set" scoped="" ref="0x406d98d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406d99b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406d9a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406d9bf0"/>
        <function-ref name="clr" scoped="" ref="0x406d9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406d75c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406d75c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406d77a0"/>
        <function-ref name="isInput" scoped="" ref="0x406d7880"/>
        <function-ref name="setResistor" scoped="" ref="0x406d7960"/>
        <function-ref name="toggle" scoped="" ref="0x406d7a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406d7b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406d7c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406d7ce0"/>
        <function-ref name="get" scoped="" ref="0x406d7dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406d7ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406d6010"/>
        <function-ref name="set" scoped="" ref="0x406d60f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406d61d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406d62b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406d6410"/>
        <function-ref name="clr" scoped="" ref="0x406d64f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406d5de8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406d5de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406d4010"/>
        <function-ref name="isInput" scoped="" ref="0x406d40f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406d41d0"/>
        <function-ref name="toggle" scoped="" ref="0x406d42b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406d4390"/>
        <function-ref name="getResistor" scoped="" ref="0x406d4470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406d4550"/>
        <function-ref name="get" scoped="" ref="0x406d4630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406d4710"/>
        <function-ref name="getRaw" scoped="" ref="0x406d47f0"/>
        <function-ref name="set" scoped="" ref="0x406d48d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406d49b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406d4a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406d4bf0"/>
        <function-ref name="clr" scoped="" ref="0x406d4cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406e75c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406e75c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406e77a0"/>
        <function-ref name="isInput" scoped="" ref="0x406e7880"/>
        <function-ref name="setResistor" scoped="" ref="0x406e7960"/>
        <function-ref name="toggle" scoped="" ref="0x406e7a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406e7b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406e7c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406e7ce0"/>
        <function-ref name="get" scoped="" ref="0x406e7dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406e7ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406e6010"/>
        <function-ref name="set" scoped="" ref="0x406e60f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406e61d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406e62b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406e6410"/>
        <function-ref name="clr" scoped="" ref="0x406e64f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406e5d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406e5d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406e4010"/>
        <function-ref name="isInput" scoped="" ref="0x406e40f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406e41d0"/>
        <function-ref name="toggle" scoped="" ref="0x406e42b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406e4390"/>
        <function-ref name="getResistor" scoped="" ref="0x406e4470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406e4550"/>
        <function-ref name="get" scoped="" ref="0x406e4630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406e4710"/>
        <function-ref name="getRaw" scoped="" ref="0x406e47f0"/>
        <function-ref name="set" scoped="" ref="0x406e48d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406e49b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406e4a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406e4bf0"/>
        <function-ref name="clr" scoped="" ref="0x406e4cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406e25c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406e25c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406e27a0"/>
        <function-ref name="isInput" scoped="" ref="0x406e2880"/>
        <function-ref name="setResistor" scoped="" ref="0x406e2960"/>
        <function-ref name="toggle" scoped="" ref="0x406e2a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406e2b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406e2c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406e2ce0"/>
        <function-ref name="get" scoped="" ref="0x406e2dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406e2ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406e1010"/>
        <function-ref name="set" scoped="" ref="0x406e10f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406e11d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406e12b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406e1410"/>
        <function-ref name="clr" scoped="" ref="0x406e14f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406e0d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406e0d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406df010"/>
        <function-ref name="isInput" scoped="" ref="0x406df0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406df1d0"/>
        <function-ref name="toggle" scoped="" ref="0x406df2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406df390"/>
        <function-ref name="getResistor" scoped="" ref="0x406df470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406df550"/>
        <function-ref name="get" scoped="" ref="0x406df630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406df710"/>
        <function-ref name="getRaw" scoped="" ref="0x406df7f0"/>
        <function-ref name="set" scoped="" ref="0x406df8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406df9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406dfa90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406dfbf0"/>
        <function-ref name="clr" scoped="" ref="0x406dfcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406dd5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406dd5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406dd7a0"/>
        <function-ref name="isInput" scoped="" ref="0x406dd880"/>
        <function-ref name="setResistor" scoped="" ref="0x406dd960"/>
        <function-ref name="toggle" scoped="" ref="0x406dda40"/>
        <function-ref name="isOutput" scoped="" ref="0x406ddb20"/>
        <function-ref name="getResistor" scoped="" ref="0x406ddc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406ddce0"/>
        <function-ref name="get" scoped="" ref="0x406dddc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406ddea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406f2010"/>
        <function-ref name="set" scoped="" ref="0x406f20f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406f21d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406f22b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406f2410"/>
        <function-ref name="clr" scoped="" ref="0x406f24f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406f1d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406f1d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406f0010"/>
        <function-ref name="isInput" scoped="" ref="0x406f00f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406f01d0"/>
        <function-ref name="toggle" scoped="" ref="0x406f02b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406f0390"/>
        <function-ref name="getResistor" scoped="" ref="0x406f0470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406f0550"/>
        <function-ref name="get" scoped="" ref="0x406f0630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406f0710"/>
        <function-ref name="getRaw" scoped="" ref="0x406f07f0"/>
        <function-ref name="set" scoped="" ref="0x406f08d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406f09b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406f0a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406f0bf0"/>
        <function-ref name="clr" scoped="" ref="0x406f0cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406ee5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406ee5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406ee7a0"/>
        <function-ref name="isInput" scoped="" ref="0x406ee880"/>
        <function-ref name="setResistor" scoped="" ref="0x406ee960"/>
        <function-ref name="toggle" scoped="" ref="0x406eea40"/>
        <function-ref name="isOutput" scoped="" ref="0x406eeb20"/>
        <function-ref name="getResistor" scoped="" ref="0x406eec00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406eece0"/>
        <function-ref name="get" scoped="" ref="0x406eedc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406eeea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406ed010"/>
        <function-ref name="set" scoped="" ref="0x406ed0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406ed1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406ed2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406ed410"/>
        <function-ref name="clr" scoped="" ref="0x406ed4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406ecd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406ecd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406eb010"/>
        <function-ref name="isInput" scoped="" ref="0x406eb0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406eb1d0"/>
        <function-ref name="toggle" scoped="" ref="0x406eb2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406eb390"/>
        <function-ref name="getResistor" scoped="" ref="0x406eb470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406eb550"/>
        <function-ref name="get" scoped="" ref="0x406eb630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406eb710"/>
        <function-ref name="getRaw" scoped="" ref="0x406eb7f0"/>
        <function-ref name="set" scoped="" ref="0x406eb8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406eb9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406eba90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406ebbf0"/>
        <function-ref name="clr" scoped="" ref="0x406ebcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406e95c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406e95c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406e97a0"/>
        <function-ref name="isInput" scoped="" ref="0x406e9880"/>
        <function-ref name="setResistor" scoped="" ref="0x406e9960"/>
        <function-ref name="toggle" scoped="" ref="0x406e9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406e9b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406e9c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406e9ce0"/>
        <function-ref name="get" scoped="" ref="0x406e9dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406e9ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406fd010"/>
        <function-ref name="set" scoped="" ref="0x406fd0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406fd1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406fd2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406fd410"/>
        <function-ref name="clr" scoped="" ref="0x406fd4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406fcd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406fcd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406fb010"/>
        <function-ref name="isInput" scoped="" ref="0x406fb0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x406fb1d0"/>
        <function-ref name="toggle" scoped="" ref="0x406fb2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x406fb390"/>
        <function-ref name="getResistor" scoped="" ref="0x406fb470"/>
        <function-ref name="makeOutput" scoped="" ref="0x406fb550"/>
        <function-ref name="get" scoped="" ref="0x406fb630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406fb710"/>
        <function-ref name="getRaw" scoped="" ref="0x406fb7f0"/>
        <function-ref name="set" scoped="" ref="0x406fb8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406fb9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406fba90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406fbbf0"/>
        <function-ref name="clr" scoped="" ref="0x406fbcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406f95c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406f95c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406f97a0"/>
        <function-ref name="isInput" scoped="" ref="0x406f9880"/>
        <function-ref name="setResistor" scoped="" ref="0x406f9960"/>
        <function-ref name="toggle" scoped="" ref="0x406f9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406f9b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406f9c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406f9ce0"/>
        <function-ref name="get" scoped="" ref="0x406f9dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406f9ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406f8010"/>
        <function-ref name="set" scoped="" ref="0x406f80f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406f81d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406f82b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406f8410"/>
        <function-ref name="clr" scoped="" ref="0x406f84f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406f7e68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406f7e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406f6050"/>
        <function-ref name="isInput" scoped="" ref="0x406f6130"/>
        <function-ref name="setResistor" scoped="" ref="0x406f6210"/>
        <function-ref name="toggle" scoped="" ref="0x406f62f0"/>
        <function-ref name="isOutput" scoped="" ref="0x406f63d0"/>
        <function-ref name="getResistor" scoped="" ref="0x406f64b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x406f6590"/>
        <function-ref name="get" scoped="" ref="0x406f6670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406f6750"/>
        <function-ref name="getRaw" scoped="" ref="0x406f6830"/>
        <function-ref name="set" scoped="" ref="0x406f6910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406f69f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406f6ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406f6c30"/>
        <function-ref name="clr" scoped="" ref="0x406f6d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406f45c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406f45c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x406f47a0"/>
        <function-ref name="isInput" scoped="" ref="0x406f4880"/>
        <function-ref name="setResistor" scoped="" ref="0x406f4960"/>
        <function-ref name="toggle" scoped="" ref="0x406f4a40"/>
        <function-ref name="isOutput" scoped="" ref="0x406f4b20"/>
        <function-ref name="getResistor" scoped="" ref="0x406f4c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x406f4ce0"/>
        <function-ref name="get" scoped="" ref="0x406f4dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x406f4ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406f3010"/>
        <function-ref name="set" scoped="" ref="0x406f30f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406f31d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406f32b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406f3410"/>
        <function-ref name="clr" scoped="" ref="0x406f34f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40708d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40708d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40707010"/>
        <function-ref name="isInput" scoped="" ref="0x407070f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407071d0"/>
        <function-ref name="toggle" scoped="" ref="0x407072b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40707390"/>
        <function-ref name="getResistor" scoped="" ref="0x40707470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40707550"/>
        <function-ref name="get" scoped="" ref="0x40707630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40707710"/>
        <function-ref name="getRaw" scoped="" ref="0x407077f0"/>
        <function-ref name="set" scoped="" ref="0x407078d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407079b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40707a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40707bf0"/>
        <function-ref name="clr" scoped="" ref="0x40707cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407055c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407055c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407057a0"/>
        <function-ref name="isInput" scoped="" ref="0x40705880"/>
        <function-ref name="setResistor" scoped="" ref="0x40705960"/>
        <function-ref name="toggle" scoped="" ref="0x40705a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40705b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40705c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40705ce0"/>
        <function-ref name="get" scoped="" ref="0x40705dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40705ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40704010"/>
        <function-ref name="set" scoped="" ref="0x407040f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407041d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407042b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40704410"/>
        <function-ref name="clr" scoped="" ref="0x407044f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40703d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40703d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40702010"/>
        <function-ref name="isInput" scoped="" ref="0x407020f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407021d0"/>
        <function-ref name="toggle" scoped="" ref="0x407022b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40702390"/>
        <function-ref name="getResistor" scoped="" ref="0x40702470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40702550"/>
        <function-ref name="get" scoped="" ref="0x40702630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40702710"/>
        <function-ref name="getRaw" scoped="" ref="0x407027f0"/>
        <function-ref name="set" scoped="" ref="0x407028d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407029b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40702a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40702bf0"/>
        <function-ref name="clr" scoped="" ref="0x40702cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407005c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407005c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407007a0"/>
        <function-ref name="isInput" scoped="" ref="0x40700880"/>
        <function-ref name="setResistor" scoped="" ref="0x40700960"/>
        <function-ref name="toggle" scoped="" ref="0x40700a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40700b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40700c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40700ce0"/>
        <function-ref name="get" scoped="" ref="0x40700dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40700ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x406ff010"/>
        <function-ref name="set" scoped="" ref="0x406ff0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x406ff1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x406ff2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x406ff410"/>
        <function-ref name="clr" scoped="" ref="0x406ff4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x406fed68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x406fed68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40713010"/>
        <function-ref name="isInput" scoped="" ref="0x407130f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407131d0"/>
        <function-ref name="toggle" scoped="" ref="0x407132b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40713390"/>
        <function-ref name="getResistor" scoped="" ref="0x40713470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40713550"/>
        <function-ref name="get" scoped="" ref="0x40713630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40713710"/>
        <function-ref name="getRaw" scoped="" ref="0x407137f0"/>
        <function-ref name="set" scoped="" ref="0x407138d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407139b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40713a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40713bf0"/>
        <function-ref name="clr" scoped="" ref="0x40713cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407115c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407115c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407117a0"/>
        <function-ref name="isInput" scoped="" ref="0x40711880"/>
        <function-ref name="setResistor" scoped="" ref="0x40711960"/>
        <function-ref name="toggle" scoped="" ref="0x40711a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40711b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40711c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40711ce0"/>
        <function-ref name="get" scoped="" ref="0x40711dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40711ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40710010"/>
        <function-ref name="set" scoped="" ref="0x407100f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407101d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407102b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40710410"/>
        <function-ref name="clr" scoped="" ref="0x407104f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4070fd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4070fd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4070e010"/>
        <function-ref name="isInput" scoped="" ref="0x4070e0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4070e1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4070e2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4070e390"/>
        <function-ref name="getResistor" scoped="" ref="0x4070e470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4070e550"/>
        <function-ref name="get" scoped="" ref="0x4070e630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4070e710"/>
        <function-ref name="getRaw" scoped="" ref="0x4070e7f0"/>
        <function-ref name="set" scoped="" ref="0x4070e8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4070e9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4070ea90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4070ebf0"/>
        <function-ref name="clr" scoped="" ref="0x4070ecd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4070c5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4070c5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4070c7a0"/>
        <function-ref name="isInput" scoped="" ref="0x4070c880"/>
        <function-ref name="setResistor" scoped="" ref="0x4070c960"/>
        <function-ref name="toggle" scoped="" ref="0x4070ca40"/>
        <function-ref name="isOutput" scoped="" ref="0x4070cb20"/>
        <function-ref name="getResistor" scoped="" ref="0x4070cc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4070cce0"/>
        <function-ref name="get" scoped="" ref="0x4070cdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4070cea0"/>
        <function-ref name="getRaw" scoped="" ref="0x4070b010"/>
        <function-ref name="set" scoped="" ref="0x4070b0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4070b1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4070b2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4070b410"/>
        <function-ref name="clr" scoped="" ref="0x4070b4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4070ad68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4070ad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4071e010"/>
        <function-ref name="isInput" scoped="" ref="0x4071e0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4071e1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4071e2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4071e390"/>
        <function-ref name="getResistor" scoped="" ref="0x4071e470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4071e550"/>
        <function-ref name="get" scoped="" ref="0x4071e630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4071e710"/>
        <function-ref name="getRaw" scoped="" ref="0x4071e7f0"/>
        <function-ref name="set" scoped="" ref="0x4071e8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4071e9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4071ea90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4071ebf0"/>
        <function-ref name="clr" scoped="" ref="0x4071ecd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4071c5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4071c5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4071c7a0"/>
        <function-ref name="isInput" scoped="" ref="0x4071c880"/>
        <function-ref name="setResistor" scoped="" ref="0x4071c960"/>
        <function-ref name="toggle" scoped="" ref="0x4071ca40"/>
        <function-ref name="isOutput" scoped="" ref="0x4071cb20"/>
        <function-ref name="getResistor" scoped="" ref="0x4071cc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4071cce0"/>
        <function-ref name="get" scoped="" ref="0x4071cdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4071cea0"/>
        <function-ref name="getRaw" scoped="" ref="0x4071b010"/>
        <function-ref name="set" scoped="" ref="0x4071b0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4071b1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4071b2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4071b410"/>
        <function-ref name="clr" scoped="" ref="0x4071b4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4071ad68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4071ad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40719010"/>
        <function-ref name="isInput" scoped="" ref="0x407190f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407191d0"/>
        <function-ref name="toggle" scoped="" ref="0x407192b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40719390"/>
        <function-ref name="getResistor" scoped="" ref="0x40719470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40719550"/>
        <function-ref name="get" scoped="" ref="0x40719630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40719710"/>
        <function-ref name="getRaw" scoped="" ref="0x407197f0"/>
        <function-ref name="set" scoped="" ref="0x407198d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407199b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40719a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40719bf0"/>
        <function-ref name="clr" scoped="" ref="0x40719cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407175c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407175c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407177a0"/>
        <function-ref name="isInput" scoped="" ref="0x40717880"/>
        <function-ref name="setResistor" scoped="" ref="0x40717960"/>
        <function-ref name="toggle" scoped="" ref="0x40717a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40717b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40717c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40717ce0"/>
        <function-ref name="get" scoped="" ref="0x40717dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40717ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40716010"/>
        <function-ref name="set" scoped="" ref="0x407160f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407161d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407162b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40716410"/>
        <function-ref name="clr" scoped="" ref="0x407164f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40715d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40715d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40714010"/>
        <function-ref name="isInput" scoped="" ref="0x407140f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407141d0"/>
        <function-ref name="toggle" scoped="" ref="0x407142b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40714390"/>
        <function-ref name="getResistor" scoped="" ref="0x40714470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40714550"/>
        <function-ref name="get" scoped="" ref="0x40714630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40714710"/>
        <function-ref name="getRaw" scoped="" ref="0x407147f0"/>
        <function-ref name="set" scoped="" ref="0x407148d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407149b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40714a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40714bf0"/>
        <function-ref name="clr" scoped="" ref="0x40714cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407285c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407285c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407287a0"/>
        <function-ref name="isInput" scoped="" ref="0x40728880"/>
        <function-ref name="setResistor" scoped="" ref="0x40728960"/>
        <function-ref name="toggle" scoped="" ref="0x40728a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40728b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40728c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40728ce0"/>
        <function-ref name="get" scoped="" ref="0x40728dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40728ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40727010"/>
        <function-ref name="set" scoped="" ref="0x407270f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407271d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407272b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40727410"/>
        <function-ref name="clr" scoped="" ref="0x407274f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40726d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40726d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40725010"/>
        <function-ref name="isInput" scoped="" ref="0x407250f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407251d0"/>
        <function-ref name="toggle" scoped="" ref="0x407252b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40725390"/>
        <function-ref name="getResistor" scoped="" ref="0x40725470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40725550"/>
        <function-ref name="get" scoped="" ref="0x40725630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40725710"/>
        <function-ref name="getRaw" scoped="" ref="0x407257f0"/>
        <function-ref name="set" scoped="" ref="0x407258d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407259b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40725a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40725bf0"/>
        <function-ref name="clr" scoped="" ref="0x40725cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407235c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407235c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407237a0"/>
        <function-ref name="isInput" scoped="" ref="0x40723880"/>
        <function-ref name="setResistor" scoped="" ref="0x40723960"/>
        <function-ref name="toggle" scoped="" ref="0x40723a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40723b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40723c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40723ce0"/>
        <function-ref name="get" scoped="" ref="0x40723dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40723ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40722010"/>
        <function-ref name="set" scoped="" ref="0x407220f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407221d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407222b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40722410"/>
        <function-ref name="clr" scoped="" ref="0x407224f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40721d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40721d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40720010"/>
        <function-ref name="isInput" scoped="" ref="0x407200f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407201d0"/>
        <function-ref name="toggle" scoped="" ref="0x407202b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40720390"/>
        <function-ref name="getResistor" scoped="" ref="0x40720470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40720550"/>
        <function-ref name="get" scoped="" ref="0x40720630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40720710"/>
        <function-ref name="getRaw" scoped="" ref="0x407207f0"/>
        <function-ref name="set" scoped="" ref="0x407208d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407209b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40720a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40720bf0"/>
        <function-ref name="clr" scoped="" ref="0x40720cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407345c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x407345c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407347a0"/>
        <function-ref name="isInput" scoped="" ref="0x40734880"/>
        <function-ref name="setResistor" scoped="" ref="0x40734960"/>
        <function-ref name="toggle" scoped="" ref="0x40734a40"/>
        <function-ref name="isOutput" scoped="" ref="0x40734b20"/>
        <function-ref name="getResistor" scoped="" ref="0x40734c00"/>
        <function-ref name="makeOutput" scoped="" ref="0x40734ce0"/>
        <function-ref name="get" scoped="" ref="0x40734dc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40734ea0"/>
        <function-ref name="getRaw" scoped="" ref="0x40733010"/>
        <function-ref name="set" scoped="" ref="0x407330f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407331d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x407332b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40733410"/>
        <function-ref name="clr" scoped="" ref="0x407334f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40732d68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x40732d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40731010"/>
        <function-ref name="isInput" scoped="" ref="0x407310f0"/>
        <function-ref name="setResistor" scoped="" ref="0x407311d0"/>
        <function-ref name="toggle" scoped="" ref="0x407312b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40731390"/>
        <function-ref name="getResistor" scoped="" ref="0x40731470"/>
        <function-ref name="makeOutput" scoped="" ref="0x40731550"/>
        <function-ref name="get" scoped="" ref="0x40731630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40731710"/>
        <function-ref name="getRaw" scoped="" ref="0x407317f0"/>
        <function-ref name="set" scoped="" ref="0x407318d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x407319b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40731a90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40731bf0"/>
        <function-ref name="clr" scoped="" ref="0x40731cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4072f5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4072f5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4072f7a0"/>
        <function-ref name="isInput" scoped="" ref="0x4072f880"/>
        <function-ref name="setResistor" scoped="" ref="0x4072f960"/>
        <function-ref name="toggle" scoped="" ref="0x4072fa40"/>
        <function-ref name="isOutput" scoped="" ref="0x4072fb20"/>
        <function-ref name="getResistor" scoped="" ref="0x4072fc00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4072fce0"/>
        <function-ref name="get" scoped="" ref="0x4072fdc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4072fea0"/>
        <function-ref name="getRaw" scoped="" ref="0x4072e010"/>
        <function-ref name="set" scoped="" ref="0x4072e0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4072e1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4072e2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4072e410"/>
        <function-ref name="clr" scoped="" ref="0x4072e4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4072dd68" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4072dd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4072c010"/>
        <function-ref name="isInput" scoped="" ref="0x4072c0f0"/>
        <function-ref name="setResistor" scoped="" ref="0x4072c1d0"/>
        <function-ref name="toggle" scoped="" ref="0x4072c2b0"/>
        <function-ref name="isOutput" scoped="" ref="0x4072c390"/>
        <function-ref name="getResistor" scoped="" ref="0x4072c470"/>
        <function-ref name="makeOutput" scoped="" ref="0x4072c550"/>
        <function-ref name="get" scoped="" ref="0x4072c630"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4072c710"/>
        <function-ref name="getRaw" scoped="" ref="0x4072c7f0"/>
        <function-ref name="set" scoped="" ref="0x4072c8d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4072c9b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4072ca90"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4072cbf0"/>
        <function-ref name="clr" scoped="" ref="0x4072ccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4072a5c8" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x4072a5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4072a7a0"/>
        <function-ref name="isInput" scoped="" ref="0x4072a880"/>
        <function-ref name="setResistor" scoped="" ref="0x4072a960"/>
        <function-ref name="toggle" scoped="" ref="0x4072aa40"/>
        <function-ref name="isOutput" scoped="" ref="0x4072ab20"/>
        <function-ref name="getResistor" scoped="" ref="0x4072ac00"/>
        <function-ref name="makeOutput" scoped="" ref="0x4072ace0"/>
        <function-ref name="get" scoped="" ref="0x4072adc0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4072aea0"/>
        <function-ref name="getRaw" scoped="" ref="0x4073e010"/>
        <function-ref name="set" scoped="" ref="0x4073e0f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4073e1d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4073e2b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4073e410"/>
        <function-ref name="clr" scoped="" ref="0x4073e4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4073b010" loc="42:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4073b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4073b1e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x40738218" loc="6:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x40738218"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407383f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4073b9c0" loc="4:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4073b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4073bb98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x4073bdd0" loc="5:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x4073bdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40738010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x407385f8" loc="7:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x407385f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407387d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40735010" loc="2:../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40735010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407351e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x40754bf8" loc="39:../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x40754bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40754dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x4074db10" loc="40:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x4074db10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x40750390"/>
        <function-ref name="initTimerB" scoped="" ref="0x4074ddc8"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x4074dea8"/>
        <function-ref name="initTimerA" scoped="" ref="0x40750010"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x4074dce8"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x407500f0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x407501d0"/>
        <function-ref name="initClocks" scoped="" ref="0x407502b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40753478" loc="39:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40753478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40753650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x4075bc08" loc="46:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x4075bc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x4075a470"/>
        <function-ref name="initTimerB" scoped="" ref="0x4075bec0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x4075a010"/>
        <function-ref name="initTimerA" scoped="" ref="0x4075a0f0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x4075bde0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x4075a1d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x4075a2b0"/>
        <function-ref name="initClocks" scoped="" ref="0x4075a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x4075a678" loc="47:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x4075a678"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4075a850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4075b838" loc="45:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4075b838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4075ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x40785548" loc="42:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x40785548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40785720"/>
        <function-ref name="getControl" scoped="" ref="0x40785800"/>
        <function-ref name="enableEvents" scoped="" ref="0x407858e0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407859c0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40785aa0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40785b80"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40785c60"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40785d40"/>
        <function-ref name="setControl" scoped="" ref="0x40785e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x4078a2a8" loc="51:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x4078a2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4078a480"/>
        <function-ref name="getControl" scoped="" ref="0x4078a560"/>
        <function-ref name="enableEvents" scoped="" ref="0x4078a640"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4078a720"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4078a800"/>
        <function-ref name="disableEvents" scoped="" ref="0x4078a8e0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4078a9c0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4078aaa0"/>
        <function-ref name="setControl" scoped="" ref="0x4078ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x4078e358" loc="47:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x4078e358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4078e530"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4078e610"/>
        <function-ref name="captured" scoped="" ref="0x4078e6f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4078e7d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4078e8b0"/>
        <function-ref name="setEdge" scoped="" ref="0x4078e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x40797788" loc="68:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x40797788"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40797960"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40797a40"/>
        <function-ref name="captured" scoped="" ref="0x40797b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40797c00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40797ce0"/>
        <function-ref name="setEdge" scoped="" ref="0x40797dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x4077a518" loc="44:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x4077a518"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4077a6f0"/>
        <function-ref name="setEvent" scoped="" ref="0x4077a7d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4077a8b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4077a990"/>
        <function-ref name="fired" scoped="" ref="0x4077aa70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x4079bbf8" loc="61:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x4079bbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079bdd0"/>
        <function-ref name="setEvent" scoped="" ref="0x4079beb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4079a010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4079a0f0"/>
        <function-ref name="fired" scoped="" ref="0x4079a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x40795278" loc="71:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x40795278"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40795450"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40795530"/>
        <function-ref name="captured" scoped="" ref="0x40795610"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407956f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407957d0"/>
        <function-ref name="setEdge" scoped="" ref="0x407958b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x407861c8" loc="55:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x407861c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407863a0"/>
        <function-ref name="getControl" scoped="" ref="0x40786480"/>
        <function-ref name="enableEvents" scoped="" ref="0x40786560"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40786640"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40786720"/>
        <function-ref name="disableEvents" scoped="" ref="0x40786800"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407868e0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407869c0"/>
        <function-ref name="setControl" scoped="" ref="0x40786aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x4077cd58" loc="40:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x4077cd58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4076e010"/>
        <function-ref name="getControl" scoped="" ref="0x4076e0f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4076e1d0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4076e2b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4076e390"/>
        <function-ref name="disableEvents" scoped="" ref="0x4076e470"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4076e550"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4076e630"/>
        <function-ref name="setControl" scoped="" ref="0x4076e710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x407985f8" loc="66:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x407985f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407987d0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407988b0"/>
        <function-ref name="captured" scoped="" ref="0x40798990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40798a70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40798b50"/>
        <function-ref name="setEdge" scoped="" ref="0x40798c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x4079cbf8" loc="59:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x4079cbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079cdd0"/>
        <function-ref name="setEvent" scoped="" ref="0x4079ceb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4079b010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4079b0f0"/>
        <function-ref name="fired" scoped="" ref="0x4079b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x4078ae18" loc="52:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x4078ae18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407890c0"/>
        <function-ref name="getControl" scoped="" ref="0x407891a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x40789280"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40789360"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40789440"/>
        <function-ref name="disableEvents" scoped="" ref="0x40789520"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40789600"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407896e0"/>
        <function-ref name="setControl" scoped="" ref="0x407897c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x4078ebf8" loc="48:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x4078ebf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4078edd0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4078eeb0"/>
        <function-ref name="captured" scoped="" ref="0x4078d010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4078d0f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4078d1d0"/>
        <function-ref name="setEdge" scoped="" ref="0x4078d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x40796090" loc="69:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x40796090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40796268"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40796348"/>
        <function-ref name="captured" scoped="" ref="0x40796428"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40796508"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407965e8"/>
        <function-ref name="setEdge" scoped="" ref="0x407966c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x40789a58" loc="53:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x40789a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40789c30"/>
        <function-ref name="getControl" scoped="" ref="0x40789d10"/>
        <function-ref name="enableEvents" scoped="" ref="0x40789df0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40789ed0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40788010"/>
        <function-ref name="disableEvents" scoped="" ref="0x407880f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407881d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407882b0"/>
        <function-ref name="setControl" scoped="" ref="0x40788390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x4077acd8" loc="45:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x4077acd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4077aeb0"/>
        <function-ref name="setEvent" scoped="" ref="0x40791010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407910f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407911d0"/>
        <function-ref name="fired" scoped="" ref="0x407912b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x407800e8" loc="39:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x407800e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407802c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x407803a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x40780480"/>
        <function-ref name="get" scoped="" ref="0x40780560"/>
        <function-ref name="disableEvents" scoped="" ref="0x40780640"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40780720"/>
        <function-ref name="getMode" scoped="" ref="0x40780800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407808e0"/>
        <function-ref name="overflow" scoped="" ref="0x407809c0"/>
        <function-ref name="setMode" scoped="" ref="0x40780aa0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40780b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x4079a438" loc="62:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x4079a438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079a610"/>
        <function-ref name="setEvent" scoped="" ref="0x4079a6f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4079a7d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4079a8b0"/>
        <function-ref name="fired" scoped="" ref="0x4079a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x4076e9a8" loc="41:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x4076e9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4076eb80"/>
        <function-ref name="getControl" scoped="" ref="0x4076ec60"/>
        <function-ref name="enableEvents" scoped="" ref="0x4076ed40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4076ee20"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4076ef00"/>
        <function-ref name="disableEvents" scoped="" ref="0x40785010"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407850f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407851d0"/>
        <function-ref name="setControl" scoped="" ref="0x407852b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x40786d38" loc="56:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x40786d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40786f10"/>
        <function-ref name="getControl" scoped="" ref="0x4079d010"/>
        <function-ref name="enableEvents" scoped="" ref="0x4079d0f0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4079d1d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4079d2b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x4079d390"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4079d470"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4079d550"/>
        <function-ref name="setControl" scoped="" ref="0x4079d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x4078ba58" loc="46:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x4078ba58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4078bc30"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4078bd10"/>
        <function-ref name="captured" scoped="" ref="0x4078bdf0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4078bed0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4078e010"/>
        <function-ref name="setEdge" scoped="" ref="0x4078e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x40798e98" loc="67:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x40798e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407970c0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407971a0"/>
        <function-ref name="captured" scoped="" ref="0x40797280"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40797360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40797440"/>
        <function-ref name="setEdge" scoped="" ref="0x40797520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x40790ca8" loc="43:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x40790ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40790e80"/>
        <function-ref name="setEvent" scoped="" ref="0x4077a010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4077a0f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4077a1d0"/>
        <function-ref name="fired" scoped="" ref="0x4077a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x4079b438" loc="60:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x4079b438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079b610"/>
        <function-ref name="setEvent" scoped="" ref="0x4079b6f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4079b7d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4079b8b0"/>
        <function-ref name="fired" scoped="" ref="0x4079b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x40796930" loc="70:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x40796930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40796b08"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40796be8"/>
        <function-ref name="captured" scoped="" ref="0x40796cc8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40796da8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40796e88"/>
        <function-ref name="setEdge" scoped="" ref="0x40795010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x40788628" loc="54:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x40788628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40788800"/>
        <function-ref name="getControl" scoped="" ref="0x407888e0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407889c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40788aa0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40788b80"/>
        <function-ref name="disableEvents" scoped="" ref="0x40788c60"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40788d40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40788e20"/>
        <function-ref name="setControl" scoped="" ref="0x40788f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x4078d4e0" loc="50:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x4078d4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4078d6b8"/>
        <function-ref name="setClockSource" scoped="" ref="0x4078d798"/>
        <function-ref name="enableEvents" scoped="" ref="0x4078d878"/>
        <function-ref name="get" scoped="" ref="0x4078d958"/>
        <function-ref name="disableEvents" scoped="" ref="0x4078da38"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4078db18"/>
        <function-ref name="getMode" scoped="" ref="0x4078dbf8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4078dcd8"/>
        <function-ref name="overflow" scoped="" ref="0x4078ddb8"/>
        <function-ref name="setMode" scoped="" ref="0x4078de98"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4078a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x4079abf8" loc="63:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x4079abf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079add0"/>
        <function-ref name="setEvent" scoped="" ref="0x4079aeb0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40799010"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407990f0"/>
        <function-ref name="fired" scoped="" ref="0x407991d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x40799cf8" loc="65:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x40799cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40799ed0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40798010"/>
        <function-ref name="captured" scoped="" ref="0x407980f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407981d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407982b0"/>
        <function-ref name="setEdge" scoped="" ref="0x40798390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x40799438" loc="64:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x40799438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40799710"/>
        <function-ref name="setEvent" scoped="" ref="0x407997f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407998d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407999b0"/>
        <function-ref name="fired" scoped="" ref="0x40799a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x4079c438" loc="58:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x4079c438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4079c610"/>
        <function-ref name="setEvent" scoped="" ref="0x4079c6f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4079c7d0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4079c8b0"/>
        <function-ref name="fired" scoped="" ref="0x4079c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x4079d8c8" loc="57:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x4079d8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4079daa0"/>
        <function-ref name="getControl" scoped="" ref="0x4079db80"/>
        <function-ref name="enableEvents" scoped="" ref="0x4079dc60"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4079dd40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4079de20"/>
        <function-ref name="disableEvents" scoped="" ref="0x4079df00"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4079c010"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4079c0f0"/>
        <function-ref name="setControl" scoped="" ref="0x4079c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x407be200" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x407be200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407be3d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x40792e90" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x40792e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407be080"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x407be558" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x407be558"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407be730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x40792b28" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x40792b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40792d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40793e58" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40793e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40792050"/>
        <function-ref name="setClockSource" scoped="" ref="0x40792130"/>
        <function-ref name="enableEvents" scoped="" ref="0x40792210"/>
        <function-ref name="get" scoped="" ref="0x407922f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407923d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407924b0"/>
        <function-ref name="getMode" scoped="" ref="0x40792590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40792670"/>
        <function-ref name="overflow" scoped="" ref="0x40792750"/>
        <function-ref name="setMode" scoped="" ref="0x40792830"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40792910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x407bac68" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x407bac68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407bae40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x407ba910" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x407ba910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407baae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x407b9010" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x407b9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407b91e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x407ba5a8" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407ba5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407ba790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x407bb838" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407bb838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407bba10"/>
        <function-ref name="setClockSource" scoped="" ref="0x407bbaf0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407bbbd0"/>
        <function-ref name="get" scoped="" ref="0x407bbcb0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407bbd90"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407bbe70"/>
        <function-ref name="getMode" scoped="" ref="0x407ba010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407ba0f0"/>
        <function-ref name="overflow" scoped="" ref="0x407ba1d0"/>
        <function-ref name="setMode" scoped="" ref="0x407ba2b0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407ba390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407b7be8" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407b7be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b7dc0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407b7ea0"/>
        <function-ref name="captured" scoped="" ref="0x407f2010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407f20f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407f21d0"/>
        <function-ref name="setEdge" scoped="" ref="0x407f22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407b8a10" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407b8a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407b8be8"/>
        <function-ref name="getControl" scoped="" ref="0x407b8cc8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407b8da8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407b8e88"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407b7010"/>
        <function-ref name="disableEvents" scoped="" ref="0x407b70f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407b71d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407b72b0"/>
        <function-ref name="setControl" scoped="" ref="0x407b7390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407f1080" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407f1080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407f1258"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407b7510" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407b7510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407b76e8"/>
        <function-ref name="setEvent" scoped="" ref="0x407b77c8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407b78a8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407b7988"/>
        <function-ref name="fired" scoped="" ref="0x407b7a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407f2430" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407f2430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407f2608"/>
        <function-ref name="setClockSource" scoped="" ref="0x407f26e8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407f27c8"/>
        <function-ref name="get" scoped="" ref="0x407f28a8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407f2988"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407f2a68"/>
        <function-ref name="getMode" scoped="" ref="0x407f2b48"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407f2c28"/>
        <function-ref name="overflow" scoped="" ref="0x407f2d08"/>
        <function-ref name="setMode" scoped="" ref="0x407f2de8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407f2ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407efb08" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407efb08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407efce0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407efdc0"/>
        <function-ref name="captured" scoped="" ref="0x407efea0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407ed010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407ed0f0"/>
        <function-ref name="setEdge" scoped="" ref="0x407ed1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407f08f8" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407f08f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407f0ad0"/>
        <function-ref name="getControl" scoped="" ref="0x407f0bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407f0c90"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407f0d70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407f0e50"/>
        <function-ref name="disableEvents" scoped="" ref="0x407ef010"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407ef0f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407ef1d0"/>
        <function-ref name="setControl" scoped="" ref="0x407ef2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407ec010" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407ec010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407ec1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407ef430" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407ef430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407ef608"/>
        <function-ref name="setEvent" scoped="" ref="0x407ef6e8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407ef7c8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407ef8a8"/>
        <function-ref name="fired" scoped="" ref="0x407ef988"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407ed350" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407ed350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407ed528"/>
        <function-ref name="setClockSource" scoped="" ref="0x407ed608"/>
        <function-ref name="enableEvents" scoped="" ref="0x407ed6e8"/>
        <function-ref name="get" scoped="" ref="0x407ed7c8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407ed8a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407ed988"/>
        <function-ref name="getMode" scoped="" ref="0x407eda68"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407edb48"/>
        <function-ref name="overflow" scoped="" ref="0x407edc28"/>
        <function-ref name="setMode" scoped="" ref="0x407edd08"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407edde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407eaa28" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407eaa28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407eac00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407eace0"/>
        <function-ref name="captured" scoped="" ref="0x407eadc0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407eaea0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407e9010"/>
        <function-ref name="setEdge" scoped="" ref="0x407e90f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407eb870" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407eb870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407eba48"/>
        <function-ref name="getControl" scoped="" ref="0x407ebb28"/>
        <function-ref name="enableEvents" scoped="" ref="0x407ebc08"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407ebce8"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407ebdc8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407ebea8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407ea010"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407ea0f0"/>
        <function-ref name="setControl" scoped="" ref="0x407ea1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407e9e88" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407e9e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407e8070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407ea350" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407ea350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407ea528"/>
        <function-ref name="setEvent" scoped="" ref="0x407ea608"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407ea6e8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407ea7c8"/>
        <function-ref name="fired" scoped="" ref="0x407ea8a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407e9270" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407e9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407e9448"/>
        <function-ref name="setClockSource" scoped="" ref="0x407e9528"/>
        <function-ref name="enableEvents" scoped="" ref="0x407e9608"/>
        <function-ref name="get" scoped="" ref="0x407e96e8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407e97c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407e98a8"/>
        <function-ref name="getMode" scoped="" ref="0x407e9988"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407e9a68"/>
        <function-ref name="overflow" scoped="" ref="0x407e9b48"/>
        <function-ref name="setMode" scoped="" ref="0x407e9c28"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407e9d08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40800868" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x40800868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40800a40"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40800b20"/>
        <function-ref name="captured" scoped="" ref="0x40800c00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40800ce0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40800dc0"/>
        <function-ref name="setEdge" scoped="" ref="0x40800ea0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407e7700" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407e7700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407e78d8"/>
        <function-ref name="getControl" scoped="" ref="0x407e79b8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407e7a98"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407e7b78"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407e7c58"/>
        <function-ref name="disableEvents" scoped="" ref="0x407e7d38"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407e7e18"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407e7ef8"/>
        <function-ref name="setControl" scoped="" ref="0x40800010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407ffc68" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407ffc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407ffe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40800190" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x40800190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40800368"/>
        <function-ref name="setEvent" scoped="" ref="0x40800448"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40800528"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40800608"/>
        <function-ref name="fired" scoped="" ref="0x408006e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407ff050" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407ff050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407ff228"/>
        <function-ref name="setClockSource" scoped="" ref="0x407ff308"/>
        <function-ref name="enableEvents" scoped="" ref="0x407ff3e8"/>
        <function-ref name="get" scoped="" ref="0x407ff4c8"/>
        <function-ref name="disableEvents" scoped="" ref="0x407ff5a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407ff688"/>
        <function-ref name="getMode" scoped="" ref="0x407ff768"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407ff848"/>
        <function-ref name="overflow" scoped="" ref="0x407ff928"/>
        <function-ref name="setMode" scoped="" ref="0x407ffa08"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407ffae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407fc6e8" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407fc6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407fc8c0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407fc9a0"/>
        <function-ref name="captured" scoped="" ref="0x407fca80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407fcb60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407fcc40"/>
        <function-ref name="setEdge" scoped="" ref="0x407fcd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407fd588" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407fd588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407fd760"/>
        <function-ref name="getControl" scoped="" ref="0x407fd840"/>
        <function-ref name="enableEvents" scoped="" ref="0x407fd920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407fda00"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407fdae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407fdbc0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407fdca0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407fdd80"/>
        <function-ref name="setControl" scoped="" ref="0x407fde60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407fbb00" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407fbb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407fbcd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407fc010" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407fc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407fc1e8"/>
        <function-ref name="setEvent" scoped="" ref="0x407fc2c8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407fc3a8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407fc488"/>
        <function-ref name="fired" scoped="" ref="0x407fc568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407fcea0" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407fcea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407fb0c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x407fb1a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x407fb280"/>
        <function-ref name="get" scoped="" ref="0x407fb360"/>
        <function-ref name="disableEvents" scoped="" ref="0x407fb440"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407fb520"/>
        <function-ref name="getMode" scoped="" ref="0x407fb600"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407fb6e0"/>
        <function-ref name="overflow" scoped="" ref="0x407fb7c0"/>
        <function-ref name="setMode" scoped="" ref="0x407fb8a0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407fb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407f7570" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x407f7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407f7748"/>
        <function-ref name="setSynchronous" scoped="" ref="0x407f7828"/>
        <function-ref name="captured" scoped="" ref="0x407f7908"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407f79e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407f7ac8"/>
        <function-ref name="setEdge" scoped="" ref="0x407f7ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407f8430" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407f8430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407f8608"/>
        <function-ref name="getControl" scoped="" ref="0x407f86e8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407f87c8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407f88a8"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407f8988"/>
        <function-ref name="disableEvents" scoped="" ref="0x407f8a68"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407f8b48"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407f8c28"/>
        <function-ref name="setControl" scoped="" ref="0x407f8d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x407f6970" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x407f6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x407f6b48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407f8e88" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407f8e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407f7070"/>
        <function-ref name="setEvent" scoped="" ref="0x407f7150"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x407f7230"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x407f7310"/>
        <function-ref name="fired" scoped="" ref="0x407f73f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407f7d28" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x407f7d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x407f7f00"/>
        <function-ref name="setClockSource" scoped="" ref="0x407f6010"/>
        <function-ref name="enableEvents" scoped="" ref="0x407f60f0"/>
        <function-ref name="get" scoped="" ref="0x407f61d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x407f62b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407f6390"/>
        <function-ref name="getMode" scoped="" ref="0x407f6470"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407f6550"/>
        <function-ref name="overflow" scoped="" ref="0x407f6630"/>
        <function-ref name="setMode" scoped="" ref="0x407f6710"/>
        <function-ref name="setInputDivider" scoped="" ref="0x407f67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x4080d430" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x4080d430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4080d608"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4080d6e8"/>
        <function-ref name="captured" scoped="" ref="0x4080d7c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4080d8a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4080d988"/>
        <function-ref name="setEdge" scoped="" ref="0x4080da68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x407f4220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x407f4220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x407f43f8"/>
        <function-ref name="getControl" scoped="" ref="0x407f44d8"/>
        <function-ref name="enableEvents" scoped="" ref="0x407f45b8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x407f4698"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x407f4778"/>
        <function-ref name="disableEvents" scoped="" ref="0x407f4858"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x407f4938"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x407f4a18"/>
        <function-ref name="setControl" scoped="" ref="0x407f4af8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x4080c890" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x4080c890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x4080ca68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407f4c78" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x407f4c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x407f4e50"/>
        <function-ref name="setEvent" scoped="" ref="0x4080d010"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4080d0f0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4080d1d0"/>
        <function-ref name="fired" scoped="" ref="0x4080d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x4080dbe8" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x4080dbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4080ddc0"/>
        <function-ref name="setClockSource" scoped="" ref="0x4080dea0"/>
        <function-ref name="enableEvents" scoped="" ref="0x4080c010"/>
        <function-ref name="get" scoped="" ref="0x4080c0f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x4080c1d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4080c2b0"/>
        <function-ref name="getMode" scoped="" ref="0x4080c390"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4080c470"/>
        <function-ref name="overflow" scoped="" ref="0x4080c550"/>
        <function-ref name="setMode" scoped="" ref="0x4080c630"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4080c710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40809270" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x40809270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40809448"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40809528"/>
        <function-ref name="captured" scoped="" ref="0x40809608"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408096e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408097c8"/>
        <function-ref name="setEdge" scoped="" ref="0x408098a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x4080a120" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x4080a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4080a2f8"/>
        <function-ref name="getControl" scoped="" ref="0x4080a3d8"/>
        <function-ref name="enableEvents" scoped="" ref="0x4080a4b8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4080a598"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4080a678"/>
        <function-ref name="disableEvents" scoped="" ref="0x4080a758"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4080a838"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4080a918"/>
        <function-ref name="setControl" scoped="" ref="0x4080a9f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x408086d0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x408086d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408088a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x4080ab78" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x4080ab78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4080ad50"/>
        <function-ref name="setEvent" scoped="" ref="0x4080ae30"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4080af10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40809010"/>
        <function-ref name="fired" scoped="" ref="0x408090f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40809a28" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40809a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40809c00"/>
        <function-ref name="setClockSource" scoped="" ref="0x40809ce0"/>
        <function-ref name="enableEvents" scoped="" ref="0x40809dc0"/>
        <function-ref name="get" scoped="" ref="0x40809ea0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40808010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408080f0"/>
        <function-ref name="getMode" scoped="" ref="0x408081d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408082b0"/>
        <function-ref name="overflow" scoped="" ref="0x40808390"/>
        <function-ref name="setMode" scoped="" ref="0x40808470"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40808550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40805190" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x40805190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40805368"/>
        <function-ref name="setSynchronous" scoped="" ref="0x40805448"/>
        <function-ref name="captured" scoped="" ref="0x40805528"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40805608"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408056e8"/>
        <function-ref name="setEdge" scoped="" ref="0x408057c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x40806010" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x40806010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x408061e8"/>
        <function-ref name="getControl" scoped="" ref="0x408062c8"/>
        <function-ref name="enableEvents" scoped="" ref="0x408063a8"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40806488"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40806568"/>
        <function-ref name="disableEvents" scoped="" ref="0x40806648"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40806728"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40806808"/>
        <function-ref name="setControl" scoped="" ref="0x408068e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x408035f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x408035f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408037c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40806a68" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x40806a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40806c40"/>
        <function-ref name="setEvent" scoped="" ref="0x40806d20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40806e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40806ee0"/>
        <function-ref name="fired" scoped="" ref="0x40805010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40805948" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40805948"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40805b20"/>
        <function-ref name="setClockSource" scoped="" ref="0x40805c00"/>
        <function-ref name="enableEvents" scoped="" ref="0x40805ce0"/>
        <function-ref name="get" scoped="" ref="0x40805dc0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40805ea0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40803010"/>
        <function-ref name="getMode" scoped="" ref="0x408030f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408031d0"/>
        <function-ref name="overflow" scoped="" ref="0x408032b0"/>
        <function-ref name="setMode" scoped="" ref="0x40803390"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40803470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x4081a010" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x4081a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4081a1e8"/>
        <function-ref name="setSynchronous" scoped="" ref="0x4081a2c8"/>
        <function-ref name="captured" scoped="" ref="0x4081a3a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4081a488"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4081a568"/>
        <function-ref name="setEdge" scoped="" ref="0x4081a648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x40802e68" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x40802e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40801050"/>
        <function-ref name="getControl" scoped="" ref="0x40801130"/>
        <function-ref name="enableEvents" scoped="" ref="0x40801210"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x408012f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x408013d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x408014b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40801590"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40801670"/>
        <function-ref name="setControl" scoped="" ref="0x40801750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x40819430" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x40819430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40819608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x408018d0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x408018d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40801aa8"/>
        <function-ref name="setEvent" scoped="" ref="0x40801b88"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40801c68"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40801d48"/>
        <function-ref name="fired" scoped="" ref="0x40801e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x4081a7c8" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x4081a7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4081a9a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x4081aa80"/>
        <function-ref name="enableEvents" scoped="" ref="0x4081ab60"/>
        <function-ref name="get" scoped="" ref="0x4081ac40"/>
        <function-ref name="disableEvents" scoped="" ref="0x4081ad20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4081ae00"/>
        <function-ref name="getMode" scoped="" ref="0x4081aee0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40819010"/>
        <function-ref name="overflow" scoped="" ref="0x408190f0"/>
        <function-ref name="setMode" scoped="" ref="0x408191d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x408192b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x40815748" loc="7:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x40815748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40815920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x40818980" loc="4:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x40818980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40818b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x40818e08" loc="5:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x40818e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40815010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x408152c0" loc="6:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x408152c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40815498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x405e38a8" loc="55:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x405e38a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x405e3a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x4035ea90" loc="51:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x4035ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x4035ec68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x40551780" loc="52:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x40551780"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40551958"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x40830010" loc="39:../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x40830010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x40830808"/>
        <function-ref name="initTimerB" scoped="" ref="0x408302c8"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x408303a8"/>
        <function-ref name="initTimerA" scoped="" ref="0x40830488"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x408301e8"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x40830568"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x40830648"/>
        <function-ref name="initClocks" scoped="" ref="0x40830728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x4085fcc0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x4085fcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085fe98"/>
        <function-ref name="isInput" scoped="" ref="0x4085d010"/>
        <function-ref name="setResistor" scoped="" ref="0x4085d0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4085d1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4085d2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4085d390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085d470"/>
        <function-ref name="get" scoped="" ref="0x4085d550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4085d630"/>
        <function-ref name="getRaw" scoped="" ref="0x4085d710"/>
        <function-ref name="set" scoped="" ref="0x4085d7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4085d8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4085d9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4085db10"/>
        <function-ref name="clr" scoped="" ref="0x4085dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x4085f348" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x4085f348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4085f520"/>
        <function-ref name="isInput" scoped="" ref="0x4085f600"/>
        <function-ref name="toggle" scoped="" ref="0x4085f6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x4085f7c0"/>
        <function-ref name="get" scoped="" ref="0x4085f8a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4085f980"/>
        <function-ref name="set" scoped="" ref="0x4085fa60"/>
        <function-ref name="clr" scoped="" ref="0x4085fb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x4086e510" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x4086e510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086e6e8"/>
        <function-ref name="isInput" scoped="" ref="0x4086e7c8"/>
        <function-ref name="setResistor" scoped="" ref="0x4086e8a8"/>
        <function-ref name="toggle" scoped="" ref="0x4086e988"/>
        <function-ref name="isOutput" scoped="" ref="0x4086ea68"/>
        <function-ref name="getResistor" scoped="" ref="0x4086eb48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086ec28"/>
        <function-ref name="get" scoped="" ref="0x4086ed08"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086ede8"/>
        <function-ref name="getRaw" scoped="" ref="0x4086eec8"/>
        <function-ref name="set" scoped="" ref="0x4086d010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086d0f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086d1d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086d330"/>
        <function-ref name="clr" scoped="" ref="0x4086d410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x4086fb50" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x4086fb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086fd28"/>
        <function-ref name="isInput" scoped="" ref="0x4086fe08"/>
        <function-ref name="toggle" scoped="" ref="0x4086fee8"/>
        <function-ref name="isOutput" scoped="" ref="0x4086e010"/>
        <function-ref name="get" scoped="" ref="0x4086e0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086e1d0"/>
        <function-ref name="set" scoped="" ref="0x4086e2b0"/>
        <function-ref name="clr" scoped="" ref="0x4086e390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x4086cd10" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x4086cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086cee8"/>
        <function-ref name="isInput" scoped="" ref="0x4086a010"/>
        <function-ref name="setResistor" scoped="" ref="0x4086a0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4086a1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4086a2b0"/>
        <function-ref name="getResistor" scoped="" ref="0x4086a390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086a470"/>
        <function-ref name="get" scoped="" ref="0x4086a550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x4086a630"/>
        <function-ref name="getRaw" scoped="" ref="0x4086a710"/>
        <function-ref name="set" scoped="" ref="0x4086a7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x4086a8d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x4086a9b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x4086ab10"/>
        <function-ref name="clr" scoped="" ref="0x4086abf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x4086c398" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x4086c398"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4086c570"/>
        <function-ref name="isInput" scoped="" ref="0x4086c650"/>
        <function-ref name="toggle" scoped="" ref="0x4086c730"/>
        <function-ref name="isOutput" scoped="" ref="0x4086c810"/>
        <function-ref name="get" scoped="" ref="0x4086c8f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4086c9d0"/>
        <function-ref name="set" scoped="" ref="0x4086cab0"/>
        <function-ref name="clr" scoped="" ref="0x4086cb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x40880e98" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x40880e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4087f0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40880a90" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x40880a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40880c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4087c8b8" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x4087c8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4087ca90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x4087fb20" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x4087fb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4087fcf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x4087c4b0" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x4087c4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4087c688"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x4087feb8" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x4087feb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4087c0c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x4087c1a0"/>
        <function-ref name="runNextTask" scoped="" ref="0x4087c280"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x4036ad58" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x4036ad58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4035f010"/>
        <function-ref name="runTask" scoped="" ref="0x4035f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x4035d5f0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x4035d5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4035d7c8"/>
        <function-ref name="taskLoop" scoped="" ref="0x4035d8a8"/>
        <function-ref name="runNextTask" scoped="" ref="0x4035d988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x405d1590" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x405d1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405d1768"/>
        <function-ref name="runTask" scoped="" ref="0x405d1848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x405cc210" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x405cc210"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x405cc3e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x405c2cd0" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x405c2cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405c2ea8"/>
        <function-ref name="taskLoop" scoped="" ref="0x405d1010"/>
        <function-ref name="runNextTask" scoped="" ref="0x405d10f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x40892260" loc="7:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x40892260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40892438"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LigarTimerC" ref="0x40887710" loc="10:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LigarTimerC" scoped="" ref="0x40887710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408a0248"/>
        <function-ref name="fired" scoped="" ref="0x408864e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40886bf0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40886998"/>
        <function-ref name="getdt" scoped="" ref="0x408a06f8"/>
        <function-ref name="gett0" scoped="" ref="0x408a04a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40886740"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40887d38"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40886f10"/>
        <function-ref name="startOneShot" scoped="" ref="0x40886010"/>
        <function-ref name="stop" scoped="" ref="0x40886290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read2" ref="0x40898458" loc="14:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read2" scoped="" ref="0x40898458"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40898a80"/>
        <function-ref name="readDone" scoped="" ref="0x40898cd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LigarTimerA" ref="0x40891010" loc="8:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LigarTimerA" scoped="" ref="0x40891010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40890b00"/>
        <function-ref name="fired" scoped="" ref="0x40891d90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408904c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40890268"/>
        <function-ref name="getdt" scoped="" ref="0x40889010"/>
        <function-ref name="gett0" scoped="" ref="0x40890d58"/>
        <function-ref name="isRunning" scoped="" ref="0x40890010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40891638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408907e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x408918b8"/>
        <function-ref name="stop" scoped="" ref="0x40891b38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read3" ref="0x40896180" loc="15:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read3" scoped="" ref="0x40896180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408967a8"/>
        <function-ref name="readDone" scoped="" ref="0x40896a00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4062b5f8" loc="6:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x4062b5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4062b7d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4062b8b0"/>
        <function-ref name="led1On" scoped="" ref="0x4062b990"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4062ba70"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4062bb50"/>
        <function-ref name="get" scoped="" ref="0x4062bc30"/>
        <function-ref name="led1Off" scoped="" ref="0x4062bd10"/>
        <function-ref name="led2Off" scoped="" ref="0x408920f0"/>
        <function-ref name="set" scoped="" ref="0x4062bdf0"/>
        <function-ref name="led0On" scoped="" ref="0x4062bed0"/>
        <function-ref name="led2On" scoped="" ref="0x40892010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LigarTimerHelloWorld" ref="0x408a0b00" loc="11:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LigarTimerHelloWorld" scoped="" ref="0x408a0b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4089e6a8"/>
        <function-ref name="fired" scoped="" ref="0x4089f938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4089e068"/>
        <function-ref name="isOneShot" scoped="" ref="0x4089fde8"/>
        <function-ref name="getdt" scoped="" ref="0x4089eb58"/>
        <function-ref name="gett0" scoped="" ref="0x4089e900"/>
        <function-ref name="isRunning" scoped="" ref="0x4089fb90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4089f1e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4089e388"/>
        <function-ref name="startOneShot" scoped="" ref="0x4089f460"/>
        <function-ref name="stop" scoped="" ref="0x4089f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LigarTimerB" ref="0x408893b8" loc="9:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LigarTimerB" scoped="" ref="0x408893b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40888e98"/>
        <function-ref name="fired" scoped="" ref="0x40888150"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40888858"/>
        <function-ref name="isOneShot" scoped="" ref="0x40888600"/>
        <function-ref name="getdt" scoped="" ref="0x40887368"/>
        <function-ref name="gett0" scoped="" ref="0x40887110"/>
        <function-ref name="isRunning" scoped="" ref="0x408883a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408899e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40888b78"/>
        <function-ref name="startOneShot" scoped="" ref="0x40889c60"/>
        <function-ref name="stop" scoped="" ref="0x40889ee0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LigarTimerSensor" ref="0x4089c010" loc="12:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LigarTimerSensor" scoped="" ref="0x4089c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4089bb00"/>
        <function-ref name="fired" scoped="" ref="0x4089cd90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4089b4c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x4089b268"/>
        <function-ref name="getdt" scoped="" ref="0x4089a010"/>
        <function-ref name="gett0" scoped="" ref="0x4089bd58"/>
        <function-ref name="isRunning" scoped="" ref="0x4089b010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4089c638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4089b7e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x4089c8b8"/>
        <function-ref name="stop" scoped="" ref="0x4089cb38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read1" ref="0x408976c8" loc="13:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read1" scoped="" ref="0x408976c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40897cf0"/>
        <function-ref name="readDone" scoped="" ref="0x40898010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read4" ref="0x40896e48" loc="16:BootLedsC.nc">
      <component-ref qname="BootLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read4" scoped="" ref="0x40896e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408954b8"/>
        <function-ref name="readDone" scoped="" ref="0x40895710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4087dcd8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BootLedsAppC.LigarTimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x4087dcd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408b08a8"/>
        <function-ref name="fired" scoped="" ref="0x408b5aa8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408b0268"/>
        <function-ref name="isOneShot" scoped="" ref="0x408b0010"/>
        <function-ref name="getdt" scoped="" ref="0x408b0d58"/>
        <function-ref name="gett0" scoped="" ref="0x408b0b00"/>
        <function-ref name="isRunning" scoped="" ref="0x408b5d00"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408b5350"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408b0588"/>
        <function-ref name="startOneShot" scoped="" ref="0x408b55d0"/>
        <function-ref name="stop" scoped="" ref="0x408b5850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x408af010" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x408af010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408cab00"/>
        <function-ref name="fired" scoped="" ref="0x408afd90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408ca4c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x408ca268"/>
        <function-ref name="getdt" scoped="" ref="0x408c8010"/>
        <function-ref name="gett0" scoped="" ref="0x408cad58"/>
        <function-ref name="isRunning" scoped="" ref="0x408ca010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408af638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408ca7e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x408af8b8"/>
        <function-ref name="stop" scoped="" ref="0x408afb38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x408c5100" loc="46:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x408c5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408c4be0"/>
        <function-ref name="fired" scoped="" ref="0x408c5e80"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408c45a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x408c4348"/>
        <function-ref name="getdt" scoped="" ref="0x408c20b8"/>
        <function-ref name="gett0" scoped="" ref="0x408c4e38"/>
        <function-ref name="isRunning" scoped="" ref="0x408c40f0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408c5728"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408c48c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x408c59a8"/>
        <function-ref name="stop" scoped="" ref="0x408c5c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x408c10d0" loc="47:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x408c10d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408c1718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408c88c8" loc="45:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x408c88c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408c8aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x408bf468" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x408bf468"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40945940"/>
        <function-ref name="fired" scoped="" ref="0x40945110"/>
        <function-ref name="startAt" scoped="" ref="0x40945600"/>
        <function-ref name="isRunning" scoped="" ref="0x40945388"/>
        <function-ref name="getAlarm" scoped="" ref="0x40945bb8"/>
        <function-ref name="start" scoped="" ref="0x408bfbb8"/>
        <function-ref name="stop" scoped="" ref="0x408bfe58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408bf010" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x408bf010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408bf1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x41315be0" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x41315be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x413130f8"/>
        <function-ref name="fired" scoped="" ref="0x41314898"/>
        <function-ref name="startAt" scoped="" ref="0x41314d88"/>
        <function-ref name="isRunning" scoped="" ref="0x41314b10"/>
        <function-ref name="getAlarm" scoped="" ref="0x41313370"/>
        <function-ref name="start" scoped="" ref="0x41314380"/>
        <function-ref name="stop" scoped="" ref="0x41314620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41315788" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x41315788"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41315960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x4134eac8" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x4134eac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x4134eca0"/>
        <function-ref name="setEvent" scoped="" ref="0x4134ed80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x4134ee60"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x4134d010"/>
        <function-ref name="fired" scoped="" ref="0x4134d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x4134f480" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x4134f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4134f658"/>
        <function-ref name="setClockSource" scoped="" ref="0x4134f738"/>
        <function-ref name="enableEvents" scoped="" ref="0x4134f818"/>
        <function-ref name="get" scoped="" ref="0x4134f8f8"/>
        <function-ref name="disableEvents" scoped="" ref="0x4134f9d8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4134fab8"/>
        <function-ref name="getMode" scoped="" ref="0x4134fb98"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4134fc78"/>
        <function-ref name="overflow" scoped="" ref="0x4134fd58"/>
        <function-ref name="setMode" scoped="" ref="0x4134fe38"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4134ff18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x4134e090" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x4134e090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x4134e268"/>
        <function-ref name="getControl" scoped="" ref="0x4134e348"/>
        <function-ref name="enableEvents" scoped="" ref="0x4134e428"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x4134e508"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x4134e5e8"/>
        <function-ref name="disableEvents" scoped="" ref="0x4134e6c8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x4134e7a8"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x4134e888"/>
        <function-ref name="setControl" scoped="" ref="0x4134e968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x408e2938" loc="52:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x408e2938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x408e2b10"/>
        <function-ref name="setEvent" scoped="" ref="0x408e2bf0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x408e2cd0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x408e2db0"/>
        <function-ref name="fired" scoped="" ref="0x408e2e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x408e7ac8" loc="50:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x408e7ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x408e7ca0"/>
        <function-ref name="setClockSource" scoped="" ref="0x408e7d80"/>
        <function-ref name="enableEvents" scoped="" ref="0x408e7e60"/>
        <function-ref name="get" scoped="" ref="0x408e4010"/>
        <function-ref name="disableEvents" scoped="" ref="0x408e40f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408e41d0"/>
        <function-ref name="getMode" scoped="" ref="0x408e42b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408e4390"/>
        <function-ref name="overflow" scoped="" ref="0x408e4470"/>
        <function-ref name="setMode" scoped="" ref="0x408e4550"/>
        <function-ref name="setInputDivider" scoped="" ref="0x408e4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x408e4b28" loc="51:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x408e4b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x408e4d00"/>
        <function-ref name="getControl" scoped="" ref="0x408e4de0"/>
        <function-ref name="enableEvents" scoped="" ref="0x408e4ec0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x408e2010"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x408e20f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x408e21d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x408e22b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x408e2390"/>
        <function-ref name="setControl" scoped="" ref="0x408e2470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x413484f0" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x413484f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x413486c8"/>
        <function-ref name="setEvent" scoped="" ref="0x413487a8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x41348888"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x41348968"/>
        <function-ref name="fired" scoped="" ref="0x41348a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x4134be48" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x4134be48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41349050"/>
        <function-ref name="setClockSource" scoped="" ref="0x41349130"/>
        <function-ref name="enableEvents" scoped="" ref="0x41349210"/>
        <function-ref name="get" scoped="" ref="0x413492f0"/>
        <function-ref name="disableEvents" scoped="" ref="0x413493d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x413494b0"/>
        <function-ref name="getMode" scoped="" ref="0x41349590"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x41349670"/>
        <function-ref name="overflow" scoped="" ref="0x41349750"/>
        <function-ref name="setMode" scoped="" ref="0x41349830"/>
        <function-ref name="setInputDivider" scoped="" ref="0x41349910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x4134c4d8" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x4134c4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4134b9a0"/>
        <function-ref name="fired" scoped="" ref="0x4134b170"/>
        <function-ref name="startAt" scoped="" ref="0x4134b660"/>
        <function-ref name="isRunning" scoped="" ref="0x4134b3e8"/>
        <function-ref name="getAlarm" scoped="" ref="0x4134bc18"/>
        <function-ref name="start" scoped="" ref="0x4134cc28"/>
        <function-ref name="stop" scoped="" ref="0x4134cec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4134c060" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x4134c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4134c238"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x41349a70" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x41349a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x41349c48"/>
        <function-ref name="getControl" scoped="" ref="0x41349d28"/>
        <function-ref name="enableEvents" scoped="" ref="0x41349e08"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x41349ee8"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x41348010"/>
        <function-ref name="disableEvents" scoped="" ref="0x413480f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x413481d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x413482b0"/>
        <function-ref name="setControl" scoped="" ref="0x41348390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40911088" loc="43:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40911088"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409117d8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40911cc8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40911a50"/>
        <function-ref name="overflow" scoped="" ref="0x40910010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x40910c10" loc="43:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x40910c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4090c380"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4090c870"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4090c5f8"/>
        <function-ref name="overflow" scoped="" ref="0x4090cae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x40908730" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x40908730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40908908"/>
        <function-ref name="setClockSource" scoped="" ref="0x409089e8"/>
        <function-ref name="enableEvents" scoped="" ref="0x40908ac8"/>
        <function-ref name="get" scoped="" ref="0x40908ba8"/>
        <function-ref name="disableEvents" scoped="" ref="0x40908c88"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40908d68"/>
        <function-ref name="getMode" scoped="" ref="0x40908e48"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40908f28"/>
        <function-ref name="overflow" scoped="" ref="0x4091e018"/>
        <function-ref name="setMode" scoped="" ref="0x4091e0f8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x4091e1d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40909578" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40909578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40909cc8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40908288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40908010"/>
        <function-ref name="overflow" scoped="" ref="0x40908500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x4091c5f8" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x4091c5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4091cd48"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4092a288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4092a010"/>
        <function-ref name="overflow" scoped="" ref="0x4092a500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4091d320" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x4091d320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4091da70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4091c010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4091dce8"/>
        <function-ref name="overflow" scoped="" ref="0x4091c288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x413126b8" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x413126b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x41311b80"/>
        <function-ref name="fired" scoped="" ref="0x41311350"/>
        <function-ref name="startAt" scoped="" ref="0x41311840"/>
        <function-ref name="isRunning" scoped="" ref="0x413115c8"/>
        <function-ref name="getAlarm" scoped="" ref="0x41311df8"/>
        <function-ref name="start" scoped="" ref="0x41312e08"/>
        <function-ref name="stop" scoped="" ref="0x413110d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x4130e3b8" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x4130e3b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4130d878"/>
        <function-ref name="fired" scoped="" ref="0x4130d048"/>
        <function-ref name="startAt" scoped="" ref="0x4130d538"/>
        <function-ref name="isRunning" scoped="" ref="0x4130d2c0"/>
        <function-ref name="getAlarm" scoped="" ref="0x4130daf0"/>
        <function-ref name="start" scoped="" ref="0x4130eb08"/>
        <function-ref name="stop" scoped="" ref="0x4130eda8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x4130f180" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x4130f180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4130f8d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4130fdc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4130fb48"/>
        <function-ref name="overflow" scoped="" ref="0x4130e048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x409679a8" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x409679a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40967b80"/>
        <function-ref name="runTask" scoped="" ref="0x40967c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40968010" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40968010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409674e0"/>
        <function-ref name="fired" scoped="" ref="0x40968c78"/>
        <function-ref name="startAt" scoped="" ref="0x409671a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40968ef0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40967758"/>
        <function-ref name="start" scoped="" ref="0x40968760"/>
        <function-ref name="stop" scoped="" ref="0x40968a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40943cb0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40943cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409697c0"/>
        <function-ref name="fired" scoped="" ref="0x4096aa40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40969180"/>
        <function-ref name="isOneShot" scoped="" ref="0x4096aef0"/>
        <function-ref name="getdt" scoped="" ref="0x40969c70"/>
        <function-ref name="gett0" scoped="" ref="0x40969a18"/>
        <function-ref name="isRunning" scoped="" ref="0x4096ac98"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4096a2e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409694a0"/>
        <function-ref name="startOneShot" scoped="" ref="0x4096a568"/>
        <function-ref name="stop" scoped="" ref="0x4096a7e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x40999560" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x40999560"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40999738"/>
        <function-ref name="runTask" scoped="" ref="0x40999818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x4099c338" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x4099c338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4099ae38"/>
        <function-ref name="fired" scoped="" ref="0x4099a0f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4099a7f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x4099a5a0"/>
        <function-ref name="getdt" scoped="" ref="0x40999310"/>
        <function-ref name="gett0" scoped="" ref="0x409990b8"/>
        <function-ref name="isRunning" scoped="" ref="0x4099a348"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4099c960"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4099ab18"/>
        <function-ref name="startOneShot" scoped="" ref="0x4099cbe0"/>
        <function-ref name="stop" scoped="" ref="0x4099ce60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40964f00" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40964f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4099db40"/>
        <function-ref name="fired" scoped="" ref="0x40963ce0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4099d4e0"/>
        <function-ref name="isOneShot" scoped="" ref="0x4099d278"/>
        <function-ref name="getdt" scoped="" ref="0x4099c048"/>
        <function-ref name="gett0" scoped="" ref="0x4099dda8"/>
        <function-ref name="isRunning" scoped="" ref="0x4099d010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40963558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4099d810"/>
        <function-ref name="startOneShot" scoped="" ref="0x409637e8"/>
        <function-ref name="stop" scoped="" ref="0x40963a78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40997940" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x40997940"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40996010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40996360" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40996360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40996ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40990010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40996d28"/>
        <function-ref name="overflow" scoped="" ref="0x40990288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409adc00" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BootLedsAppC.LigarTimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x409adc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409ab730"/>
        <function-ref name="fired" scoped="" ref="0x409ac9b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409ab0f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x409ace60"/>
        <function-ref name="getdt" scoped="" ref="0x409abbe0"/>
        <function-ref name="gett0" scoped="" ref="0x409ab988"/>
        <function-ref name="isRunning" scoped="" ref="0x409acc08"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409ac258"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409ab410"/>
        <function-ref name="startOneShot" scoped="" ref="0x409ac4d8"/>
        <function-ref name="stop" scoped="" ref="0x409ac758"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409aaab8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BootLedsAppC.LigarTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x409aaab8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409a7650"/>
        <function-ref name="fired" scoped="" ref="0x409a9858"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409a7010"/>
        <function-ref name="isOneShot" scoped="" ref="0x409a9d08"/>
        <function-ref name="getdt" scoped="" ref="0x409a7b00"/>
        <function-ref name="gett0" scoped="" ref="0x409a78a8"/>
        <function-ref name="isRunning" scoped="" ref="0x409a9ab0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409a9100"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409a7330"/>
        <function-ref name="startOneShot" scoped="" ref="0x409a9380"/>
        <function-ref name="stop" scoped="" ref="0x409a9600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409a6958" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BootLedsAppC.LigarTimerHelloWorld"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x409a6958"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409a44c8"/>
        <function-ref name="fired" scoped="" ref="0x409a5768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409a5e70"/>
        <function-ref name="isOneShot" scoped="" ref="0x409a5c18"/>
        <function-ref name="getdt" scoped="" ref="0x409a4978"/>
        <function-ref name="gett0" scoped="" ref="0x409a4720"/>
        <function-ref name="isRunning" scoped="" ref="0x409a59c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409a5010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409a41a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x409a5290"/>
        <function-ref name="stop" scoped="" ref="0x409a5510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409a27a8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BootLedsAppC.LigarTimerSensor"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x409a27a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409a0330"/>
        <function-ref name="fired" scoped="" ref="0x409a1540"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409a1c48"/>
        <function-ref name="isOneShot" scoped="" ref="0x409a19f0"/>
        <function-ref name="getdt" scoped="" ref="0x409a07e0"/>
        <function-ref name="gett0" scoped="" ref="0x409a0588"/>
        <function-ref name="isRunning" scoped="" ref="0x409a1798"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409a2dd0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409a0010"/>
        <function-ref name="startOneShot" scoped="" ref="0x409a1068"/>
        <function-ref name="stop" scoped="" ref="0x409a12e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x409bf9f0" loc="39:../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x409bf9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x409bfbc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x409b7f20" loc="40:../../tos/lib/serial/SerialStartP.nc">
      <component-ref qname="SerialStartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x409b7f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x409ba110"/>
        <function-ref name="stopDone" scoped="" ref="0x409ba1f0"/>
        <function-ref name="start" scoped="" ref="0x409ba2d0"/>
        <function-ref name="stop" scoped="" ref="0x409ba3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x409b40e0" loc="46:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x409b40e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x409b42b8"/>
        <function-ref name="stopDone" scoped="" ref="0x409b4398"/>
        <function-ref name="start" scoped="" ref="0x409b4478"/>
        <function-ref name="stop" scoped="" ref="0x409b4558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x409ccac0" loc="47:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x409ccac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x409ccc98"/>
        <function-ref name="getPayload" scoped="" ref="0x409ccd78"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409cce58"/>
        <function-ref name="cancel" scoped="" ref="0x409b2010"/>
        <function-ref name="sendDone" scoped="" ref="0x409b20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x409c8010" loc="49:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x409c8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x409c81e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x409c82c8"/>
        <function-ref name="getPayload" scoped="" ref="0x409c83a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409c8488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x409c8568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x409b1100" loc="48:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x409b1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x409b12d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x409c2548" loc="53:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x409c2548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x409c2720"/>
        <function-ref name="led0Toggle" scoped="" ref="0x409c2800"/>
        <function-ref name="led1On" scoped="" ref="0x409c28e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x409c29c0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x409c2aa0"/>
        <function-ref name="get" scoped="" ref="0x409c2b80"/>
        <function-ref name="led1Off" scoped="" ref="0x409c2c60"/>
        <function-ref name="led2Off" scoped="" ref="0x409d8010"/>
        <function-ref name="set" scoped="" ref="0x409c2d40"/>
        <function-ref name="led0On" scoped="" ref="0x409c2e20"/>
        <function-ref name="led2On" scoped="" ref="0x409c2f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x409c2010" loc="51:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x409c2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x409c21e8"/>
        <function-ref name="noAck" scoped="" ref="0x409c22c8"/>
        <function-ref name="wasAcked" scoped="" ref="0x409c23a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x409dbdf8" loc="50:../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x409dbdf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x409c7010"/>
        <function-ref name="source" scoped="" ref="0x409c70f0"/>
        <function-ref name="address" scoped="" ref="0x409c71d0"/>
        <function-ref name="destination" scoped="" ref="0x409c72b0"/>
        <function-ref name="setSource" scoped="" ref="0x409c7390"/>
        <function-ref name="setDestination" scoped="" ref="0x409c7470"/>
        <function-ref name="type" scoped="" ref="0x409c7550"/>
        <function-ref name="setType" scoped="" ref="0x409c7630"/>
        <function-ref name="isForMe" scoped="" ref="0x409c7710"/>
        <function-ref name="setGroup" scoped="" ref="0x409c77f0"/>
        <function-ref name="localGroup" scoped="" ref="0x409c78d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40a03ed0" loc="54:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x40a03ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a020c0"/>
        <function-ref name="getPayload" scoped="" ref="0x40a021a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40a02280"/>
        <function-ref name="cancel" scoped="" ref="0x40a02360"/>
        <function-ref name="sendDone" scoped="" ref="0x40a02440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40a025a0" loc="55:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x40a025a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40a02778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x409d5be8" loc="47:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x409d5be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x409d5dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x409d5eb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409d3010"/>
        <function-ref name="cancel" scoped="" ref="0x409d30f0"/>
        <function-ref name="sendDone" scoped="" ref="0x409d31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40a03310" loc="50:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x40a03310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40a034e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40a035c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40a036a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40a03788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40a03868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x409d33a8" loc="48:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x409d33a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x409d3590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40a039a8" loc="51:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40a039a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40a03b80"/>
        <function-ref name="noAck" scoped="" ref="0x40a03c60"/>
        <function-ref name="wasAcked" scoped="" ref="0x40a03d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x409d36d0" loc="49:../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x409d36d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x409d38a8"/>
        <function-ref name="source" scoped="" ref="0x409d3988"/>
        <function-ref name="address" scoped="" ref="0x409d3a68"/>
        <function-ref name="destination" scoped="" ref="0x409d3b48"/>
        <function-ref name="setSource" scoped="" ref="0x409d3c28"/>
        <function-ref name="setDestination" scoped="" ref="0x409d3d08"/>
        <function-ref name="type" scoped="" ref="0x409d3de8"/>
        <function-ref name="setType" scoped="" ref="0x409d3ec8"/>
        <function-ref name="isForMe" scoped="" ref="0x40a03010"/>
        <function-ref name="setGroup" scoped="" ref="0x40a030f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40a031d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40a22d08" loc="50:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x40a22d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40a22ee0"/>
        <function-ref name="stopDone" scoped="" ref="0x40a1f010"/>
        <function-ref name="start" scoped="" ref="0x40a1f0f0"/>
        <function-ref name="stop" scoped="" ref="0x40a1f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40a1fc20" loc="52:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x40a1fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a1fdf8"/>
        <function-ref name="getPayload" scoped="" ref="0x40a1fed8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40a1e010"/>
        <function-ref name="cancel" scoped="" ref="0x40a1e0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40a1e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a22970" loc="49:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40a22970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a22b48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40a1f618" loc="51:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x40a1f618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40a1f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40a1a840" loc="56:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40a1a840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a1aa18"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a1aaf8"/>
        <function-ref name="led1On" scoped="" ref="0x40a1abd8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a1acb8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a1ad98"/>
        <function-ref name="get" scoped="" ref="0x40a1ae78"/>
        <function-ref name="led1Off" scoped="" ref="0x40a1d010"/>
        <function-ref name="led2Off" scoped="" ref="0x40a1d390"/>
        <function-ref name="set" scoped="" ref="0x40a1d0f0"/>
        <function-ref name="led0On" scoped="" ref="0x40a1d1d0"/>
        <function-ref name="led2On" scoped="" ref="0x40a1d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x40a1a338" loc="55:../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40a1a338"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40a1a510"/>
        <function-ref name="offset" scoped="" ref="0x40a1a5f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40a1a6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40a16b50" loc="66:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x40a16b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40a16d28"/>
        <function-ref name="stopDone" scoped="" ref="0x40a16e08"/>
        <function-ref name="start" scoped="" ref="0x40a16ee8"/>
        <function-ref name="stop" scoped="" ref="0x40a15010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x40a63ce8" loc="332:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x40a63ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a63ec0"/>
        <function-ref name="runTask" scoped="" ref="0x40a62010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40a2bd38" loc="74:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x40a2bd38"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a2bf10"/>
        <function-ref name="stop" scoped="" ref="0x40a13010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x40a3d168" loc="191:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x40a3d168"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a3d340"/>
        <function-ref name="runTask" scoped="" ref="0x40a3d420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a167b8" loc="65:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40a167b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a16990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x40a13d08" loc="75:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x40a13d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x40a13ee0"/>
        <function-ref name="flush" scoped="" ref="0x40a2c010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x40a65578" loc="322:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x40a65578"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a65750"/>
        <function-ref name="runTask" scoped="" ref="0x40a65830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x40a2d708" loc="72:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x40a2d708"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40a2d8e0"/>
        <function-ref name="resetSend" scoped="" ref="0x40a2d9c0"/>
        <function-ref name="dataReceived" scoped="" ref="0x40a2daa0"/>
        <function-ref name="resetReceive" scoped="" ref="0x40a2db80"/>
        <function-ref name="putData" scoped="" ref="0x40a2dc60"/>
        <function-ref name="putDone" scoped="" ref="0x40a2dd40"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40a2de20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40a14010" loc="73:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40a14010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a141e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a142c8"/>
        <function-ref name="led1On" scoped="" ref="0x40a143a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a14488"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a14568"/>
        <function-ref name="get" scoped="" ref="0x40a14648"/>
        <function-ref name="led1Off" scoped="" ref="0x40a14728"/>
        <function-ref name="led2Off" scoped="" ref="0x40a14aa8"/>
        <function-ref name="set" scoped="" ref="0x40a14808"/>
        <function-ref name="led0On" scoped="" ref="0x40a148e8"/>
        <function-ref name="led2On" scoped="" ref="0x40a149c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x40a61998" loc="341:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40a61998"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a61b70"/>
        <function-ref name="runTask" scoped="" ref="0x40a61c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x40a33348" loc="67:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x40a33348"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40a33520"/>
        <function-ref name="nextByte" scoped="" ref="0x40a33600"/>
        <function-ref name="startSend" scoped="" ref="0x40a336e0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40a337c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x40a30430" loc="68:../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40a30430"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40a30608"/>
        <function-ref name="byteReceived" scoped="" ref="0x40a306e8"/>
        <function-ref name="endPacket" scoped="" ref="0x40a307c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x40ac5030" loc="275:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x40ac5030"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ac5208"/>
        <function-ref name="runTask" scoped="" ref="0x40ac52e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40a95c60" loc="51:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x40a95c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a95e48"/>
        <function-ref name="getPayload" scoped="" ref="0x40a95f28"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40ac8018"/>
        <function-ref name="cancel" scoped="" ref="0x40ac80f8"/>
        <function-ref name="sendDone" scoped="" ref="0x40ac81d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x40ac5468" loc="158:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x40ac5468"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ac5640"/>
        <function-ref name="runTask" scoped="" ref="0x40ac5720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40a958a0" loc="50:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x40a958a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40a95a88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x40ac8400" loc="54:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x40ac8400"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x406147f0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40ac85e8"/>
        <function-ref name="offset" scoped="" ref="0x40ac86c8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40ac87a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ac73f0" loc="57:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40ac73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ac75c8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40ac76a8"/>
        <function-ref name="led1On" scoped="" ref="0x40ac7788"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40ac7868"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40ac7948"/>
        <function-ref name="get" scoped="" ref="0x40ac7a28"/>
        <function-ref name="led1Off" scoped="" ref="0x40ac7b08"/>
        <function-ref name="led2On" scoped="" ref="0x40ac7e88"/>
        <function-ref name="set" scoped="" ref="0x40ac7cc8"/>
        <function-ref name="led2Off" scoped="" ref="0x40ac7be8"/>
        <function-ref name="led0On" scoped="" ref="0x40ac7da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x40ac8dc0" loc="56:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x40ac8dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40ac7010"/>
        <function-ref name="nextByte" scoped="" ref="0x40ac70f0"/>
        <function-ref name="startSend" scoped="" ref="0x40ac71d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40ac72b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x40ac88e8" loc="55:../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40ac88e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40ac8ac0"/>
        <function-ref name="byteReceived" scoped="" ref="0x40ac8ba0"/>
        <function-ref name="endPacket" scoped="" ref="0x40ac8c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x40adfb80" loc="50:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x40adfb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40adfd58"/>
        <function-ref name="receivedByte" scoped="" ref="0x40adfe38"/>
        <function-ref name="receive" scoped="" ref="0x40adff18"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40ae5010"/>
        <function-ref name="receiveDone" scoped="" ref="0x40ae50f0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40ae51d0"/>
        <function-ref name="sendDone" scoped="" ref="0x40ae52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x40ac4858" loc="48:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x40ac4858"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40ac4a30"/>
        <function-ref name="resetSend" scoped="" ref="0x40ac4b10"/>
        <function-ref name="dataReceived" scoped="" ref="0x40ac4bf0"/>
        <function-ref name="resetReceive" scoped="" ref="0x40ac4cd0"/>
        <function-ref name="putData" scoped="" ref="0x40ac4db0"/>
        <function-ref name="putDone" scoped="" ref="0x40ac4e90"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40ae6010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ae5420" loc="51:../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40ae5420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ae55f8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40ae56d8"/>
        <function-ref name="led1On" scoped="" ref="0x40ae57b8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40ae5898"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40ae5978"/>
        <function-ref name="get" scoped="" ref="0x40ae5a58"/>
        <function-ref name="led1Off" scoped="" ref="0x40ae5b38"/>
        <function-ref name="led2Off" scoped="" ref="0x40ae5eb8"/>
        <function-ref name="set" scoped="" ref="0x40ae5c18"/>
        <function-ref name="led0On" scoped="" ref="0x40ae5cf8"/>
        <function-ref name="led2On" scoped="" ref="0x40ae5dd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40af25d8" loc="6:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x40af25d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40af27b0"/>
        <function-ref name="receive" scoped="" ref="0x40af2890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40ac37a8" loc="5:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x40ac37a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ac3980"/>
        <function-ref name="receivedByte" scoped="" ref="0x40ac3a60"/>
        <function-ref name="receive" scoped="" ref="0x40ac3b40"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40ac3c20"/>
        <function-ref name="receiveDone" scoped="" ref="0x40ac3d00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40ac3de0"/>
        <function-ref name="sendDone" scoped="" ref="0x40ac3ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40ac3328" loc="4:../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x40ac3328"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ac3500"/>
        <function-ref name="stop" scoped="" ref="0x40ac35e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40c5d330" loc="45:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x40c5d330"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40c5d508"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c5d5e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40c5c010" loc="47:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x40c5c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c5c1e8"/>
        <function-ref name="receive" scoped="" ref="0x40c5c2c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x40c5c428" loc="49:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40c5c428"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x40c5c600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40c5d748" loc="46:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x40c5d748"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c5d920"/>
        <function-ref name="receivedByte" scoped="" ref="0x40c5da00"/>
        <function-ref name="receive" scoped="" ref="0x40c5dae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40c5dbc0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40c5dca0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40c5dd80"/>
        <function-ref name="sendDone" scoped="" ref="0x40c5de60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40af3c10" loc="44:../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40af3c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40af3de8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40af3ec8"/>
        <function-ref name="request" scoped="" ref="0x40c5d010"/>
        <function-ref name="granted" scoped="" ref="0x40c5d0f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40c5d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x40b2a158" loc="42:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x40b2a158"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40b2a330"/>
        <function-ref name="configure" scoped="" ref="0x40b2a410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40b294a8" loc="44:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x40b294a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b29680"/>
        <function-ref name="receive" scoped="" ref="0x40b29760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x40b287b0" loc="47:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40b287b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x40b28988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40b2a8b8" loc="43:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x40b2a8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b2aa90"/>
        <function-ref name="receivedByte" scoped="" ref="0x40b2ab70"/>
        <function-ref name="receive" scoped="" ref="0x40b2ac50"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40b2ad30"/>
        <function-ref name="receiveDone" scoped="" ref="0x40b2ae10"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40b2aef0"/>
        <function-ref name="sendDone" scoped="" ref="0x40b29010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x40b29ca0" loc="46:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x40b29ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b29e78"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b28010"/>
        <function-ref name="request" scoped="" ref="0x40b280f0"/>
        <function-ref name="granted" scoped="" ref="0x40b281d0"/>
        <function-ref name="isOwner" scoped="" ref="0x40b282b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40b31778" loc="41:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40b31778"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b31950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b31a30"/>
        <function-ref name="request" scoped="" ref="0x40b31b10"/>
        <function-ref name="granted" scoped="" ref="0x40b31bf0"/>
        <function-ref name="isOwner" scoped="" ref="0x40b31cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x40b25d50" loc="48:../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x40b25d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40b25f28"/>
        <function-ref name="txDone" scoped="" ref="0x40b27018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x40b23e28" loc="44:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x40b23e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40b77050"/>
        <function-ref name="configure" scoped="" ref="0x40b77130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40b77c48" loc="46:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x40b77c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b77e30"/>
        <function-ref name="receive" scoped="" ref="0x40b77f10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x40b768a8" loc="49:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40b768a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x40b76a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x40b76c10" loc="50:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x40b76c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40b76de8"/>
        <function-ref name="enableUartRx" scoped="" ref="0x40b76ec8"/>
        <function-ref name="setUctl" scoped="" ref="0x40b75010"/>
        <function-ref name="enableUart" scoped="" ref="0x40b750f0"/>
        <function-ref name="setUrctl" scoped="" ref="0x40b751d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40b752b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x40b75390"/>
        <function-ref name="getUtctl" scoped="" ref="0x40b75470"/>
        <function-ref name="getUrctl" scoped="" ref="0x40b75550"/>
        <function-ref name="resetUsart" scoped="" ref="0x40b75630"/>
        <function-ref name="getUmctl" scoped="" ref="0x40b75710"/>
        <function-ref name="disableIntr" scoped="" ref="0x40b757f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x40b758d0"/>
        <function-ref name="getUbr" scoped="" ref="0x40b75a30"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40b75b10"/>
        <function-ref name="setUmctl" scoped="" ref="0x40b75bf0"/>
        <function-ref name="isUartRx" scoped="" ref="0x40b75cd0"/>
        <function-ref name="isUart" scoped="" ref="0x40b75db0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40b75e90"/>
        <function-ref name="isSpi" scoped="" ref="0x40b74010"/>
        <function-ref name="enableUartTx" scoped="" ref="0x40b740f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40b741d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x40b742b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x40b74390"/>
        <function-ref name="getMode" scoped="" ref="0x40b74470"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x40b74650"/>
        <function-ref name="clrIntr" scoped="" ref="0x40b74730"/>
        <function-ref name="setUbr" scoped="" ref="0x40b74810"/>
        <function-ref name="tx" scoped="" ref="0x40b748f0"/>
        <function-ref name="getUctl" scoped="" ref="0x40b749d0"/>
        <function-ref name="disableUart" scoped="" ref="0x40b74ab0"/>
        <function-ref name="enableSpi" scoped="" ref="0x40b74b90"/>
        <function-ref name="setModeUart" scoped="" ref="0x40b74c70"/>
        <function-ref name="setModeSpi" scoped="" ref="0x40b74d50"/>
        <function-ref name="rx" scoped="" ref="0x40b74e30"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x40b74f10"/>
        <function-ref name="isUartTx" scoped="" ref="0x40b73010"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x40b730f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x40b731d0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x40b732b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40b77328" loc="45:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x40b77328"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b77510"/>
        <function-ref name="receivedByte" scoped="" ref="0x40b775f0"/>
        <function-ref name="receive" scoped="" ref="0x40b776d0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40b777b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40b77890"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40b77970"/>
        <function-ref name="sendDone" scoped="" ref="0x40b77a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40b73a10" loc="52:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40b73a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b72200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40b726f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40b72478"/>
        <function-ref name="overflow" scoped="" ref="0x40b72968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x40b76148" loc="48:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x40b76148"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b76330"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b76410"/>
        <function-ref name="request" scoped="" ref="0x40b764f0"/>
        <function-ref name="granted" scoped="" ref="0x40b765d0"/>
        <function-ref name="isOwner" scoped="" ref="0x40b766b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40b236c8" loc="43:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40b236c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b238b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b23990"/>
        <function-ref name="request" scoped="" ref="0x40b23a70"/>
        <function-ref name="granted" scoped="" ref="0x40b23b50"/>
        <function-ref name="isOwner" scoped="" ref="0x40b23c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x40b734c8" loc="51:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x40b734c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40b736b0"/>
        <function-ref name="txDone" scoped="" ref="0x40b73790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b72b98" loc="53:../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40b72b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b72d70"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b72e50"/>
        <function-ref name="led1On" scoped="" ref="0x40b71010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b710f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b711d0"/>
        <function-ref name="get" scoped="" ref="0x40b712b0"/>
        <function-ref name="led1Off" scoped="" ref="0x40b71390"/>
        <function-ref name="led2On" scoped="" ref="0x40b71710"/>
        <function-ref name="set" scoped="" ref="0x40b71550"/>
        <function-ref name="led2Off" scoped="" ref="0x40b71470"/>
        <function-ref name="led0On" scoped="" ref="0x40b71630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x40b90508" loc="78:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x40b90508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40b906e0"/>
        <function-ref name="txDone" scoped="" ref="0x40b907c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x40b91708" loc="76:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x40b91708"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b918e0"/>
        <function-ref name="stop" scoped="" ref="0x40b919c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x40b91bb0" loc="77:../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x40b91bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40b91d88"/>
        <function-ref name="enableUartRx" scoped="" ref="0x40b91e68"/>
        <function-ref name="setUctl" scoped="" ref="0x40b93010"/>
        <function-ref name="enableUart" scoped="" ref="0x40b930f0"/>
        <function-ref name="setUrctl" scoped="" ref="0x40b931d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40b932b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x40b93390"/>
        <function-ref name="getUtctl" scoped="" ref="0x40b93470"/>
        <function-ref name="getUrctl" scoped="" ref="0x40b93550"/>
        <function-ref name="resetUsart" scoped="" ref="0x40b93630"/>
        <function-ref name="getUmctl" scoped="" ref="0x40b93710"/>
        <function-ref name="disableIntr" scoped="" ref="0x40b937f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x40b938d0"/>
        <function-ref name="getUbr" scoped="" ref="0x40b93a30"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40b93b10"/>
        <function-ref name="setUmctl" scoped="" ref="0x40b93bf0"/>
        <function-ref name="isUartRx" scoped="" ref="0x40b93cd0"/>
        <function-ref name="isUart" scoped="" ref="0x40b93db0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40b93e90"/>
        <function-ref name="isSpi" scoped="" ref="0x40b92010"/>
        <function-ref name="enableUartTx" scoped="" ref="0x40b920f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40b921d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x40b922b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x40b92390"/>
        <function-ref name="getMode" scoped="" ref="0x40b92470"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x40b92650"/>
        <function-ref name="clrIntr" scoped="" ref="0x40b92730"/>
        <function-ref name="setUbr" scoped="" ref="0x40b92810"/>
        <function-ref name="tx" scoped="" ref="0x40b928f0"/>
        <function-ref name="getUctl" scoped="" ref="0x40b929d0"/>
        <function-ref name="disableUart" scoped="" ref="0x40b92ab0"/>
        <function-ref name="enableSpi" scoped="" ref="0x40b92b90"/>
        <function-ref name="setModeUart" scoped="" ref="0x40b92c70"/>
        <function-ref name="setModeSpi" scoped="" ref="0x40b92d50"/>
        <function-ref name="rx" scoped="" ref="0x40b92e30"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x40b92f10"/>
        <function-ref name="isUartTx" scoped="" ref="0x40b90010"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x40b900f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x40b901d0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x40b902b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x40b88e58" loc="80:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x40b88e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40b86050"/>
        <function-ref name="isInput" scoped="" ref="0x40b86130"/>
        <function-ref name="setResistor" scoped="" ref="0x40b86210"/>
        <function-ref name="toggle" scoped="" ref="0x40b862f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40b863d0"/>
        <function-ref name="getResistor" scoped="" ref="0x40b864b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40b86590"/>
        <function-ref name="get" scoped="" ref="0x40b86670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40b86750"/>
        <function-ref name="getRaw" scoped="" ref="0x40b86830"/>
        <function-ref name="set" scoped="" ref="0x40b86910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40b869f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40b86ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40b86c30"/>
        <function-ref name="clr" scoped="" ref="0x40b86d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x40b8a670" loc="76:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x40b8a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40b8a848"/>
        <function-ref name="txDone" scoped="" ref="0x40b8a928"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x40b85010" loc="81:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x40b85010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40b851e8"/>
        <function-ref name="isInput" scoped="" ref="0x40b852c8"/>
        <function-ref name="setResistor" scoped="" ref="0x40b853a8"/>
        <function-ref name="toggle" scoped="" ref="0x40b85488"/>
        <function-ref name="isOutput" scoped="" ref="0x40b85568"/>
        <function-ref name="getResistor" scoped="" ref="0x40b85648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40b85728"/>
        <function-ref name="get" scoped="" ref="0x40b85808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40b858e8"/>
        <function-ref name="getRaw" scoped="" ref="0x40b859c8"/>
        <function-ref name="set" scoped="" ref="0x40b85aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40b85b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40b85c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40b85dc8"/>
        <function-ref name="clr" scoped="" ref="0x40b85ea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x40b84168" loc="82:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x40b84168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40b84340"/>
        <function-ref name="isInput" scoped="" ref="0x40b84420"/>
        <function-ref name="setResistor" scoped="" ref="0x40b84500"/>
        <function-ref name="toggle" scoped="" ref="0x40b845e0"/>
        <function-ref name="isOutput" scoped="" ref="0x40b846c0"/>
        <function-ref name="getResistor" scoped="" ref="0x40b847a0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40b84880"/>
        <function-ref name="get" scoped="" ref="0x40b84960"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40b84a40"/>
        <function-ref name="getRaw" scoped="" ref="0x40b84b20"/>
        <function-ref name="set" scoped="" ref="0x40b84c00"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40b84ce0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40b84dc0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40b84f20"/>
        <function-ref name="clr" scoped="" ref="0x40b83018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x40b8fd08" loc="75:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x40b8fd08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40b8fee0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x40b8c010"/>
        <function-ref name="setUctl" scoped="" ref="0x40b8c0f0"/>
        <function-ref name="enableUart" scoped="" ref="0x40b8c1d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x40b8c2b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40b8c390"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x40b8c470"/>
        <function-ref name="getUtctl" scoped="" ref="0x40b8c550"/>
        <function-ref name="getUrctl" scoped="" ref="0x40b8c630"/>
        <function-ref name="resetUsart" scoped="" ref="0x40b8c710"/>
        <function-ref name="getUmctl" scoped="" ref="0x40b8c7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x40b8c8d0"/>
        <function-ref name="setUtctl" scoped="" ref="0x40b8c9b0"/>
        <function-ref name="getUbr" scoped="" ref="0x40b8cb10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40b8cbf0"/>
        <function-ref name="setUmctl" scoped="" ref="0x40b8ccd0"/>
        <function-ref name="isUartRx" scoped="" ref="0x40b8cdb0"/>
        <function-ref name="isUart" scoped="" ref="0x40b8ce90"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40b8b010"/>
        <function-ref name="isSpi" scoped="" ref="0x40b8b0f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x40b8b1d0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40b8b2b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x40b8b390"/>
        <function-ref name="enableIntr" scoped="" ref="0x40b8b470"/>
        <function-ref name="getMode" scoped="" ref="0x40b8b550"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x40b8b730"/>
        <function-ref name="clrIntr" scoped="" ref="0x40b8b810"/>
        <function-ref name="setUbr" scoped="" ref="0x40b8b8f0"/>
        <function-ref name="tx" scoped="" ref="0x40b8b9d0"/>
        <function-ref name="getUctl" scoped="" ref="0x40b8bab0"/>
        <function-ref name="disableUart" scoped="" ref="0x40b8bb90"/>
        <function-ref name="enableSpi" scoped="" ref="0x40b8bc70"/>
        <function-ref name="setModeUart" scoped="" ref="0x40b8bd50"/>
        <function-ref name="setModeSpi" scoped="" ref="0x40b8be30"/>
        <function-ref name="rx" scoped="" ref="0x40b8bf10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x40b8a010"/>
        <function-ref name="isUartTx" scoped="" ref="0x40b8a0f0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x40b8a1d0"/>
        <function-ref name="disableSpi" scoped="" ref="0x40b8a2b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x40b8a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x40b8f808" loc="74:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x40b8f808"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b8f9e0"/>
        <function-ref name="stop" scoped="" ref="0x40b8fac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x40b89ca0" loc="79:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x40b89ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40b89e78"/>
        <function-ref name="isInput" scoped="" ref="0x40b88010"/>
        <function-ref name="setResistor" scoped="" ref="0x40b880f0"/>
        <function-ref name="toggle" scoped="" ref="0x40b881d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40b882b0"/>
        <function-ref name="getResistor" scoped="" ref="0x40b88390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40b88470"/>
        <function-ref name="get" scoped="" ref="0x40b88550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40b88630"/>
        <function-ref name="getRaw" scoped="" ref="0x40b88710"/>
        <function-ref name="set" scoped="" ref="0x40b887f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40b888d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40b889b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40b88b10"/>
        <function-ref name="clr" scoped="" ref="0x40b88bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x40b8ab90" loc="78:../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x40b8ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40b8ad68"/>
        <function-ref name="isInput" scoped="" ref="0x40b8ae48"/>
        <function-ref name="setResistor" scoped="" ref="0x40b8af28"/>
        <function-ref name="toggle" scoped="" ref="0x40b89018"/>
        <function-ref name="isOutput" scoped="" ref="0x40b890f8"/>
        <function-ref name="getResistor" scoped="" ref="0x40b891d8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40b892b8"/>
        <function-ref name="get" scoped="" ref="0x40b89398"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40b89478"/>
        <function-ref name="getRaw" scoped="" ref="0x40b89558"/>
        <function-ref name="set" scoped="" ref="0x40b89638"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40b89718"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40b897f8"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40b89958"/>
        <function-ref name="clr" scoped="" ref="0x40b89a38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40be2f28" loc="43:../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x40be2f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40bde688"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40bdeb78"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40bde900"/>
        <function-ref name="overflow" scoped="" ref="0x40bdedf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x413eca58" loc="43:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x413eca58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x413ecc30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x413ecd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x413e9e48" loc="48:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x413e9e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x413e8050"/>
        <function-ref name="configure" scoped="" ref="0x413e8130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x413e9a30" loc="46:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x413e9a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x413e9c08"/>
        <function-ref name="txDone" scoped="" ref="0x413e9ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x413ec3a0" loc="42:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x413ec3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x413ec578"/>
        <function-ref name="immediateRequest" scoped="" ref="0x413ec658"/>
        <function-ref name="request" scoped="" ref="0x413ec738"/>
        <function-ref name="granted" scoped="" ref="0x413ec818"/>
        <function-ref name="isOwner" scoped="" ref="0x413ec8f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x413eb2b0" loc="45:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x413eb2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x413eb488"/>
        <function-ref name="enableUartRx" scoped="" ref="0x413eb568"/>
        <function-ref name="setUctl" scoped="" ref="0x413eb648"/>
        <function-ref name="enableUart" scoped="" ref="0x413eb728"/>
        <function-ref name="setUrctl" scoped="" ref="0x413eb808"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x413eb8e8"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x413eb9c8"/>
        <function-ref name="getUtctl" scoped="" ref="0x413ebaa8"/>
        <function-ref name="getUrctl" scoped="" ref="0x413ebb88"/>
        <function-ref name="resetUsart" scoped="" ref="0x413ebc68"/>
        <function-ref name="getUmctl" scoped="" ref="0x413ebd48"/>
        <function-ref name="disableIntr" scoped="" ref="0x413ebe28"/>
        <function-ref name="setUtctl" scoped="" ref="0x413ebf08"/>
        <function-ref name="getUbr" scoped="" ref="0x413ea090"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x413ea170"/>
        <function-ref name="setUmctl" scoped="" ref="0x413ea250"/>
        <function-ref name="isUartRx" scoped="" ref="0x413ea330"/>
        <function-ref name="isUart" scoped="" ref="0x413ea410"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x413ea4f0"/>
        <function-ref name="isSpi" scoped="" ref="0x413ea5d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x413ea6b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x413ea790"/>
        <function-ref name="disableUartRx" scoped="" ref="0x413ea870"/>
        <function-ref name="enableIntr" scoped="" ref="0x413ea950"/>
        <function-ref name="getMode" scoped="" ref="0x413eaa30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x413eac10"/>
        <function-ref name="clrIntr" scoped="" ref="0x413eacf0"/>
        <function-ref name="setUbr" scoped="" ref="0x413eadd0"/>
        <function-ref name="tx" scoped="" ref="0x413eaeb0"/>
        <function-ref name="getUctl" scoped="" ref="0x413e9010"/>
        <function-ref name="disableUart" scoped="" ref="0x413e90f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x413e91d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x413e92b0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x413e9390"/>
        <function-ref name="rx" scoped="" ref="0x413e9470"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x413e9550"/>
        <function-ref name="isUartTx" scoped="" ref="0x413e9630"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x413e9710"/>
        <function-ref name="disableSpi" scoped="" ref="0x413e97f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x413e98d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x413ece70" loc="44:../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x413ece70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x413eb070"/>
        <function-ref name="userId" scoped="" ref="0x413eb150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40bf82a8" loc="42:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x40bf82a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40bf8480"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40bf8560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40bf8ed8" loc="45:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x40bf8ed8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40bf70c0"/>
        <function-ref name="configure" scoped="" ref="0x40bf71a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x40bf9100" loc="40:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x40bf9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40bf92d8"/>
        <function-ref name="txDone" scoped="" ref="0x40bf93b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40bf9850" loc="41:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40bf9850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bf9a28"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40bf9b08"/>
        <function-ref name="request" scoped="" ref="0x40bf9be8"/>
        <function-ref name="granted" scoped="" ref="0x40bf9cc8"/>
        <function-ref name="isOwner" scoped="" ref="0x40bf9da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40bf8730" loc="43:../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x40bf8730"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40bf8908"/>
        <function-ref name="userId" scoped="" ref="0x40bf89e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40bf6e90" loc="43:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x40bf6e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40bea080"/>
        <function-ref name="userId" scoped="" ref="0x40bea160"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x40bebec8" loc="39:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x40bebec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40bf60c0"/>
        <function-ref name="txDone" scoped="" ref="0x40bf61a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x40bf6b58" loc="42:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x40bf6b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40bf6d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x40bf63b8" loc="40:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x40bf63b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40bf65a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x40bf6720" loc="41:../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x40bf6720"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x40bf68f8"/>
        <function-ref name="txDone" scoped="" ref="0x40bf69d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40c4e068" loc="92:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x40c4e068"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40c4e250"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c4e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40c4d010" loc="96:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x40c4d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40c4d1f8"/>
        <function-ref name="configure" scoped="" ref="0x40c4d2d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40c4e470" loc="93:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4e470"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c4e648"/>
        <function-ref name="requested" scoped="" ref="0x40c4e728"/>
        <function-ref name="granted" scoped="" ref="0x40c4e808"/>
        <function-ref name="isOwner" scoped="" ref="0x40c4e8e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c4e9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40be7908" loc="91:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40be7908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40be7af0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40be7bd0"/>
        <function-ref name="request" scoped="" ref="0x40be7cb0"/>
        <function-ref name="granted" scoped="" ref="0x40be7d90"/>
        <function-ref name="isOwner" scoped="" ref="0x40be7e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40c4eb08" loc="94:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4eb08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40c4ece0"/>
        <function-ref name="userId" scoped="" ref="0x40c4edc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41400ed8" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x41400ed8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x413fe0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x413fe220" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x413fe220"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x413fe3f8"/>
        <function-ref name="isEmpty" scoped="" ref="0x413fe4d8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x413fe5b8"/>
        <function-ref name="dequeue" scoped="" ref="0x413fe698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x413fdac8" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x413fdac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x413fdcb0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x413fdd90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x413fba40" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x413fba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x413fbc28"/>
        <function-ref name="configure" scoped="" ref="0x413fbd08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x413fbe68" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x413fbe68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x413fa050"/>
        <function-ref name="isEmpty" scoped="" ref="0x413fa130"/>
        <function-ref name="isEnqueued" scoped="" ref="0x413fa210"/>
        <function-ref name="dequeue" scoped="" ref="0x413fa2f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x413fded0" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x413fded0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x413fb0c0"/>
        <function-ref name="requested" scoped="" ref="0x413fb1a0"/>
        <function-ref name="granted" scoped="" ref="0x413fb280"/>
        <function-ref name="isOwner" scoped="" ref="0x413fb360"/>
        <function-ref name="immediateRequested" scoped="" ref="0x413fb440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x413fa430" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x413fa430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x413fa608"/>
        <function-ref name="led0Toggle" scoped="" ref="0x413fa6e8"/>
        <function-ref name="led1On" scoped="" ref="0x413fa7c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x413fa8a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x413fa988"/>
        <function-ref name="get" scoped="" ref="0x413faa68"/>
        <function-ref name="led1Off" scoped="" ref="0x413fab48"/>
        <function-ref name="led0On" scoped="" ref="0x413faec8"/>
        <function-ref name="set" scoped="" ref="0x413fad08"/>
        <function-ref name="led2On" scoped="" ref="0x413fac28"/>
        <function-ref name="led2Off" scoped="" ref="0x413fade8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x413fd388" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x413fd388"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x413fd570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x413fd650"/>
        <function-ref name="request" scoped="" ref="0x413fd730"/>
        <function-ref name="granted" scoped="" ref="0x413fd810"/>
        <function-ref name="isOwner" scoped="" ref="0x413fd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x413fb580" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x413fb580"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x413fb758"/>
        <function-ref name="userId" scoped="" ref="0x413fb838"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x413f9080" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x413f9080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x413f9258"/>
        <function-ref name="runTask" scoped="" ref="0x413f9338"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40c4b510" loc="72:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40c4b510"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40c4b6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40c4b828" loc="73:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40c4b828"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c4ba00"/>
        <function-ref name="requested" scoped="" ref="0x40c4bae0"/>
        <function-ref name="granted" scoped="" ref="0x40c4bbc0"/>
        <function-ref name="isOwner" scoped="" ref="0x40c4bca0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40c4bd80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40c4b118" loc="70:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x40c4b118"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c4b2f0"/>
        <function-ref name="stop" scoped="" ref="0x40c4b3d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40c4bec0" loc="74:../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x40c4bec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40c4a0c0"/>
        <function-ref name="userId" scoped="" ref="0x40c4a1a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x4142bb68" loc="62:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x4142bb68"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x4142bd40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x4142be80" loc="63:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4142be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x41429070"/>
        <function-ref name="requested" scoped="" ref="0x41429150"/>
        <function-ref name="granted" scoped="" ref="0x41429230"/>
        <function-ref name="isOwner" scoped="" ref="0x41429310"/>
        <function-ref name="immediateRequested" scoped="" ref="0x414293f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x4142b770" loc="60:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x4142b770"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4142b948"/>
        <function-ref name="stop" scoped="" ref="0x4142ba28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x41429530" loc="64:../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x41429530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x41429708"/>
        <function-ref name="userId" scoped="" ref="0x414297e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x40c5ba38" loc="3:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x40c5ba38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x40c5bc10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40c5bdc8" loc="4:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40c5bdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40c58010"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40c580f0"/>
        <function-ref name="request" scoped="" ref="0x40c581d0"/>
        <function-ref name="granted" scoped="" ref="0x40c582b0"/>
        <function-ref name="isOwner" scoped="" ref="0x40c58390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40c5b560" loc="2:../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x40c5b560"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c5b738"/>
        <function-ref name="stop" scoped="" ref="0x40c5b818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x40c51bd8" loc="47:../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x40c51bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40c51db0"/>
        <function-ref name="offset" scoped="" ref="0x40c51e90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40c79010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40cb3920" loc="49:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x40cb3920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40cb3af8"/>
        <function-ref name="getPayload" scoped="" ref="0x40cb3bd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cb3cb8"/>
        <function-ref name="cancel" scoped="" ref="0x40cb3d98"/>
        <function-ref name="sendDone" scoped="" ref="0x40cb3e78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40cb2010" loc="50:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x40cb2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cb21e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40cb22c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40cb23a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cb2488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40cb2568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40cb26a8" loc="51:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x40cb26a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40cb2880"/>
        <function-ref name="source" scoped="" ref="0x40cb2960"/>
        <function-ref name="address" scoped="" ref="0x40cb2a40"/>
        <function-ref name="destination" scoped="" ref="0x40cb2b20"/>
        <function-ref name="setSource" scoped="" ref="0x40cb2c00"/>
        <function-ref name="setDestination" scoped="" ref="0x40cb2ce0"/>
        <function-ref name="type" scoped="" ref="0x40cb2dc0"/>
        <function-ref name="setType" scoped="" ref="0x40cb2ea0"/>
        <function-ref name="isForMe" scoped="" ref="0x40cb1010"/>
        <function-ref name="setGroup" scoped="" ref="0x40cb10f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40cb11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x40cb1330" loc="52:../../tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x40cb1330"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40cb1508"/>
        <function-ref name="noAck" scoped="" ref="0x40cb15e8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40cb16c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x41422560" loc="44:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x41422560"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x41422738"/>
        <function-ref name="getPayload" scoped="" ref="0x41422818"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x414228f8"/>
        <function-ref name="cancel" scoped="" ref="0x414229d8"/>
        <function-ref name="sendDone" scoped="" ref="0x41422ab8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x41422c28" loc="46:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x41422c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x41422e00"/>
        <function-ref name="getPayload" scoped="" ref="0x41422ee0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x41421010"/>
        <function-ref name="cancel" scoped="" ref="0x414210f0"/>
        <function-ref name="sendDone" scoped="" ref="0x414211d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x41421310" loc="47:../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x41421310"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x414214e8"/>
        <function-ref name="source" scoped="" ref="0x414215c8"/>
        <function-ref name="address" scoped="" ref="0x414216a8"/>
        <function-ref name="destination" scoped="" ref="0x41421788"/>
        <function-ref name="setSource" scoped="" ref="0x41421868"/>
        <function-ref name="setDestination" scoped="" ref="0x41421948"/>
        <function-ref name="type" scoped="" ref="0x41421a28"/>
        <function-ref name="setType" scoped="" ref="0x41421b08"/>
        <function-ref name="isForMe" scoped="" ref="0x41421be8"/>
        <function-ref name="setGroup" scoped="" ref="0x41421cc8"/>
        <function-ref name="localGroup" scoped="" ref="0x41421da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40c8a100" loc="44:../../tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x40c8a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c8a2d8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c8a3b8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c8a498"/>
        <function-ref name="cancel" scoped="" ref="0x40c8a578"/>
        <function-ref name="sendDone" scoped="" ref="0x40c8a658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40cb8780" loc="48:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x40cb8780"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40cb8968"/>
        <function-ref name="getPayload" scoped="" ref="0x40cb8a48"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cb8b28"/>
        <function-ref name="cancel" scoped="" ref="0x40cb8c08"/>
        <function-ref name="sendDone" scoped="" ref="0x40cb8ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40cb8010" loc="46:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x40cb8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40cb81f8"/>
        <function-ref name="getPayload" scoped="" ref="0x40cb82d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cb83b8"/>
        <function-ref name="cancel" scoped="" ref="0x40cb8498"/>
        <function-ref name="sendDone" scoped="" ref="0x40cb8578"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40cb7a50" loc="50:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x40cb7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cb7c28"/>
        <function-ref name="payloadLength" scoped="" ref="0x40cb7d08"/>
        <function-ref name="getPayload" scoped="" ref="0x40cb7de8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cb7ec8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40cb6010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40cb6190" loc="169:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x40cb6190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40cb6368"/>
        <function-ref name="runTask" scoped="" ref="0x40cb6448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40cb65c8" loc="126:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x40cb65c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40cb67a0"/>
        <function-ref name="runTask" scoped="" ref="0x40cb6880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40cb8e28" loc="49:../../tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x40cb8e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40cb7050"/>
        <function-ref name="source" scoped="" ref="0x40cb7130"/>
        <function-ref name="address" scoped="" ref="0x40cb7210"/>
        <function-ref name="destination" scoped="" ref="0x40cb72f0"/>
        <function-ref name="setSource" scoped="" ref="0x40cb73d0"/>
        <function-ref name="setDestination" scoped="" ref="0x40cb74b0"/>
        <function-ref name="type" scoped="" ref="0x40cb7590"/>
        <function-ref name="setType" scoped="" ref="0x40cb7670"/>
        <function-ref name="isForMe" scoped="" ref="0x40cb7750"/>
        <function-ref name="setGroup" scoped="" ref="0x40cb7830"/>
        <function-ref name="localGroup" scoped="" ref="0x40cb7910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x40caf428" loc="43:../../tos/system/BigQueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x40caf428"/></type-interface>
      <instance>
        <interfacedef-ref qname="BigQueue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40cae3d8"/>
        <function-ref name="enqueue" scoped="" ref="0x40cae888"/>
        <function-ref name="element" scoped="" ref="0x40caeb08"/>
        <function-ref name="full" scoped="" ref="0x40cafca8"/>
        <function-ref name="maxSize" scoped="" ref="0x40cae180"/>
        <function-ref name="dequeue" scoped="" ref="0x40cae630"/>
        <function-ref name="empty" scoped="" ref="0x40cafa50"/>
        <function-ref name="size" scoped="" ref="0x40caff00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40cc2a58" loc="93:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x40cc2a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BigQueue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40cc49f8"/>
        <function-ref name="enqueue" scoped="" ref="0x40cc4ea8"/>
        <function-ref name="element" scoped="" ref="0x40cc1150"/>
        <function-ref name="full" scoped="" ref="0x40cc42f0"/>
        <function-ref name="maxSize" scoped="" ref="0x40cc47a0"/>
        <function-ref name="dequeue" scoped="" ref="0x40cc4c50"/>
        <function-ref name="empty" scoped="" ref="0x40cc4098"/>
        <function-ref name="size" scoped="" ref="0x40cc4548"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40cc13c8" loc="94:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x40cc13c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40cc15a0"/>
        <function-ref name="getPayload" scoped="" ref="0x40cc1680"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cc1760"/>
        <function-ref name="cancel" scoped="" ref="0x40cc1840"/>
        <function-ref name="sendDone" scoped="" ref="0x40cc1920"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40cc1aa0" loc="95:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x40cc1aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cc1c78"/>
        <function-ref name="payloadLength" scoped="" ref="0x40cc1d58"/>
        <function-ref name="getPayload" scoped="" ref="0x40cc1e38"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cc1f18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40cc0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x40cbe800" loc="114:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="retrySend" scoped="" ref="0x40cbe800"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40cbe9d8"/>
        <function-ref name="runTask" scoped="" ref="0x40cbeab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40cc77b8" loc="89:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40cc77b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40cc7990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40cc0180" loc="96:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40cc0180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40cc0358"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40cc0438"/>
        <function-ref name="led1On" scoped="" ref="0x40cc0518"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40cc05f8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40cc06d8"/>
        <function-ref name="get" scoped="" ref="0x40cc07b8"/>
        <function-ref name="led1Off" scoped="" ref="0x40cc0898"/>
        <function-ref name="led2Off" scoped="" ref="0x40cc0c18"/>
        <function-ref name="set" scoped="" ref="0x40cc0978"/>
        <function-ref name="led0On" scoped="" ref="0x40cc0a58"/>
        <function-ref name="led2On" scoped="" ref="0x40cc0b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x40cc2578" loc="90:../../tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x40cc2578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40cc2750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x40cc5e80" loc="43:../../tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x40cc5e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40cdb070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40cdba08" loc="94:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40cdba08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40cdbbe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x40cdbd88" loc="95:../../tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Putchar" scoped="" ref="0x40cdbd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40cd8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40cdddf0" loc="42:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <component-ref qname="BootLedsAppC.Sensor1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x40cdddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40cdc448"/>
        <function-ref name="readDone" scoped="" ref="0x40cdc6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x40cdca28" loc="43:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <component-ref qname="BootLedsAppC.Sensor1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x40cdca28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40f157b8"/>
        <function-ref name="postBuffer" scoped="" ref="0x40f15068"/>
        <function-ref name="read" scoped="" ref="0x40f15538"/>
        <function-ref name="readDone" scoped="" ref="0x40f15d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x40cdda28" loc="41:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParC.nc">
      <component-ref qname="BootLedsAppC.Sensor1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x40cdda28"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x40cddc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x41440ec0" loc="48:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x41440ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4143e500"/>
        <function-ref name="readDone" scoped="" ref="0x4143e758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x4143eb20" loc="49:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x4143eb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x4143d200"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubResourceReadNow" ref="0x40d13758" loc="46:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubResourceReadNow" scoped="" ref="0x40d13758"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40d13930"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40d13a10"/>
        <function-ref name="request" scoped="" ref="0x40d13af0"/>
        <function-ref name="granted" scoped="" ref="0x40d13bd0"/>
        <function-ref name="isOwner" scoped="" ref="0x40d13cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40ce9c98" loc="38:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x40ce9c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40d182e8"/>
        <function-ref name="readDone" scoped="" ref="0x40d18540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40d17158" loc="39:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadNow" scoped="" ref="0x40d17158"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40d177a0"/>
        <function-ref name="readDone" scoped="" ref="0x40d17a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceReadNow" ref="0x40d16120" loc="40:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceReadNow" scoped="" ref="0x40d16120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40d162f8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40d163d8"/>
        <function-ref name="request" scoped="" ref="0x40d164b8"/>
        <function-ref name="granted" scoped="" ref="0x40d16598"/>
        <function-ref name="isOwner" scoped="" ref="0x40d16678"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x40d123f0" loc="48:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x40d123f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40d12a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x40d11010" loc="49:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x40d11010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40d111e8"/>
        <function-ref name="configureSingle" scoped="" ref="0x40d112c8"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x40d113a8"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x40d11488"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x40d11568"/>
        <function-ref name="configureMultiple" scoped="" ref="0x40d11648"/>
        <function-ref name="singleDataReady" scoped="" ref="0x40d11728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceRead" ref="0x40d16c08" loc="44:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRead" scoped="" ref="0x40d16c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40d16de0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40d16ec0"/>
        <function-ref name="request" scoped="" ref="0x40d13010"/>
        <function-ref name="granted" scoped="" ref="0x40d130f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40d131d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readDone" ref="0x40d24a68" loc="136:../../tos/chips/msp430/adc12/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readDone" scoped="" ref="0x40d24a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40d24c40"/>
        <function-ref name="runTask" scoped="" ref="0x40d24d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x41482690" loc="48:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x41482690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x41482868"/>
        <function-ref name="configure" scoped="" ref="0x41482948"/>
        <function-ref name="dataReady" scoped="" ref="0x41482a28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x41438d98" loc="47:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x41438d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x41482010"/>
        <function-ref name="configureSingle" scoped="" ref="0x414820f0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x414821d0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x414822b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x41482390"/>
        <function-ref name="configureMultiple" scoped="" ref="0x41482470"/>
        <function-ref name="singleDataReady" scoped="" ref="0x41482550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x41482b68" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x41482b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x41482d40"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x41482e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x41481070" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x41481070"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414816b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x41438700" loc="46:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x41438700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x414388d8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x414389b8"/>
        <function-ref name="request" scoped="" ref="0x41438a98"/>
        <function-ref name="granted" scoped="" ref="0x41438b78"/>
        <function-ref name="isOwner" scoped="" ref="0x41438c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x40d5cdc0" loc="42:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x40d5cdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40d5b010"/>
        <function-ref name="configure" scoped="" ref="0x40d5b0f0"/>
        <function-ref name="dataReady" scoped="" ref="0x40d5b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x40d5a010" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x40d5a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40d5a1e8"/>
        <function-ref name="stop" scoped="" ref="0x40d5a2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x40d5b728" loc="43:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x40d5b728"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x40d5b900"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x40d5b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x40d5c100" loc="41:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x40d5c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40d5c2d8"/>
        <function-ref name="configureSingle" scoped="" ref="0x40d5c3b8"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x40d5c498"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x40d5c578"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x40d5c658"/>
        <function-ref name="configureMultiple" scoped="" ref="0x40d5c738"/>
        <function-ref name="singleDataReady" scoped="" ref="0x40d5c818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40d5f530" loc="40:../../tos/chips/msp430/adc12/Msp430Adc12P.nc">
      <component-ref qname="Msp430Adc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40d5f530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40d5f708"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40d5f7e8"/>
        <function-ref name="request" scoped="" ref="0x40d5f8c8"/>
        <function-ref name="granted" scoped="" ref="0x40d5f9a8"/>
        <function-ref name="isOwner" scoped="" ref="0x40d5fa88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiChannel" ref="0x40d55100" loc="42:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MultiChannel" scoped="" ref="0x40d55100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40d552d8"/>
        <function-ref name="configure" scoped="" ref="0x40d553b8"/>
        <function-ref name="dataReady" scoped="" ref="0x40d55498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x40d4b3b8" loc="48:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x40d4b3b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x40d4b590"/>
        <function-ref name="getMCtl" scoped="" ref="0x40d4b670"/>
        <function-ref name="resetIFGs" scoped="" ref="0x40d4b750"/>
        <function-ref name="isBusy" scoped="" ref="0x40d4b830"/>
        <function-ref name="conversionDone" scoped="" ref="0x40d4b910"/>
        <function-ref name="getCtl1" scoped="" ref="0x40d4b9f0"/>
        <function-ref name="setMCtl" scoped="" ref="0x40d4bad0"/>
        <function-ref name="startConversion" scoped="" ref="0x40d4bbb0"/>
        <function-ref name="setCtl0" scoped="" ref="0x40d4bc90"/>
        <function-ref name="getMem" scoped="" ref="0x40d4bd70"/>
        <function-ref name="setIEFlags" scoped="" ref="0x40d4be50"/>
        <function-ref name="getIEFlags" scoped="" ref="0x40d53010"/>
        <function-ref name="stopConversion" scoped="" ref="0x40d530f0"/>
        <function-ref name="enableConversion" scoped="" ref="0x40d53250"/>
        <function-ref name="setCtl1" scoped="" ref="0x40d53330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port64" ref="0x40d72010" loc="58:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x40d72010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d721e8"/>
        <function-ref name="isInput" scoped="" ref="0x40d722c8"/>
        <function-ref name="setResistor" scoped="" ref="0x40d723a8"/>
        <function-ref name="toggle" scoped="" ref="0x40d72488"/>
        <function-ref name="isOutput" scoped="" ref="0x40d72568"/>
        <function-ref name="getResistor" scoped="" ref="0x40d72648"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d72728"/>
        <function-ref name="get" scoped="" ref="0x40d72808"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d728e8"/>
        <function-ref name="getRaw" scoped="" ref="0x40d729c8"/>
        <function-ref name="set" scoped="" ref="0x40d72aa8"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d72b88"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d72c68"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d72dc8"/>
        <function-ref name="clr" scoped="" ref="0x40d72ea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA1" ref="0x40d49168" loc="53:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x40d49168"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40d49340"/>
        <function-ref name="setEvent" scoped="" ref="0x40d49420"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40d49500"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40d495e0"/>
        <function-ref name="fired" scoped="" ref="0x40d496c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA0" ref="0x40d52288" loc="50:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x40d52288"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40d52460"/>
        <function-ref name="getControl" scoped="" ref="0x40d52540"/>
        <function-ref name="enableEvents" scoped="" ref="0x40d52620"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40d52700"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40d527e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x40d528c0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40d529a0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40d52a80"/>
        <function-ref name="setControl" scoped="" ref="0x40d52b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DMAExtension" ref="0x40d54238" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DMAExtension" scoped="" ref="0x40d54238"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40d54410"/>
        <function-ref name="stop" scoped="" ref="0x40d544f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port62" ref="0x40d76c88" loc="56:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x40d76c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d76e60"/>
        <function-ref name="isInput" scoped="" ref="0x40d74010"/>
        <function-ref name="setResistor" scoped="" ref="0x40d740f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d741d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d742b0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d74390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d74470"/>
        <function-ref name="get" scoped="" ref="0x40d74550"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d74630"/>
        <function-ref name="getRaw" scoped="" ref="0x40d74710"/>
        <function-ref name="set" scoped="" ref="0x40d747f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d748d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d749b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d74b10"/>
        <function-ref name="clr" scoped="" ref="0x40d74bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Overflow" ref="0x40d559f0" loc="43:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x40d559f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x40d55bc8"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x40d55ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port67" ref="0x40d6f4a8" loc="61:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x40d6f4a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d6f680"/>
        <function-ref name="isInput" scoped="" ref="0x40d6f760"/>
        <function-ref name="setResistor" scoped="" ref="0x40d6f840"/>
        <function-ref name="toggle" scoped="" ref="0x40d6f920"/>
        <function-ref name="isOutput" scoped="" ref="0x40d6fa00"/>
        <function-ref name="getResistor" scoped="" ref="0x40d6fae0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d6fbc0"/>
        <function-ref name="get" scoped="" ref="0x40d6fca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d6fd80"/>
        <function-ref name="getRaw" scoped="" ref="0x40d6fe60"/>
        <function-ref name="set" scoped="" ref="0x40d6e010"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d6e0f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d6e1d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d6e330"/>
        <function-ref name="clr" scoped="" ref="0x40d6e410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port60" ref="0x40d49918" loc="54:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x40d49918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d49b70"/>
        <function-ref name="isInput" scoped="" ref="0x40d49c50"/>
        <function-ref name="setResistor" scoped="" ref="0x40d49d30"/>
        <function-ref name="toggle" scoped="" ref="0x40d49e10"/>
        <function-ref name="isOutput" scoped="" ref="0x40d49ef0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d77010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d770f0"/>
        <function-ref name="get" scoped="" ref="0x40d771d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d772b0"/>
        <function-ref name="getRaw" scoped="" ref="0x40d77390"/>
        <function-ref name="set" scoped="" ref="0x40d77470"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d77550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d77630"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d77790"/>
        <function-ref name="clr" scoped="" ref="0x40d77870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40d5ab70" loc="40:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40d5ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40d5ad48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port65" ref="0x40d71178" loc="59:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x40d71178"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d71350"/>
        <function-ref name="isInput" scoped="" ref="0x40d71430"/>
        <function-ref name="setResistor" scoped="" ref="0x40d71510"/>
        <function-ref name="toggle" scoped="" ref="0x40d715f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d716d0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d717b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d71890"/>
        <function-ref name="get" scoped="" ref="0x40d71970"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d71a50"/>
        <function-ref name="getRaw" scoped="" ref="0x40d71b30"/>
        <function-ref name="set" scoped="" ref="0x40d71c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d71cf0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d71dd0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d70010"/>
        <function-ref name="clr" scoped="" ref="0x40d700f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerA" ref="0x40d53540" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x40d53540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40d53718"/>
        <function-ref name="setClockSource" scoped="" ref="0x40d537f8"/>
        <function-ref name="enableEvents" scoped="" ref="0x40d538d8"/>
        <function-ref name="get" scoped="" ref="0x40d539b8"/>
        <function-ref name="disableEvents" scoped="" ref="0x40d53a98"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40d53b78"/>
        <function-ref name="getMode" scoped="" ref="0x40d53c58"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40d53d38"/>
        <function-ref name="overflow" scoped="" ref="0x40d53e18"/>
        <function-ref name="setMode" scoped="" ref="0x40d53ef8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x40d52010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ADCArbiterInfo" ref="0x40d54790" loc="47:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCArbiterInfo" scoped="" ref="0x40d54790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40d54968"/>
        <function-ref name="userId" scoped="" ref="0x40d54a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlA1" ref="0x40d52dd8" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x40d52dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x40d4a010"/>
        <function-ref name="getControl" scoped="" ref="0x40d4a0f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x40d4a1d0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x40d4a2b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x40d4a390"/>
        <function-ref name="disableEvents" scoped="" ref="0x40d4a470"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x40d4a550"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x40d4a630"/>
        <function-ref name="setControl" scoped="" ref="0x40d4a710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SingleChannel" ref="0x40d57398" loc="41:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x40d57398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40d57570"/>
        <function-ref name="configureSingle" scoped="" ref="0x40d57650"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x40d57730"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x40d57810"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x40d578f0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x40d579d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x40d57ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port63" ref="0x40d74e48" loc="57:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x40d74e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d73050"/>
        <function-ref name="isInput" scoped="" ref="0x40d73130"/>
        <function-ref name="setResistor" scoped="" ref="0x40d73210"/>
        <function-ref name="toggle" scoped="" ref="0x40d732f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d733d0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d734b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d73590"/>
        <function-ref name="get" scoped="" ref="0x40d73670"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d73750"/>
        <function-ref name="getRaw" scoped="" ref="0x40d73830"/>
        <function-ref name="set" scoped="" ref="0x40d73910"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d739f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d73ad0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d73c30"/>
        <function-ref name="clr" scoped="" ref="0x40d73d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareA0" ref="0x40d4a958" loc="52:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x40d4a958"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x40d4ab30"/>
        <function-ref name="setEvent" scoped="" ref="0x40d4ac10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x40d4acf0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x40d4add0"/>
        <function-ref name="fired" scoped="" ref="0x40d4aeb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port61" ref="0x40d77ac8" loc="55:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x40d77ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d77ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40d77d80"/>
        <function-ref name="setResistor" scoped="" ref="0x40d77e60"/>
        <function-ref name="toggle" scoped="" ref="0x40d76010"/>
        <function-ref name="isOutput" scoped="" ref="0x40d760f0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d761d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d762b0"/>
        <function-ref name="get" scoped="" ref="0x40d76390"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d76470"/>
        <function-ref name="getRaw" scoped="" ref="0x40d76550"/>
        <function-ref name="set" scoped="" ref="0x40d76630"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d76710"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d767f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d76950"/>
        <function-ref name="clr" scoped="" ref="0x40d76a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Port66" ref="0x40d70348" loc="60:../../tos/chips/msp430/adc12/Msp430Adc12ImplP.nc">
      <component-ref qname="Msp430Adc12ImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x40d70348"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d70520"/>
        <function-ref name="isInput" scoped="" ref="0x40d70600"/>
        <function-ref name="setResistor" scoped="" ref="0x40d706e0"/>
        <function-ref name="toggle" scoped="" ref="0x40d707c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d708a0"/>
        <function-ref name="getResistor" scoped="" ref="0x40d70980"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d70a60"/>
        <function-ref name="get" scoped="" ref="0x40d70b40"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40d70c20"/>
        <function-ref name="getRaw" scoped="" ref="0x40d70d00"/>
        <function-ref name="set" scoped="" ref="0x40d70de0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40d70ec0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40d6f010"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40d6f170"/>
        <function-ref name="clr" scoped="" ref="0x40d6f250"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAdc12" ref="0x40dc4768" loc="46:../../tos/chips/msp430/adc12/HplAdc12P.nc">
      <component-ref qname="HplAdc12P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x40dc4768"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x40dc4940"/>
        <function-ref name="getMCtl" scoped="" ref="0x40dc4a20"/>
        <function-ref name="resetIFGs" scoped="" ref="0x40dc4b00"/>
        <function-ref name="isBusy" scoped="" ref="0x40dc4be0"/>
        <function-ref name="conversionDone" scoped="" ref="0x40dc4cc0"/>
        <function-ref name="getCtl1" scoped="" ref="0x40dc4da0"/>
        <function-ref name="setMCtl" scoped="" ref="0x40dc4e80"/>
        <function-ref name="startConversion" scoped="" ref="0x40dc1010"/>
        <function-ref name="setCtl0" scoped="" ref="0x40dc10f0"/>
        <function-ref name="getMem" scoped="" ref="0x40dc11d0"/>
        <function-ref name="setIEFlags" scoped="" ref="0x40dc12b0"/>
        <function-ref name="getIEFlags" scoped="" ref="0x40dc1390"/>
        <function-ref name="stopConversion" scoped="" ref="0x40dc1470"/>
        <function-ref name="enableConversion" scoped="" ref="0x40dc15d0"/>
        <function-ref name="setCtl1" scoped="" ref="0x40dc16b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40e395a8" loc="86:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x40e395a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40e39790"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40e39870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40e39e60" loc="89:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x40e39e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40e38070"/>
        <function-ref name="configure" scoped="" ref="0x40e38150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40dc2e20" loc="85:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40dc2e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e39050"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e39130"/>
        <function-ref name="request" scoped="" ref="0x40e39210"/>
        <function-ref name="granted" scoped="" ref="0x40e392f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40e393d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40e399b0" loc="87:../../tos/system/SimpleRoundRobinArbiterC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x40e399b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40e39b88"/>
        <function-ref name="userId" scoped="" ref="0x40e39c68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41470b08" loc="44:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x41470b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41470ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x41470e40" loc="45:../../tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RoundRobinQueue" scoped="" ref="0x41470e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x4146e050"/>
        <function-ref name="isEmpty" scoped="" ref="0x4146e130"/>
        <function-ref name="isEnqueued" scoped="" ref="0x4146e210"/>
        <function-ref name="dequeue" scoped="" ref="0x4146e2f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x4146d5a8" loc="52:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x4146d5a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x4146d790"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4146d870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x4146de70" loc="56:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x4146de70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x4146c070"/>
        <function-ref name="configure" scoped="" ref="0x4146c150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x4146c2b0" loc="57:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x4146c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x4146c488"/>
        <function-ref name="isEmpty" scoped="" ref="0x4146c568"/>
        <function-ref name="isEnqueued" scoped="" ref="0x4146c648"/>
        <function-ref name="dequeue" scoped="" ref="0x4146c728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4146ee58" loc="51:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x4146ee58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4146d050"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4146d130"/>
        <function-ref name="request" scoped="" ref="0x4146d210"/>
        <function-ref name="granted" scoped="" ref="0x4146d2f0"/>
        <function-ref name="isOwner" scoped="" ref="0x4146d3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x4146d9b0" loc="53:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x4146d9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4146db88"/>
        <function-ref name="userId" scoped="" ref="0x4146dc68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x4146c8a8" loc="68:../../tos/system/SimpleArbiterP.nc">
      <component-ref qname="Msp430Adc12P.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x4146c8a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4146ca80"/>
        <function-ref name="runTask" scoped="" ref="0x4146cb60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x40e28638" loc="55:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x40e28638"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40e28c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x40e2a9a0" loc="54:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x40e2a9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e2ab78"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e2ac58"/>
        <function-ref name="request" scoped="" ref="0x40e2ad38"/>
        <function-ref name="granted" scoped="" ref="0x40e2ae18"/>
        <function-ref name="isOwner" scoped="" ref="0x40e2aef8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x40e2de98" loc="52:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterP.nc">
      <component-ref qname="Msp430RefVoltArbiterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x40e2de98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e2a0c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e2a1a0"/>
        <function-ref name="request" scoped="" ref="0x40e2a280"/>
        <function-ref name="granted" scoped="" ref="0x40e2a360"/>
        <function-ref name="isOwner" scoped="" ref="0x40e2a440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAdc12" ref="0x40e242d0" loc="43:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplAdc12" scoped="" ref="0x40e242d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAdc12"/>
      </instance>
      <interface-functions>
        <function-ref name="getCtl0" scoped="" ref="0x40e244a8"/>
        <function-ref name="getMCtl" scoped="" ref="0x40e24588"/>
        <function-ref name="resetIFGs" scoped="" ref="0x40e24668"/>
        <function-ref name="isBusy" scoped="" ref="0x40e24748"/>
        <function-ref name="conversionDone" scoped="" ref="0x40e24828"/>
        <function-ref name="getCtl1" scoped="" ref="0x40e24908"/>
        <function-ref name="setMCtl" scoped="" ref="0x40e249e8"/>
        <function-ref name="startConversion" scoped="" ref="0x40e24ac8"/>
        <function-ref name="setCtl0" scoped="" ref="0x40e24ba8"/>
        <function-ref name="getMem" scoped="" ref="0x40e24c88"/>
        <function-ref name="setIEFlags" scoped="" ref="0x40e24d68"/>
        <function-ref name="getIEFlags" scoped="" ref="0x40e24e48"/>
        <function-ref name="stopConversion" scoped="" ref="0x40e24f28"/>
        <function-ref name="enableConversion" scoped="" ref="0x40e23098"/>
        <function-ref name="setCtl1" scoped="" ref="0x40e23178"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffTimer" ref="0x40e55888" loc="45:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffTimer" scoped="" ref="0x40e55888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e52388"/>
        <function-ref name="fired" scoped="" ref="0x40e53628"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e53d30"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e53ad8"/>
        <function-ref name="getdt" scoped="" ref="0x40e52838"/>
        <function-ref name="gett0" scoped="" ref="0x40e525e0"/>
        <function-ref name="isRunning" scoped="" ref="0x40e53880"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e55eb0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e52068"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e53150"/>
        <function-ref name="stop" scoped="" ref="0x40e533d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_2_5V" ref="0x40e27c68" loc="39:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x40e27c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40e27e40"/>
        <function-ref name="stopDone" scoped="" ref="0x40e27f20"/>
        <function-ref name="start" scoped="" ref="0x40e24018"/>
        <function-ref name="stop" scoped="" ref="0x40e240f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOffSettleTimer" ref="0x40e52c40" loc="46:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOffSettleTimer" scoped="" ref="0x40e52c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e4f730"/>
        <function-ref name="fired" scoped="" ref="0x40e519d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e4f0f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e51e80"/>
        <function-ref name="getdt" scoped="" ref="0x40e4fbe0"/>
        <function-ref name="gett0" scoped="" ref="0x40e4f988"/>
        <function-ref name="isRunning" scoped="" ref="0x40e51c28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e51278"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e4f410"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e514f8"/>
        <function-ref name="stop" scoped="" ref="0x40e51778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RefVolt_1_5V" ref="0x40e27590" loc="38:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x40e27590"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40e27768"/>
        <function-ref name="stopDone" scoped="" ref="0x40e27848"/>
        <function-ref name="start" scoped="" ref="0x40e27928"/>
        <function-ref name="stop" scoped="" ref="0x40e27a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SwitchOnTimer" ref="0x40e23468" loc="44:../../tos/chips/msp430/adc12/Msp430RefVoltGeneratorP.nc">
      <component-ref qname="Msp430RefVoltGeneratorP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SwitchOnTimer" scoped="" ref="0x40e23468"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e55010"/>
        <function-ref name="fired" scoped="" ref="0x40e56268"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e56970"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e56718"/>
        <function-ref name="getdt" scoped="" ref="0x40e554c0"/>
        <function-ref name="gett0" scoped="" ref="0x40e55268"/>
        <function-ref name="isRunning" scoped="" ref="0x40e564c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e23a90"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e56c90"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e23d10"/>
        <function-ref name="stop" scoped="" ref="0x40e56010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x40e88010" loc="43:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Config" scoped="" ref="0x40e88010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40e88658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_2_5V" ref="0x40e89430" loc="42:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_2_5V" scoped="" ref="0x40e89430"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40e89608"/>
        <function-ref name="stopDone" scoped="" ref="0x40e896e8"/>
        <function-ref name="start" scoped="" ref="0x40e897c8"/>
        <function-ref name="stop" scoped="" ref="0x40e898a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcResource" ref="0x40e8a570" loc="40:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcResource" scoped="" ref="0x40e8a570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e8a748"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e8a828"/>
        <function-ref name="request" scoped="" ref="0x40e8a908"/>
        <function-ref name="granted" scoped="" ref="0x40e8a9e8"/>
        <function-ref name="isOwner" scoped="" ref="0x40e8aac8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientResource" ref="0x40e25a50" loc="38:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ClientResource" scoped="" ref="0x40e25a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e25c28"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e25d08"/>
        <function-ref name="request" scoped="" ref="0x40e25de8"/>
        <function-ref name="granted" scoped="" ref="0x40e25ec8"/>
        <function-ref name="isOwner" scoped="" ref="0x40e8a010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="switchOff" ref="0x40e865c0" loc="52:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="switchOff" scoped="" ref="0x40e865c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e86798"/>
        <function-ref name="runTask" scoped="" ref="0x40e86878"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RefVolt_1_5V" ref="0x40e8ad28" loc="41:../../tos/chips/msp430/adc12/Msp430RefVoltArbiterImplP.nc">
      <component-ref qname="Msp430RefVoltArbiterImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RefVolt_1_5V" scoped="" ref="0x40e8ad28"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40e8af00"/>
        <function-ref name="stopDone" scoped="" ref="0x40e89010"/>
        <function-ref name="start" scoped="" ref="0x40e890f0"/>
        <function-ref name="stop" scoped="" ref="0x40e891d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40e58b78" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOnDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40e58b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e9e6a8"/>
        <function-ref name="fired" scoped="" ref="0x40e57938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e9e068"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e57de8"/>
        <function-ref name="getdt" scoped="" ref="0x40e9eb58"/>
        <function-ref name="gett0" scoped="" ref="0x40e9e900"/>
        <function-ref name="isRunning" scoped="" ref="0x40e57b90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e571e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e9e388"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e57460"/>
        <function-ref name="stop" scoped="" ref="0x40e576e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40e9d9b8" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffDelayTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40e9d9b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e9b4c8"/>
        <function-ref name="fired" scoped="" ref="0x40e9c768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e9ce70"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e9cc18"/>
        <function-ref name="getdt" scoped="" ref="0x40e9b978"/>
        <function-ref name="gett0" scoped="" ref="0x40e9b720"/>
        <function-ref name="isRunning" scoped="" ref="0x40e9c9c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e9c010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e9b1a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e9c290"/>
        <function-ref name="stop" scoped="" ref="0x40e9c510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40e9a7d0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="Msp430RefVoltArbiterP.SwitchOffSettleTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40e9a7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e97330"/>
        <function-ref name="fired" scoped="" ref="0x40e98570"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40e98c78"/>
        <function-ref name="isOneShot" scoped="" ref="0x40e98a20"/>
        <function-ref name="getdt" scoped="" ref="0x40e977e0"/>
        <function-ref name="gett0" scoped="" ref="0x40e97588"/>
        <function-ref name="isRunning" scoped="" ref="0x40e987c8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40e9adf8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40e97010"/>
        <function-ref name="startOneShot" scoped="" ref="0x40e98098"/>
        <function-ref name="stop" scoped="" ref="0x40e98318"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x4147a3c0" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x4147a3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x4147aa08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x4147ad28" loc="45:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x4147ad28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x41478390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x4143b460" loc="49:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x4143b460"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x4143baa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x4143dd78" loc="48:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x4143dd78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x4143cb10"/>
        <function-ref name="postBuffer" scoped="" ref="0x4143c3c0"/>
        <function-ref name="read" scoped="" ref="0x4143c890"/>
        <function-ref name="readDone" scoped="" ref="0x4143b098"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Adc12SingleChannel" ref="0x40eaeae8" loc="23:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x40eaeae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40eaecc0"/>
        <function-ref name="configureSingle" scoped="" ref="0x40eaeda0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x40eaee80"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x40ead010"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x40ead0f0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x40ead1d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x40ead2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x40eafe58" loc="22:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x40eafe58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40eae4d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x40eb02d0" loc="20:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x40eb02d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40eaf068"/>
        <function-ref name="postBuffer" scoped="" ref="0x40eb08f8"/>
        <function-ref name="read" scoped="" ref="0x40eb0dc8"/>
        <function-ref name="readDone" scoped="" ref="0x40eaf5d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40ead750" loc="24:../../tos/chips/msp430/adc12/WireAdcStreamP.nc">
      <component-ref qname="WireAdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40ead750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ead928"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40eada08"/>
        <function-ref name="request" scoped="" ref="0x40eadae8"/>
        <function-ref name="granted" scoped="" ref="0x40eadbc8"/>
        <function-ref name="isOwner" scoped="" ref="0x40eadca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bufferDone" ref="0x40ec1a68" loc="156:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="bufferDone" scoped="" ref="0x40ec1a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ec1c40"/>
        <function-ref name="runTask" scoped="" ref="0x40ec1d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamDone" ref="0x40ec9b98" loc="119:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamDone" scoped="" ref="0x40ec9b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ec9d70"/>
        <function-ref name="runTask" scoped="" ref="0x40ec9e50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readStreamFail" ref="0x40ec5390" loc="135:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readStreamFail" scoped="" ref="0x40ec5390"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ec5568"/>
        <function-ref name="runTask" scoped="" ref="0x40ec5648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40ed8410" loc="54:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40ed8410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ed78b8"/>
        <function-ref name="fired" scoped="" ref="0x40ed7088"/>
        <function-ref name="startAt" scoped="" ref="0x40ed7578"/>
        <function-ref name="isRunning" scoped="" ref="0x40ed7300"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ed7b30"/>
        <function-ref name="start" scoped="" ref="0x40ed8b60"/>
        <function-ref name="stop" scoped="" ref="0x40ed8e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40eab8a0" loc="48:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40eab8a0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x40360c58"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x40360c58"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40eaba78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x40ea6968" loc="53:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x40ea6968"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40ed8010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SingleChannel" ref="0x40ea7b08" loc="52:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SingleChannel" scoped="" ref="0x40ea7b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40ea7ce0"/>
        <function-ref name="configureSingle" scoped="" ref="0x40ea7dc0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x40ea7ea0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x40ea6010"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x40ea60f0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x40ea61d0"/>
        <function-ref name="singleDataReady" scoped="" ref="0x40ea62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x40ea8028" loc="49:../../tos/chips/msp430/adc12/AdcStreamP.nc">
      <component-ref qname="AdcStreamP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x40ea8028"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40ea8da0"/>
        <function-ref name="postBuffer" scoped="" ref="0x40ea8650"/>
        <function-ref name="read" scoped="" ref="0x40ea8b20"/>
        <function-ref name="readDone" scoped="" ref="0x40ea7348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40f0a608" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x40f0a608"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40f09ab8"/>
        <function-ref name="fired" scoped="" ref="0x40f09288"/>
        <function-ref name="startAt" scoped="" ref="0x40f09778"/>
        <function-ref name="isRunning" scoped="" ref="0x40f09500"/>
        <function-ref name="getAlarm" scoped="" ref="0x40f09d30"/>
        <function-ref name="start" scoped="" ref="0x40f0ad58"/>
        <function-ref name="stop" scoped="" ref="0x40f09010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40f0a1b0" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="WireAdcStreamP.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x40f0a1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40f0a388"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x41491650" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x41491650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x41490b10"/>
        <function-ref name="fired" scoped="" ref="0x414902e0"/>
        <function-ref name="startAt" scoped="" ref="0x414907d0"/>
        <function-ref name="isRunning" scoped="" ref="0x41490558"/>
        <function-ref name="getAlarm" scoped="" ref="0x41490d88"/>
        <function-ref name="start" scoped="" ref="0x41491da0"/>
        <function-ref name="stop" scoped="" ref="0x41490068"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x414911f8" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x414911f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x414913d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x414846b0" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x414846b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x41484888"/>
        <function-ref name="setEvent" scoped="" ref="0x41484968"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x41484a48"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x41484b28"/>
        <function-ref name="fired" scoped="" ref="0x41484c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x41486010" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x41486010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x414861e8"/>
        <function-ref name="setClockSource" scoped="" ref="0x414862c8"/>
        <function-ref name="enableEvents" scoped="" ref="0x414863a8"/>
        <function-ref name="get" scoped="" ref="0x41486488"/>
        <function-ref name="disableEvents" scoped="" ref="0x41486568"/>
        <function-ref name="clearOverflow" scoped="" ref="0x41486648"/>
        <function-ref name="getMode" scoped="" ref="0x41486728"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x41486808"/>
        <function-ref name="overflow" scoped="" ref="0x414868e8"/>
        <function-ref name="setMode" scoped="" ref="0x414869c8"/>
        <function-ref name="setInputDivider" scoped="" ref="0x41486aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x41486c08" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x41486c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x41486de0"/>
        <function-ref name="getControl" scoped="" ref="0x41486ec0"/>
        <function-ref name="enableEvents" scoped="" ref="0x41484010"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x414840f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x414841d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x414842b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x41484390"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x41484470"/>
        <function-ref name="setControl" scoped="" ref="0x41484550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x414cb030" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x414cb030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x414cb208"/>
        <function-ref name="setEvent" scoped="" ref="0x414cb2e8"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x414cb3c8"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x414cb4a8"/>
        <function-ref name="fired" scoped="" ref="0x414cb588"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x414cd988" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x414cd988"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x414cdb60"/>
        <function-ref name="setClockSource" scoped="" ref="0x414cdc40"/>
        <function-ref name="enableEvents" scoped="" ref="0x414cdd20"/>
        <function-ref name="get" scoped="" ref="0x414cde00"/>
        <function-ref name="disableEvents" scoped="" ref="0x414cdee0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x414cc010"/>
        <function-ref name="getMode" scoped="" ref="0x414cc0f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x414cc1d0"/>
        <function-ref name="overflow" scoped="" ref="0x414cc2b0"/>
        <function-ref name="setMode" scoped="" ref="0x414cc390"/>
        <function-ref name="setInputDivider" scoped="" ref="0x414cc470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x414ce010" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x414ce010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x414cd4e0"/>
        <function-ref name="fired" scoped="" ref="0x414cec78"/>
        <function-ref name="startAt" scoped="" ref="0x414cd1a0"/>
        <function-ref name="isRunning" scoped="" ref="0x414ceef0"/>
        <function-ref name="getAlarm" scoped="" ref="0x414cd758"/>
        <function-ref name="start" scoped="" ref="0x414ce760"/>
        <function-ref name="stop" scoped="" ref="0x414cea00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41483b68" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x41483b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41483d40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x414cc5d0" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x414cc5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x414cc7a8"/>
        <function-ref name="getControl" scoped="" ref="0x414cc888"/>
        <function-ref name="enableEvents" scoped="" ref="0x414cc968"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x414cca48"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x414ccb28"/>
        <function-ref name="disableEvents" scoped="" ref="0x414ccc08"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x414ccce8"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x414ccdc8"/>
        <function-ref name="setControl" scoped="" ref="0x414ccea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x4148e0e8" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x4148e0e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4148d5c8"/>
        <function-ref name="fired" scoped="" ref="0x4148ed50"/>
        <function-ref name="startAt" scoped="" ref="0x4148d288"/>
        <function-ref name="isRunning" scoped="" ref="0x4148d010"/>
        <function-ref name="getAlarm" scoped="" ref="0x4148d840"/>
        <function-ref name="start" scoped="" ref="0x4148e838"/>
        <function-ref name="stop" scoped="" ref="0x4148ead8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x4148cde0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x4148cde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x403695b0"/>
            <typename><typedef-ref name="T32khz" ref="0x40369778"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x41489350"/>
        <function-ref name="fired" scoped="" ref="0x4148aa88"/>
        <function-ref name="startAt" scoped="" ref="0x41489010"/>
        <function-ref name="isRunning" scoped="" ref="0x4148ad00"/>
        <function-ref name="getAlarm" scoped="" ref="0x414895c8"/>
        <function-ref name="start" scoped="" ref="0x4148a570"/>
        <function-ref name="stop" scoped="" ref="0x4148a810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x4148db90" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="WireAdcStreamP.Alarm.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x4148db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4148c308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4148c7f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4148c580"/>
        <function-ref name="overflow" scoped="" ref="0x4148ca70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40f24650" loc="26:../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Service" scoped="" ref="0x40f24650"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40f22440"/>
        <function-ref name="postBuffer" scoped="" ref="0x40f24c88"/>
        <function-ref name="read" scoped="" ref="0x40f221b0"/>
        <function-ref name="readDone" scoped="" ref="0x40f229c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x40f07e98" loc="24:../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x40f07e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40f06c58"/>
        <function-ref name="postBuffer" scoped="" ref="0x40f064e8"/>
        <function-ref name="read" scoped="" ref="0x40f069c8"/>
        <function-ref name="readDone" scoped="" ref="0x40f241f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40f22d40" loc="27:../../tos/system/ArbitratedReadStreamC.nc">
      <component-ref qname="WireAdcStreamP.ArbitrateReadStream"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40f22d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40f22f28"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40f21018"/>
        <function-ref name="request" scoped="" ref="0x40f210f8"/>
        <function-ref name="granted" scoped="" ref="0x40f211d8"/>
        <function-ref name="isOwner" scoped="" ref="0x40f212b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x41498078" loc="48:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x41498078"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x41498250"/>
        <function-ref name="configure" scoped="" ref="0x41498330"/>
        <function-ref name="dataReady" scoped="" ref="0x41498410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x4149a810" loc="47:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x4149a810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4149a9e8"/>
        <function-ref name="configureSingle" scoped="" ref="0x4149aac8"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x4149aba8"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x4149ac88"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x4149ad68"/>
        <function-ref name="configureMultiple" scoped="" ref="0x4149ae48"/>
        <function-ref name="singleDataReady" scoped="" ref="0x4149af28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x41498550" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x41498550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x41498728"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x41498808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x41498a38" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x41498a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414970a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4149a178" loc="46:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x4149a178"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4149a350"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4149a430"/>
        <function-ref name="request" scoped="" ref="0x4149a510"/>
        <function-ref name="granted" scoped="" ref="0x4149a5f0"/>
        <function-ref name="isOwner" scoped="" ref="0x4149a6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x414a9818" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x414a9818"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414a9e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x414f31b8" loc="45:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor1.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x414f31b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414f3800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x40f17a40" loc="44:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParP.nc">
      <component-ref qname="HamamatsuS1087ParP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x40f17a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40f140a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x40f17498" loc="43:../../tos/platforms/telosa/chips/s1087/HamamatsuS1087ParP.nc">
      <component-ref qname="HamamatsuS1087ParP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x40f17498"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x40f17670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40f43100" loc="42:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="BootLedsAppC.Sensor2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x40f43100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40f43728"/>
        <function-ref name="readDone" scoped="" ref="0x40f43980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x40f43d08" loc="43:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="BootLedsAppC.Sensor2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x40f43d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x40f39aa0"/>
        <function-ref name="postBuffer" scoped="" ref="0x40f39350"/>
        <function-ref name="read" scoped="" ref="0x40f39820"/>
        <function-ref name="readDone" scoped="" ref="0x40f32048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x40f44d20" loc="41:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrC.nc">
      <component-ref qname="BootLedsAppC.Sensor2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x40f44d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x40f44ef8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x414ee2c8" loc="48:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Read" scoped="" ref="0x414ee2c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x414ee8f0"/>
        <function-ref name="readDone" scoped="" ref="0x414eeb48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x414eef10" loc="49:../../tos/chips/msp430/adc12/AdcReadClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x414eef10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414ed578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x414e79b0" loc="48:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x414e79b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x414e7b88"/>
        <function-ref name="configure" scoped="" ref="0x414e7c68"/>
        <function-ref name="dataReady" scoped="" ref="0x414e7d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x414e7158" loc="47:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414e7158"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x414e7330"/>
        <function-ref name="configureSingle" scoped="" ref="0x414e7410"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x414e74f0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x414e75d0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x414e76b0"/>
        <function-ref name="configureMultiple" scoped="" ref="0x414e7790"/>
        <function-ref name="singleDataReady" scoped="" ref="0x414e7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x414e7e88" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x414e7e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x414e5070"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x414e5150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x414e5380" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x414e5380"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414e59c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x414e8ab0" loc="46:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x414e8ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x414e8c88"/>
        <function-ref name="immediateRequest" scoped="" ref="0x414e8d68"/>
        <function-ref name="request" scoped="" ref="0x414e8e48"/>
        <function-ref name="granted" scoped="" ref="0x414e8f28"/>
        <function-ref name="isOwner" scoped="" ref="0x414e7018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x414dfd68" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x414dfd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414de3e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x414de700" loc="45:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x414de700"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414ded48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x414ea7f8" loc="49:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x414ea7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414eae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadStream" ref="0x414ec120" loc="48:../../tos/chips/msp430/adc12/AdcReadStreamClientC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadStream" scoped="" ref="0x414ec120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadStream"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="bufferDone" scoped="" ref="0x414ece98"/>
        <function-ref name="postBuffer" scoped="" ref="0x414ec748"/>
        <function-ref name="read" scoped="" ref="0x414ecc18"/>
        <function-ref name="readDone" scoped="" ref="0x414ea430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12MultiChannel" ref="0x414d8790" loc="48:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12MultiChannel" scoped="" ref="0x414d8790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x414d8968"/>
        <function-ref name="configure" scoped="" ref="0x414d8a48"/>
        <function-ref name="dataReady" scoped="" ref="0x414d8b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12SingleChannel" ref="0x414d9f20" loc="47:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12SingleChannel" scoped="" ref="0x414d9f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x414d8110"/>
        <function-ref name="configureSingle" scoped="" ref="0x414d81f0"/>
        <function-ref name="configureSingleRepeat" scoped="" ref="0x414d82d0"/>
        <function-ref name="configureMultipleRepeat" scoped="" ref="0x414d83b0"/>
        <function-ref name="multipleDataReady" scoped="" ref="0x414d8490"/>
        <function-ref name="configureMultiple" scoped="" ref="0x414d8570"/>
        <function-ref name="singleDataReady" scoped="" ref="0x414d8650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Adc12Overflow" ref="0x414d8c68" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Adc12Overflow" scoped="" ref="0x414d8c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
      </instance>
      <interface-functions>
        <function-ref name="memOverflow" scoped="" ref="0x414d8e40"/>
        <function-ref name="conversionTimeOverflow" scoped="" ref="0x414d8f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcConfigure" ref="0x414d7168" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x414d7168"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414d77b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x414d9888" loc="46:../../tos/chips/msp430/adc12/Msp430Adc12ClientAutoRVGC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x414d9888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x414d9a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x414d9b40"/>
        <function-ref name="request" scoped="" ref="0x414d9c20"/>
        <function-ref name="granted" scoped="" ref="0x414d9d00"/>
        <function-ref name="isOwner" scoped="" ref="0x414d9de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfSub" ref="0x414cf010" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfSub" scoped="" ref="0x414cf010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x414cf658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfUp" ref="0x414cf978" loc="45:../../tos/chips/msp430/adc12/Msp430Adc12ConfAlertC.nc">
      <component-ref qname="BootLedsAppC.Sensor2.AdcReadStreamClientC.Msp430AdcClient.Msp430Adc12ConfAlertC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ConfUp" scoped="" ref="0x414cf978"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x4151b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AdcConfigure" ref="0x40f3ae30" loc="44:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <component-ref qname="HamamatsuS10871TsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AdcConfigure" scoped="" ref="0x40f3ae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AdcConfigure"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
              <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
            </type-qualified>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getConfiguration" scoped="" ref="0x40f37488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DeviceMetadata" ref="0x40f3a888" loc="43:../../tos/platforms/telosa/chips/s10871/HamamatsuS10871TsrP.nc">
      <component-ref qname="HamamatsuS10871TsrP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DeviceMetadata" scoped="" ref="0x40f3a888"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x40f3aa60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HumidityMetadata" ref="0x4107fc58" loc="49:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="BootLedsAppC.Sensor3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumidityMetadata" scoped="" ref="0x4107fc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x4107fe30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x4107f0c0" loc="48:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="BootLedsAppC.Sensor3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Humidity" scoped="" ref="0x4107f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4107f6e8"/>
        <function-ref name="readDone" scoped="" ref="0x4107f940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TemperatureMetadata" ref="0x41080ca8" loc="47:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="BootLedsAppC.Sensor3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TemperatureMetadata" scoped="" ref="0x41080ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x41080e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x41080110" loc="46:../../tos/platforms/telosa/chips/sht11/SensirionSht11C.nc">
      <component-ref qname="BootLedsAppC.Sensor3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Temperature" scoped="" ref="0x41080110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x41080738"/>
        <function-ref name="readDone" scoped="" ref="0x41080990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Hum" ref="0x41512278" loc="54:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Sht11Hum" scoped="" ref="0x41512278"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x41512450"/>
        <function-ref name="readStatusReg" scoped="" ref="0x41512530"/>
        <function-ref name="measureHumidity" scoped="" ref="0x41512610"/>
        <function-ref name="measureTemperature" scoped="" ref="0x415126f0"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x415127d0"/>
        <function-ref name="reset" scoped="" ref="0x415128b0"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x41512990"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x41512a70"/>
        <function-ref name="resetDone" scoped="" ref="0x41512b50"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x41512c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HumidityMetadata" ref="0x415169b8" loc="48:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumidityMetadata" scoped="" ref="0x415169b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x41516b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Humidity" ref="0x41516da0" loc="49:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Humidity" scoped="" ref="0x41516da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x415153e0"/>
        <function-ref name="readDone" scoped="" ref="0x41515638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TemperatureMetadata" ref="0x41518a10" loc="46:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TemperatureMetadata" scoped="" ref="0x41518a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="DeviceMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="getSignificantBits" scoped="" ref="0x41518be8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TempResource" ref="0x41515950" loc="51:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TempResource" scoped="" ref="0x41515950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x41515b28"/>
        <function-ref name="immediateRequest" scoped="" ref="0x41515c08"/>
        <function-ref name="request" scoped="" ref="0x41515ce8"/>
        <function-ref name="granted" scoped="" ref="0x41515dc8"/>
        <function-ref name="isOwner" scoped="" ref="0x41515ea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Sht11Temp" ref="0x41514728" loc="53:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Sht11Temp" scoped="" ref="0x41514728"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x41514900"/>
        <function-ref name="readStatusReg" scoped="" ref="0x415149e0"/>
        <function-ref name="measureHumidity" scoped="" ref="0x41514ac0"/>
        <function-ref name="measureTemperature" scoped="" ref="0x41514ba0"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x41514c80"/>
        <function-ref name="reset" scoped="" ref="0x41514d60"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x41514e40"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x41514f20"/>
        <function-ref name="resetDone" scoped="" ref="0x41512018"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x415120f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HumResource" ref="0x41514050" loc="52:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HumResource" scoped="" ref="0x41514050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x41514228"/>
        <function-ref name="immediateRequest" scoped="" ref="0x41514308"/>
        <function-ref name="request" scoped="" ref="0x415143e8"/>
        <function-ref name="granted" scoped="" ref="0x415144c8"/>
        <function-ref name="isOwner" scoped="" ref="0x415145a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Temperature" ref="0x41518df8" loc="47:../../tos/chips/sht11/SensirionSht11ReaderP.nc">
      <component-ref qname="BootLedsAppC.Sensor3.SensirionSht11ReaderP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Temperature" scoped="" ref="0x41518df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x41516448"/>
        <function-ref name="readDone" scoped="" ref="0x415166a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x40f6e100" loc="45:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SensirionSht11" scoped="" ref="0x40f6e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x40f6e2d8"/>
        <function-ref name="readStatusReg" scoped="" ref="0x40f6e3b8"/>
        <function-ref name="measureHumidity" scoped="" ref="0x40f6e498"/>
        <function-ref name="measureTemperature" scoped="" ref="0x40f6e578"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x40f6e658"/>
        <function-ref name="reset" scoped="" ref="0x40f6e738"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x40f6e818"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x40f6e8f8"/>
        <function-ref name="resetDone" scoped="" ref="0x40f6e9d8"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x40f6eab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40f6f5f8" loc="44:../../tos/platforms/telosa/chips/sht11/HalSensirionSht11C.nc">
      <component-ref qname="HalSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40f6f5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40f6f7d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40f6f8b0"/>
        <function-ref name="request" scoped="" ref="0x40f6f990"/>
        <function-ref name="granted" scoped="" ref="0x40f6fa70"/>
        <function-ref name="isOwner" scoped="" ref="0x40f6fb50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptDATA" ref="0x40fcdcd0" loc="58:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptDATA" scoped="" ref="0x40fcdcd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40fcdea8"/>
        <function-ref name="disable" scoped="" ref="0x40fcc010"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x40fcc0f0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x40fcc1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="readSensor" ref="0x40fc96a8" loc="102:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="readSensor" scoped="" ref="0x40fc96a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fc9880"/>
        <function-ref name="runTask" scoped="" ref="0x40fc9960"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalStatusDone" ref="0x40fc9270" loc="103:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalStatusDone" scoped="" ref="0x40fc9270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fc9448"/>
        <function-ref name="runTask" scoped="" ref="0x40fc9528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CLOCK" ref="0x40fcd358" loc="57:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CLOCK" scoped="" ref="0x40fcd358"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fcd530"/>
        <function-ref name="isInput" scoped="" ref="0x40fcd610"/>
        <function-ref name="toggle" scoped="" ref="0x40fcd6f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40fcd7d0"/>
        <function-ref name="get" scoped="" ref="0x40fcd8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fcd990"/>
        <function-ref name="set" scoped="" ref="0x40fcda70"/>
        <function-ref name="clr" scoped="" ref="0x40fcdb50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SensirionSht11" ref="0x40f6be78" loc="54:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SensirionSht11" scoped="" ref="0x40f6be78"/></type-interface>
      <instance>
        <interfacedef-ref qname="SensirionSht11"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="measureHumidityDone" scoped="" ref="0x40fce070"/>
        <function-ref name="readStatusReg" scoped="" ref="0x40fce150"/>
        <function-ref name="measureHumidity" scoped="" ref="0x40fce230"/>
        <function-ref name="measureTemperature" scoped="" ref="0x40fce310"/>
        <function-ref name="writeStatusReg" scoped="" ref="0x40fce3f0"/>
        <function-ref name="reset" scoped="" ref="0x40fce4d0"/>
        <function-ref name="writeStatusRegDone" scoped="" ref="0x40fce5b0"/>
        <function-ref name="readStatusRegDone" scoped="" ref="0x40fce690"/>
        <function-ref name="resetDone" scoped="" ref="0x40fce770"/>
        <function-ref name="measureTemperatureDone" scoped="" ref="0x40fce850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x40fce9d0" loc="56:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x40fce9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fceba8"/>
        <function-ref name="isInput" scoped="" ref="0x40fcec88"/>
        <function-ref name="toggle" scoped="" ref="0x40fced68"/>
        <function-ref name="isOutput" scoped="" ref="0x40fcee48"/>
        <function-ref name="get" scoped="" ref="0x40fcef28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fcd018"/>
        <function-ref name="set" scoped="" ref="0x40fcd0f8"/>
        <function-ref name="clr" scoped="" ref="0x40fcd1d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40fca5d8" loc="62:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x40fca5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40fca7b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40fca890"/>
        <function-ref name="led1On" scoped="" ref="0x40fca970"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40fcaa50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40fcab30"/>
        <function-ref name="get" scoped="" ref="0x40fcac10"/>
        <function-ref name="led1Off" scoped="" ref="0x40fcacf0"/>
        <function-ref name="led2On" scoped="" ref="0x40fc90f0"/>
        <function-ref name="set" scoped="" ref="0x40fcaeb0"/>
        <function-ref name="led2Off" scoped="" ref="0x40fcadd0"/>
        <function-ref name="led0On" scoped="" ref="0x40fc9010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40fcc3c0" loc="60:../../tos/chips/sht11/SensirionSht11LogicP.nc">
      <component-ref qname="HalSensirionSht11C.SensirionSht11LogicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40fcc3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40fcbec8"/>
        <function-ref name="fired" scoped="" ref="0x40fcb180"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40fcb888"/>
        <function-ref name="isOneShot" scoped="" ref="0x40fcb630"/>
        <function-ref name="getdt" scoped="" ref="0x40fca3a8"/>
        <function-ref name="gett0" scoped="" ref="0x40fca150"/>
        <function-ref name="isRunning" scoped="" ref="0x40fcb3d8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40fcc9e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40fcbba8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40fccc68"/>
        <function-ref name="stop" scoped="" ref="0x40fccee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptDATA" ref="0x40fc2540" loc="47:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptDATA" scoped="" ref="0x40fc2540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x40fc2718"/>
        <function-ref name="disable" scoped="" ref="0x40fc27f8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x40fc28d8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x40fc29b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCK" ref="0x40fc3a88" loc="46:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCK" scoped="" ref="0x40fc3a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fc3c60"/>
        <function-ref name="isInput" scoped="" ref="0x40fc3d40"/>
        <function-ref name="toggle" scoped="" ref="0x40fc3e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40fc3f00"/>
        <function-ref name="get" scoped="" ref="0x40fc2010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fc20f0"/>
        <function-ref name="set" scoped="" ref="0x40fc21d0"/>
        <function-ref name="clr" scoped="" ref="0x40fc22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DATA" ref="0x40fc3090" loc="45:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x40fc3090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fc3268"/>
        <function-ref name="isInput" scoped="" ref="0x40fc3348"/>
        <function-ref name="toggle" scoped="" ref="0x40fc3428"/>
        <function-ref name="isOutput" scoped="" ref="0x40fc3508"/>
        <function-ref name="get" scoped="" ref="0x40fc35e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fc36c8"/>
        <function-ref name="set" scoped="" ref="0x40fc37a8"/>
        <function-ref name="clr" scoped="" ref="0x40fc3888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40fc68e8" loc="44:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11C.nc">
      <component-ref qname="HplSensirionSht11C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x40fc68e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40fc6ac0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40fc6ba0"/>
        <function-ref name="request" scoped="" ref="0x40fc6c80"/>
        <function-ref name="granted" scoped="" ref="0x40fc6d60"/>
        <function-ref name="isOwner" scoped="" ref="0x40fc6e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x40fc1e90" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.DATAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x40fc1e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fc0080"/>
        <function-ref name="isInput" scoped="" ref="0x40fc0160"/>
        <function-ref name="setResistor" scoped="" ref="0x40fc0240"/>
        <function-ref name="toggle" scoped="" ref="0x40fc0320"/>
        <function-ref name="isOutput" scoped="" ref="0x40fc0400"/>
        <function-ref name="getResistor" scoped="" ref="0x40fc04e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fc05c0"/>
        <function-ref name="get" scoped="" ref="0x40fc06a0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40fc0780"/>
        <function-ref name="getRaw" scoped="" ref="0x40fc0860"/>
        <function-ref name="set" scoped="" ref="0x40fc0940"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40fc0a20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40fc0b00"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40fc0c60"/>
        <function-ref name="clr" scoped="" ref="0x40fc0d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x40fc1518" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.DATAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x40fc1518"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fc16f0"/>
        <function-ref name="isInput" scoped="" ref="0x40fc17d0"/>
        <function-ref name="toggle" scoped="" ref="0x40fc18b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40fc1990"/>
        <function-ref name="get" scoped="" ref="0x40fc1a70"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fc1b50"/>
        <function-ref name="set" scoped="" ref="0x40fc1c30"/>
        <function-ref name="clr" scoped="" ref="0x40fc1d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x40fbe6d0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.SCKM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x40fbe6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fbe8a8"/>
        <function-ref name="isInput" scoped="" ref="0x40fbe988"/>
        <function-ref name="setResistor" scoped="" ref="0x40fbea68"/>
        <function-ref name="toggle" scoped="" ref="0x40fbeb48"/>
        <function-ref name="isOutput" scoped="" ref="0x40fbec28"/>
        <function-ref name="getResistor" scoped="" ref="0x40fbed08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fbede8"/>
        <function-ref name="get" scoped="" ref="0x40fbeec8"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40fbd010"/>
        <function-ref name="getRaw" scoped="" ref="0x40fbd0f0"/>
        <function-ref name="set" scoped="" ref="0x40fbd1d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40fbd2b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40fbd390"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40fbd4f0"/>
        <function-ref name="clr" scoped="" ref="0x40fbd5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x40fbfcc0" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.SCKM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x40fbfcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fbfe98"/>
        <function-ref name="isInput" scoped="" ref="0x40fbe010"/>
        <function-ref name="toggle" scoped="" ref="0x40fbe0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40fbe1d0"/>
        <function-ref name="get" scoped="" ref="0x40fbe2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fbe390"/>
        <function-ref name="set" scoped="" ref="0x40fbe470"/>
        <function-ref name="clr" scoped="" ref="0x40fbe550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x40fbce90" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.PWRM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x40fbce90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fbb080"/>
        <function-ref name="isInput" scoped="" ref="0x40fbb160"/>
        <function-ref name="setResistor" scoped="" ref="0x40fbb240"/>
        <function-ref name="toggle" scoped="" ref="0x40fbb320"/>
        <function-ref name="isOutput" scoped="" ref="0x40fbb400"/>
        <function-ref name="getResistor" scoped="" ref="0x40fbb4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fbb5c0"/>
        <function-ref name="get" scoped="" ref="0x40fbb6a0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x40fbb780"/>
        <function-ref name="getRaw" scoped="" ref="0x40fbb860"/>
        <function-ref name="set" scoped="" ref="0x40fbb940"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x40fbba20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x40fbbb00"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x40fbbc60"/>
        <function-ref name="clr" scoped="" ref="0x40fbbd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x40fbc518" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplSensirionSht11C.PWRM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x40fbc518"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fbc6f0"/>
        <function-ref name="isInput" scoped="" ref="0x40fbc7d0"/>
        <function-ref name="toggle" scoped="" ref="0x40fbc8b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40fbc990"/>
        <function-ref name="get" scoped="" ref="0x40fbca70"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fbcb50"/>
        <function-ref name="set" scoped="" ref="0x40fbcc30"/>
        <function-ref name="clr" scoped="" ref="0x40fbcd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40fb96a8" loc="43:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x40fb96a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40fb9880"/>
        <function-ref name="stopDone" scoped="" ref="0x40fb9960"/>
        <function-ref name="start" scoped="" ref="0x40fb9a40"/>
        <function-ref name="stop" scoped="" ref="0x40fb9b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x40fe9308" loc="50:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopTask" scoped="" ref="0x40fe9308"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fe94e0"/>
        <function-ref name="runTask" scoped="" ref="0x40fe95c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x40fea4b0" loc="47:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCK" scoped="" ref="0x40fea4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40fea688"/>
        <function-ref name="isInput" scoped="" ref="0x40fea768"/>
        <function-ref name="toggle" scoped="" ref="0x40fea848"/>
        <function-ref name="isOutput" scoped="" ref="0x40fea928"/>
        <function-ref name="get" scoped="" ref="0x40feaa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40feaae8"/>
        <function-ref name="set" scoped="" ref="0x40feabc8"/>
        <function-ref name="clr" scoped="" ref="0x40feaca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PWR" ref="0x40feb050" loc="45:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PWR" scoped="" ref="0x40feb050"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40feb228"/>
        <function-ref name="isInput" scoped="" ref="0x40feb308"/>
        <function-ref name="toggle" scoped="" ref="0x40feb3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x40feb4c8"/>
        <function-ref name="get" scoped="" ref="0x40feb5a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40feb688"/>
        <function-ref name="set" scoped="" ref="0x40feb768"/>
        <function-ref name="clr" scoped="" ref="0x40feb848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DATA" ref="0x40feba58" loc="46:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DATA" scoped="" ref="0x40feba58"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40febc30"/>
        <function-ref name="isInput" scoped="" ref="0x40febd10"/>
        <function-ref name="toggle" scoped="" ref="0x40febdf0"/>
        <function-ref name="isOutput" scoped="" ref="0x40febed0"/>
        <function-ref name="get" scoped="" ref="0x40fea010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fea0f0"/>
        <function-ref name="set" scoped="" ref="0x40fea1d0"/>
        <function-ref name="clr" scoped="" ref="0x40fea2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40fb9d88" loc="44:../../tos/platforms/telosa/chips/sht11/HplSensirionSht11P.nc">
      <component-ref qname="HplSensirionSht11P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40fb9d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40fb48a8"/>
        <function-ref name="fired" scoped="" ref="0x40fb6b18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40fb4268"/>
        <function-ref name="isOneShot" scoped="" ref="0x40fb4010"/>
        <function-ref name="getdt" scoped="" ref="0x40fb4d58"/>
        <function-ref name="gett0" scoped="" ref="0x40fb4b00"/>
        <function-ref name="isRunning" scoped="" ref="0x40fb6d70"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40fb63c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40fb4588"/>
        <function-ref name="startOneShot" scoped="" ref="0x40fb6640"/>
        <function-ref name="stop" scoped="" ref="0x40fb68c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40fe42e0" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="HplSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x40fe42e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40fe3dd0"/>
        <function-ref name="fired" scoped="" ref="0x40fe3088"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40fe3790"/>
        <function-ref name="isOneShot" scoped="" ref="0x40fe3538"/>
        <function-ref name="getdt" scoped="" ref="0x40fe12a0"/>
        <function-ref name="gett0" scoped="" ref="0x40fe1048"/>
        <function-ref name="isRunning" scoped="" ref="0x40fe32e0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40fe4908"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40fe3ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40fe4b88"/>
        <function-ref name="stop" scoped="" ref="0x40fe4e08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x40fdc608" loc="46:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x40fdc608"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fdc7e0"/>
        <function-ref name="fired" scoped="" ref="0x40fdc8c0"/>
        <function-ref name="disable" scoped="" ref="0x40fdc9a0"/>
        <function-ref name="edge" scoped="" ref="0x40fdca80"/>
        <function-ref name="enable" scoped="" ref="0x40fdcb60"/>
        <function-ref name="getValue" scoped="" ref="0x40fdcc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x40fd3010" loc="58:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x40fd3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd31e8"/>
        <function-ref name="fired" scoped="" ref="0x40fd32c8"/>
        <function-ref name="disable" scoped="" ref="0x40fd33a8"/>
        <function-ref name="edge" scoped="" ref="0x40fd3488"/>
        <function-ref name="enable" scoped="" ref="0x40fd3568"/>
        <function-ref name="getValue" scoped="" ref="0x40fd3648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x40fd8070" loc="49:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x40fd8070"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd8248"/>
        <function-ref name="fired" scoped="" ref="0x40fd8328"/>
        <function-ref name="disable" scoped="" ref="0x40fd8408"/>
        <function-ref name="edge" scoped="" ref="0x40fd84e8"/>
        <function-ref name="enable" scoped="" ref="0x40fd85c8"/>
        <function-ref name="getValue" scoped="" ref="0x40fd86a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x40fd7288" loc="53:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x40fd7288"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd7460"/>
        <function-ref name="fired" scoped="" ref="0x40fd7540"/>
        <function-ref name="disable" scoped="" ref="0x40fd7620"/>
        <function-ref name="edge" scoped="" ref="0x40fd7700"/>
        <function-ref name="enable" scoped="" ref="0x40fd77e0"/>
        <function-ref name="getValue" scoped="" ref="0x40fd78c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x40fdd448" loc="44:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x40fdd448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fdd620"/>
        <function-ref name="fired" scoped="" ref="0x40fdd700"/>
        <function-ref name="disable" scoped="" ref="0x40fdd7e0"/>
        <function-ref name="edge" scoped="" ref="0x40fdd8c0"/>
        <function-ref name="enable" scoped="" ref="0x40fdd9a0"/>
        <function-ref name="getValue" scoped="" ref="0x40fdda80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x40fd6cf8" loc="56:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x40fd6cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd4010"/>
        <function-ref name="fired" scoped="" ref="0x40fd40f0"/>
        <function-ref name="disable" scoped="" ref="0x40fd41d0"/>
        <function-ref name="edge" scoped="" ref="0x40fd42b0"/>
        <function-ref name="enable" scoped="" ref="0x40fd4390"/>
        <function-ref name="getValue" scoped="" ref="0x40fd4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x40fdceb8" loc="47:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x40fdceb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd90c0"/>
        <function-ref name="fired" scoped="" ref="0x40fd91a0"/>
        <function-ref name="disable" scoped="" ref="0x40fd9280"/>
        <function-ref name="edge" scoped="" ref="0x40fd9360"/>
        <function-ref name="enable" scoped="" ref="0x40fd9440"/>
        <function-ref name="getValue" scoped="" ref="0x40fd9520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x40fd38c0" loc="59:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x40fd38c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd3a98"/>
        <function-ref name="fired" scoped="" ref="0x40fd3b78"/>
        <function-ref name="disable" scoped="" ref="0x40fd3c58"/>
        <function-ref name="edge" scoped="" ref="0x40fd3d38"/>
        <function-ref name="enable" scoped="" ref="0x40fd3e18"/>
        <function-ref name="getValue" scoped="" ref="0x40fd3ef8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x40fda218" loc="42:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x40fda218"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fda3f0"/>
        <function-ref name="fired" scoped="" ref="0x40fda4d0"/>
        <function-ref name="disable" scoped="" ref="0x40fda5b0"/>
        <function-ref name="edge" scoped="" ref="0x40fda690"/>
        <function-ref name="enable" scoped="" ref="0x40fda770"/>
        <function-ref name="getValue" scoped="" ref="0x40fda850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x40fd7b38" loc="54:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x40fd7b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd7d10"/>
        <function-ref name="fired" scoped="" ref="0x40fd7df0"/>
        <function-ref name="disable" scoped="" ref="0x40fd7ed0"/>
        <function-ref name="edge" scoped="" ref="0x40fd6010"/>
        <function-ref name="enable" scoped="" ref="0x40fd60f0"/>
        <function-ref name="getValue" scoped="" ref="0x40fd61d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x40fddcf8" loc="45:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x40fddcf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fdded0"/>
        <function-ref name="fired" scoped="" ref="0x40fdc010"/>
        <function-ref name="disable" scoped="" ref="0x40fdc0f0"/>
        <function-ref name="edge" scoped="" ref="0x40fdc1d0"/>
        <function-ref name="enable" scoped="" ref="0x40fdc2b0"/>
        <function-ref name="getValue" scoped="" ref="0x40fdc390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x40fd46e8" loc="57:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x40fd46e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd48c0"/>
        <function-ref name="fired" scoped="" ref="0x40fd49a0"/>
        <function-ref name="disable" scoped="" ref="0x40fd4a80"/>
        <function-ref name="edge" scoped="" ref="0x40fd4b60"/>
        <function-ref name="enable" scoped="" ref="0x40fd4c40"/>
        <function-ref name="getValue" scoped="" ref="0x40fd4d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x40fd9798" loc="48:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x40fd9798"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd9970"/>
        <function-ref name="fired" scoped="" ref="0x40fd9a50"/>
        <function-ref name="disable" scoped="" ref="0x40fd9b30"/>
        <function-ref name="edge" scoped="" ref="0x40fd9c10"/>
        <function-ref name="enable" scoped="" ref="0x40fd9cf0"/>
        <function-ref name="getValue" scoped="" ref="0x40fd9dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x40fd8920" loc="52:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x40fd8920"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd8af8"/>
        <function-ref name="fired" scoped="" ref="0x40fd8bd8"/>
        <function-ref name="disable" scoped="" ref="0x40fd8cb8"/>
        <function-ref name="edge" scoped="" ref="0x40fd8d98"/>
        <function-ref name="enable" scoped="" ref="0x40fd8e78"/>
        <function-ref name="getValue" scoped="" ref="0x40fd7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x40fdaac8" loc="43:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x40fdaac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fdaca0"/>
        <function-ref name="fired" scoped="" ref="0x40fdad80"/>
        <function-ref name="disable" scoped="" ref="0x40fdae60"/>
        <function-ref name="edge" scoped="" ref="0x40fdd010"/>
        <function-ref name="enable" scoped="" ref="0x40fdd0f0"/>
        <function-ref name="getValue" scoped="" ref="0x40fdd1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x40fd6448" loc="55:../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x40fd6448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd6620"/>
        <function-ref name="fired" scoped="" ref="0x40fd6700"/>
        <function-ref name="disable" scoped="" ref="0x40fd67e0"/>
        <function-ref name="edge" scoped="" ref="0x40fd68c0"/>
        <function-ref name="enable" scoped="" ref="0x40fd69a0"/>
        <function-ref name="getValue" scoped="" ref="0x40fd6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x41007cf8" loc="43:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x41007cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41007ed0"/>
        <function-ref name="fired" scoped="" ref="0x41006010"/>
        <function-ref name="disable" scoped="" ref="0x410060f0"/>
        <function-ref name="edge" scoped="" ref="0x410061d0"/>
        <function-ref name="enable" scoped="" ref="0x410062b0"/>
        <function-ref name="getValue" scoped="" ref="0x41006390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x410016e8" loc="55:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x410016e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410018c0"/>
        <function-ref name="fired" scoped="" ref="0x410019a0"/>
        <function-ref name="disable" scoped="" ref="0x41001a80"/>
        <function-ref name="edge" scoped="" ref="0x41001b60"/>
        <function-ref name="enable" scoped="" ref="0x41001c40"/>
        <function-ref name="getValue" scoped="" ref="0x41001d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x41005798" loc="46:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x41005798"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41005970"/>
        <function-ref name="fired" scoped="" ref="0x41005a50"/>
        <function-ref name="disable" scoped="" ref="0x41005b30"/>
        <function-ref name="edge" scoped="" ref="0x41005c10"/>
        <function-ref name="enable" scoped="" ref="0x41005cf0"/>
        <function-ref name="getValue" scoped="" ref="0x41005dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x41004920" loc="50:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x41004920"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41004af8"/>
        <function-ref name="fired" scoped="" ref="0x41004bd8"/>
        <function-ref name="disable" scoped="" ref="0x41004cb8"/>
        <function-ref name="edge" scoped="" ref="0x41004d98"/>
        <function-ref name="enable" scoped="" ref="0x41004e78"/>
        <function-ref name="getValue" scoped="" ref="0x41003010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x41008b38" loc="41:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x41008b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41008d10"/>
        <function-ref name="fired" scoped="" ref="0x41008df0"/>
        <function-ref name="disable" scoped="" ref="0x41008ed0"/>
        <function-ref name="edge" scoped="" ref="0x41007010"/>
        <function-ref name="enable" scoped="" ref="0x410070f0"/>
        <function-ref name="getValue" scoped="" ref="0x410071d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x41002448" loc="53:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x41002448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410026a0"/>
        <function-ref name="fired" scoped="" ref="0x41002780"/>
        <function-ref name="disable" scoped="" ref="0x41002860"/>
        <function-ref name="edge" scoped="" ref="0x41002940"/>
        <function-ref name="enable" scoped="" ref="0x41002a20"/>
        <function-ref name="getValue" scoped="" ref="0x41002b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x41006608" loc="44:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x41006608"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410067e0"/>
        <function-ref name="fired" scoped="" ref="0x410068c0"/>
        <function-ref name="disable" scoped="" ref="0x410069a0"/>
        <function-ref name="edge" scoped="" ref="0x41006a80"/>
        <function-ref name="enable" scoped="" ref="0x41006b60"/>
        <function-ref name="getValue" scoped="" ref="0x41006c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x41000010" loc="56:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x41000010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410001e8"/>
        <function-ref name="fired" scoped="" ref="0x410002c8"/>
        <function-ref name="disable" scoped="" ref="0x410003a8"/>
        <function-ref name="edge" scoped="" ref="0x41000488"/>
        <function-ref name="enable" scoped="" ref="0x41000568"/>
        <function-ref name="getValue" scoped="" ref="0x41000648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x40fd2998" loc="39:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x40fd2998"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fd2b70"/>
        <function-ref name="fired" scoped="" ref="0x40fd2c50"/>
        <function-ref name="disable" scoped="" ref="0x40fd2d30"/>
        <function-ref name="edge" scoped="" ref="0x40fd2e10"/>
        <function-ref name="enable" scoped="" ref="0x40fd2ef0"/>
        <function-ref name="getValue" scoped="" ref="0x41008010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x41003288" loc="51:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x41003288"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41003460"/>
        <function-ref name="fired" scoped="" ref="0x41003540"/>
        <function-ref name="disable" scoped="" ref="0x41003620"/>
        <function-ref name="edge" scoped="" ref="0x41003700"/>
        <function-ref name="enable" scoped="" ref="0x410037e0"/>
        <function-ref name="getValue" scoped="" ref="0x410038c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x41007448" loc="42:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x41007448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41007620"/>
        <function-ref name="fired" scoped="" ref="0x41007700"/>
        <function-ref name="disable" scoped="" ref="0x410077e0"/>
        <function-ref name="edge" scoped="" ref="0x410078c0"/>
        <function-ref name="enable" scoped="" ref="0x410079a0"/>
        <function-ref name="getValue" scoped="" ref="0x41007a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x41002d78" loc="54:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x41002d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41001010"/>
        <function-ref name="fired" scoped="" ref="0x410010f0"/>
        <function-ref name="disable" scoped="" ref="0x410011d0"/>
        <function-ref name="edge" scoped="" ref="0x410012b0"/>
        <function-ref name="enable" scoped="" ref="0x41001390"/>
        <function-ref name="getValue" scoped="" ref="0x41001470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x41006eb8" loc="45:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x41006eb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410050c0"/>
        <function-ref name="fired" scoped="" ref="0x410051a0"/>
        <function-ref name="disable" scoped="" ref="0x41005280"/>
        <function-ref name="edge" scoped="" ref="0x41005360"/>
        <function-ref name="enable" scoped="" ref="0x41005440"/>
        <function-ref name="getValue" scoped="" ref="0x41005520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x41004070" loc="49:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x41004070"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41004248"/>
        <function-ref name="fired" scoped="" ref="0x41004328"/>
        <function-ref name="disable" scoped="" ref="0x41004408"/>
        <function-ref name="edge" scoped="" ref="0x410044e8"/>
        <function-ref name="enable" scoped="" ref="0x410045c8"/>
        <function-ref name="getValue" scoped="" ref="0x410046a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x41008288" loc="40:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x41008288"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41008460"/>
        <function-ref name="fired" scoped="" ref="0x41008540"/>
        <function-ref name="disable" scoped="" ref="0x41008620"/>
        <function-ref name="edge" scoped="" ref="0x41008700"/>
        <function-ref name="enable" scoped="" ref="0x410087e0"/>
        <function-ref name="getValue" scoped="" ref="0x410088c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x41003b38" loc="52:../../tos/chips/msp430/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x41003b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41003d10"/>
        <function-ref name="fired" scoped="" ref="0x41003df0"/>
        <function-ref name="disable" scoped="" ref="0x41003ed0"/>
        <function-ref name="edge" scoped="" ref="0x41002010"/>
        <function-ref name="enable" scoped="" ref="0x410020f0"/>
        <function-ref name="getValue" scoped="" ref="0x410021d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x410786f0" loc="46:../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x410786f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x410788c8"/>
        <function-ref name="fired" scoped="" ref="0x410789a8"/>
        <function-ref name="disable" scoped="" ref="0x41078a88"/>
        <function-ref name="edge" scoped="" ref="0x41078b68"/>
        <function-ref name="enable" scoped="" ref="0x41078c48"/>
        <function-ref name="getValue" scoped="" ref="0x41078d28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x410780f8" loc="45:../../tos/chips/msp430/pins/Msp430InterruptC.nc">
      <component-ref qname="HplSensirionSht11C.InterruptDATAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x410780f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x410782d0"/>
        <function-ref name="disable" scoped="" ref="0x410783b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x41078490"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x41078570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x4106fc20" loc="92:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x4106fc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x4106fe08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4106fee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x4106eb88" loc="96:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x4106eb88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x4106ed70"/>
        <function-ref name="configure" scoped="" ref="0x4106ee50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x4106e040" loc="93:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106e040"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4106e218"/>
        <function-ref name="requested" scoped="" ref="0x4106e2f8"/>
        <function-ref name="granted" scoped="" ref="0x4106e3d8"/>
        <function-ref name="isOwner" scoped="" ref="0x4106e4b8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4106e598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4106f4e0" loc="91:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x4106f4e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4106f6c8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4106f7a8"/>
        <function-ref name="request" scoped="" ref="0x4106f888"/>
        <function-ref name="granted" scoped="" ref="0x4106f968"/>
        <function-ref name="isOwner" scoped="" ref="0x4106fa48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x4106e6d8" loc="94:../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x4106e6d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4106e8b0"/>
        <function-ref name="userId" scoped="" ref="0x4106e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41566ce8" loc="44:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x41566ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41566ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x41564050" loc="45:../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x41564050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x41564228"/>
        <function-ref name="isEmpty" scoped="" ref="0x41564308"/>
        <function-ref name="isEnqueued" scoped="" ref="0x415643e8"/>
        <function-ref name="dequeue" scoped="" ref="0x415644c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x415628f8" loc="55:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x415628f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x41562ae0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x41562bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x415618b0" loc="60:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x415618b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x41561a98"/>
        <function-ref name="configure" scoped="" ref="0x41561b78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x41561cd8" loc="61:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x41561cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x41561eb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x41560010"/>
        <function-ref name="isEnqueued" scoped="" ref="0x415600f0"/>
        <function-ref name="dequeue" scoped="" ref="0x415601d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x41562d00" loc="56:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x41562d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x41562ed8"/>
        <function-ref name="requested" scoped="" ref="0x41561010"/>
        <function-ref name="granted" scoped="" ref="0x415610f0"/>
        <function-ref name="isOwner" scoped="" ref="0x415611d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x415612b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x41560310" loc="62:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x41560310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x415604e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x415605c8"/>
        <function-ref name="led1On" scoped="" ref="0x415606a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x41560788"/>
        <function-ref name="led2Toggle" scoped="" ref="0x41560868"/>
        <function-ref name="get" scoped="" ref="0x41560948"/>
        <function-ref name="led1Off" scoped="" ref="0x41560a28"/>
        <function-ref name="led0On" scoped="" ref="0x41560da8"/>
        <function-ref name="set" scoped="" ref="0x41560be8"/>
        <function-ref name="led2On" scoped="" ref="0x41560b08"/>
        <function-ref name="led2Off" scoped="" ref="0x41560cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x415621b8" loc="54:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x415621b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x415623a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x41562480"/>
        <function-ref name="request" scoped="" ref="0x41562560"/>
        <function-ref name="granted" scoped="" ref="0x41562640"/>
        <function-ref name="isOwner" scoped="" ref="0x41562720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x415613f0" loc="57:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x415613f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x415615c8"/>
        <function-ref name="userId" scoped="" ref="0x415616a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x41560f28" loc="75:../../tos/system/ArbiterP.nc">
      <component-ref qname="HplSensirionSht11C.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x41560f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4155f110"/>
        <function-ref name="runTask" scoped="" ref="0x4155f1f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x4106beb8" loc="69:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x4106beb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x4106a0c0"/>
        <function-ref name="stopDone" scoped="" ref="0x4106a1a0"/>
        <function-ref name="start" scoped="" ref="0x4106a280"/>
        <function-ref name="stop" scoped="" ref="0x4106a360"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x4106a4a0" loc="71:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x4106a4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x4106a678"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x4106a7b8" loc="72:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4106a7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4106a990"/>
        <function-ref name="requested" scoped="" ref="0x4106aa70"/>
        <function-ref name="granted" scoped="" ref="0x4106ab50"/>
        <function-ref name="isOwner" scoped="" ref="0x4106ac30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4106ad10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x4106ae50" loc="73:../../tos/lib/power/SplitControlPowerManagerC.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x4106ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4108d050"/>
        <function-ref name="userId" scoped="" ref="0x4108d130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x41547b90" loc="61:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x41547b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x41547d68"/>
        <function-ref name="stopDone" scoped="" ref="0x41547e48"/>
        <function-ref name="start" scoped="" ref="0x41547f28"/>
        <function-ref name="stop" scoped="" ref="0x41594018"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x41594158" loc="63:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x41594158"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x41594330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopTask" ref="0x41593010" loc="78:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopTask" scoped="" ref="0x41593010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x415931e8"/>
        <function-ref name="runTask" scoped="" ref="0x415932c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x41594470" loc="64:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x41594470"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x41594648"/>
        <function-ref name="requested" scoped="" ref="0x41594728"/>
        <function-ref name="granted" scoped="" ref="0x41594808"/>
        <function-ref name="isOwner" scoped="" ref="0x415948e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x415949c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startTask" ref="0x41593448" loc="73:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startTask" scoped="" ref="0x41593448"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x41593620"/>
        <function-ref name="runTask" scoped="" ref="0x41593700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0x41547798" loc="60:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x41547798"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x41547970"/>
        <function-ref name="stop" scoped="" ref="0x41547a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x41594b08" loc="65:../../tos/lib/power/PowerManagerP.nc">
      <component-ref qname="HplSensirionSht11C.SplitControlPowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x41594b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x41594ce0"/>
        <function-ref name="userId" scoped="" ref="0x41594dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x41087010" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="HalSensirionSht11C.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x41087010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40035e98"/>
            <typename><typedef-ref name="TMilli" ref="0x40369338"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x41086b00"/>
        <function-ref name="fired" scoped="" ref="0x41087d90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x410864c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x41086268"/>
        <function-ref name="getdt" scoped="" ref="0x41085010"/>
        <function-ref name="gett0" scoped="" ref="0x41086d58"/>
        <function-ref name="isRunning" scoped="" ref="0x41086010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x41087638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x410867e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x410878b8"/>
        <function-ref name="stop" scoped="" ref="0x41087b38"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x40627678" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x40627ac0" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x40626010" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x40626880" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x40625580" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40625a28" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x40626438" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40635188" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40635030" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x40627250" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x40626d00" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x40625138" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x4062e5a8" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x4062e990" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x40633e00" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x4063f1a8" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4062e1d8" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x4062ed68" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x406336c0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x40633a50" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4062ae70" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x4064b7e8" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
          <long>&#10; Set pin direction to input.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x4064bc10" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x40649bb8" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x40649a60" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x4064da30" loc="58:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x4064a448" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x40659158" loc="117:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x4064a010" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
          <long>&#10; Set pin direction to output.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4064b3a8" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x40649138" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x4064de50" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4064d2a0" loc="48:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x4064a870" loc="92:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x40649580" loc="101:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x4064acf0" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x4064d658" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x4074d9a8" loc="48:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x4074e948" loc="43:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x4074d5a8" loc="47:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x4074e590" loc="42:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x4074ed90" loc="45:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x40753e08" loc="40:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x4074e1d8" loc="41:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x4074d1a8" loc="46:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x405e3548" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x403cec40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x4077ddc8" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x4077dc70" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x4077f518" loc="42:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4075f390"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x4075f918"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x4077c320" loc="57:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x4077cb60" loc="59:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x4077d820" loc="47:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x4077c718" loc="58:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x4077f970" loc="43:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x4077fdb8" loc="44:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x4077d3f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4075f390"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x4075f918"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x4077d298" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4075f390"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x4075f918"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x40791a58" loc="44:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x4078b090" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x4078cf28" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x4078b7e0" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="81:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x4078b688" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x4078ca80" loc="68:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="65:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x4078c5e0" loc="63:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x4078c010" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x40791e68" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x4077b610" loc="40:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x4077bb68" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x4077ba10" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x40790168" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x40790010" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x40790708" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x407905b0" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40790ab0" loc="45:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x40782b30" loc="52:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x40781900" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x407817a8" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x40782f20" loc="53:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x407842a8" loc="45:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x40781330" loc="54:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40784af0" loc="47:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x40782788" loc="51:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x407846f8" loc="46:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40784eb8" loc="48:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x407823d0" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x40782278" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x40781ee8" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x40781d90" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x407a7480" loc="39:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:../../tos/interfaces/McuSleep.nc">
      <documentation loc="63:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x405cc038" loc="76:../../tos/interfaces/McuSleep.nc">
        <documentation loc="75:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x40551508" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x40880800" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40034a50" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x4035d3b0" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x40034e90" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x4036a2d0" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x4036a7e8" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40892b00" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40892b00"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x4088b250" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4088e0c8" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x4088c220" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x4088eec0" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x4088c0c0" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x4088ea18" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x4088bbc8" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x4088b698" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x4088e558" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x4088f188" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4088f030" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x4088cc08" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x4088c8c0" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x4088caa8" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x4088f820" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4088f6c8" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4088fcf0" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../tos/interfaces/Read.nc">
      <documentation loc="33:../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x4089a6e0" loc="49:../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4089a6e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x4089ab90" loc="55:../../tos/interfaces/Read.nc">
        <documentation loc="50:../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40897360" loc="63:../../tos/interfaces/Read.nc">
        <documentation loc="57:../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4089a6e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40897030" loc="63:../../tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40897200" loc="63:../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x4089a6e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408c28d0" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408c28d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x408c2db0" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408be9e0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408be9e0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x408beb48" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x408d5dd0" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x408d7ac8" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x408d5788" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x408d5438" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          </variable>
          <variable name="dt" ref="0x408d5628" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x408d7f10" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x408d4288" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x408d7188" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x408d7030" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408beb48"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x408d7668" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x409127e8" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x409127e8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40912950" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40912950"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40912e38" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40912950"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x4090f890" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x4090f390" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x4090fc90" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x409b8e00" loc="113:../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x409b8ca8" loc="113:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x409b7c18" loc="138:../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x409b7ac0" loc="138:../../tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x409b85c0" loc="104:../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x409b73e0" loc="130:../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x409b0210" loc="80:../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x409b4c90" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x409b4ea8" loc="80:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409b00a8" loc="80:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x409cddd0" loc="135:../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409cda70" loc="135:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409cdc50" loc="135:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x409cd510" loc="123:../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x409b0eb0" loc="96:../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409b0d58" loc="96:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x409cfbf8" loc="110:../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409cf8a0" loc="110:../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x409cfa98" loc="110:../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x409b1b90" loc="65:../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409b1a38" loc="65:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x409c5580" loc="78:../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409c5428" loc="78:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x409c4508" loc="126:../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409c41a8" loc="126:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409c4388" loc="126:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x409c6ba0" loc="106:../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x409c6208" loc="94:../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409c5ea0" loc="94:../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409c60a8" loc="94:../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x409b2dc0" loc="78:../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
              <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409b2878" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x409b2a58" loc="78:../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409b2c38" loc="78:../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x409d7398" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409d7240" loc="59:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x409d7e90" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409d7d38" loc="71:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x409d6950" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409d67f8" loc="85:../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x409da648" loc="177:../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40615a50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409da4f0" loc="177:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x409c0010" loc="88:../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409c1e20" loc="88:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x409c8e80" loc="68:../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x409c1578" loc="78:../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409c1420" loc="78:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x409de8f8" loc="121:../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409de590" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x409de798" loc="121:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x409c0bf8" loc="103:../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409c0890" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x409c0a98" loc="103:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x40615cb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x409dc010" loc="147:../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409dfea0" loc="147:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x409dcb48" loc="162:../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409dc818" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x409dc9e8" loc="162:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x406157f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x409df4c0" loc="136:../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409df368" loc="136:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x409db370" loc="187:../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40615a50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409db010" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x409db210" loc="187:../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x40615a50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x409dbbe8" loc="195:../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x40615a50"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../tos/interfaces/Send.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x409d0c78" loc="75:../../tos/interfaces/Send.nc">
        <documentation loc="57:../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409d0938" loc="75:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409d0b18" loc="75:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x409eca18" loc="125:../../tos/interfaces/Send.nc">
        <documentation loc="115:../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409ec6b8" loc="125:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409ec898" loc="125:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x409ec158" loc="112:../../tos/interfaces/Send.nc">
        <documentation loc="102:../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x409eeb38" loc="89:../../tos/interfaces/Send.nc">
        <documentation loc="77:../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409ee9e0" loc="89:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x409eb820" loc="100:../../tos/interfaces/Send.nc">
        <documentation loc="91:../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409eb4c8" loc="100:../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x409eb6c0" loc="100:../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x40a1bd28" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a1b998" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x40a1bbc8" loc="31:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x40a1ea78" loc="15:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x40a1b388" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a1b010" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4061ff20"/>
                <typename><typedef-ref name="message_t" ref="0x4061ecf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x40a1b228" loc="23:../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x40a2b4d0" loc="95:../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40a2b998" loc="105:../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x40a13b58" loc="54:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40a13720" loc="49:../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x40a2f1a8" loc="56:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x40a2fe08" loc="72:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x40a2d010" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a2ee50" loc="94:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x40a2e3f0" loc="79:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x40a2f8d8" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a2f780" loc="65:../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x40a2d518" loc="100:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x40a2e950" loc="85:../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x40a34290" loc="71:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x40a34858" loc="81:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x40a15bf8" loc="62:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x40a15aa0" loc="62:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x40a33010" loc="91:../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40a34e38" loc="91:../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x40a321a8" loc="62:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x40a32990" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a32838" loc="69:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x40a30058" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40a32ed0" loc="80:../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40ae6ae0" loc="48:../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40ae6790" loc="48:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40ae6980" loc="48:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x40ae3e88" loc="79:../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40ae3d30" loc="79:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40ae16a8" loc="90:../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40ae1358" loc="90:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40ae1548" loc="90:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x40ae32f0" loc="65:../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x40adf560" loc="99:../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40adf010" loc="99:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40adf200" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40adf3f8" loc="99:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x40ae3878" loc="72:../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40ae2968" loc="57:../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40ae2418" loc="57:../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40ae2608" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40ae2800" loc="57:../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:../../tos/interfaces/UartByte.nc">
      <documentation loc="32:../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40af5798" loc="46:../../tos/interfaces/UartByte.nc">
        <documentation loc="39:../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40af5640" loc="46:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40af2060" loc="56:../../tos/interfaces/UartByte.nc">
        <documentation loc="48:../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40af5cc8" loc="56:../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x40af5ed0" loc="56:../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40b300c8" loc="53:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40b306a0" loc="61:../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="31:../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x40b2e3b8" loc="39:../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:8" alignment="I:2"><union-ref ref="0x40afb530"/>
              <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x40afb758"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40b33818" loc="120:../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x40b10e28" loc="97:../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x40b10828" loc="88:../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40b333a8" loc="102:../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x40b33f10" loc="128:../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x40b2bc18" loc="65:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x40b2b758" loc="59:../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="31:../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x40b257f0" loc="54:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b25698" loc="54:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x40b25210" loc="49:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="31:../../tos/chips/msp430/usart/msp430usart.h">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Philipp Huppertz &#60;huppertz@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x40b34340" loc="213:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x40b3b1c8" loc="143:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x40b446c0" loc="50:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40af0a78"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x40af0ee0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40b44568" loc="50:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40af0a78"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x40af0ee0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x40b3c070" loc="123:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Enables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x40b41be8" loc="70:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aeddb0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x40aec248"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40b41a90" loc="70:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aeddb0"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x40aec248"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x40b37210" loc="180:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x40b366f0" loc="197:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x40b41600" loc="65:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aefb68"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x40aed010"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x40b40090" loc="75:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aeddb0"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x40aec248"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x40b3f9d8" loc="97:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x40b3f880" loc="97:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x40b3f460" loc="95:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x40b38df8" loc="179:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x40b41168" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aefb68"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x40aed010"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40b41010" loc="60:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40aefb68"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x40aed010"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x40b40a50" loc="85:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x40b37600" loc="181:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x40b3f010" loc="90:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x40b40e98" loc="90:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x40b3d7f8" loc="113:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x40b3dc20" loc="118:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x40b38620" loc="177:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x40b3a2b8" loc="163:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x40b3c8f0" loc="133:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x40b38a18" loc="178:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x40b3b650" loc="148:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
          <long>&#10; Disables the Uart RX module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x40b379d8" loc="182:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x40b3fe58" loc="103:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x40af2e50"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x40af1c40"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x40b37e20" loc="187:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x40b36ee8" loc="207:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x40b40600" loc="80:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x40b404a8" loc="80:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x40b348a8" loc="224:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10; The mode of transmission (Uart or Spi) depends on the current&#10; state of the USART, which must be managed by a higher layer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b34750" loc="224:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x40b44b38" loc="55:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40af0a78"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x40af0ee0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x40b3c4c0" loc="128:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x40b3ba70" loc="153:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x40b38168" loc="174:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x40afb530"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x40afb758"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40b38010" loc="174:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x40afb530"/>
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x40afb758"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x40b3a938" loc="168:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
          <long>&#10; Switches USART to Spi mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x40b06640"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x40b06868"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40b3a7e0" loc="168:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x40b06640"/>
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x40b06868"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x40b34e00" loc="231:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="226:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x40b362c8" loc="192:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x40b3d338" loc="108:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x40b36af8" loc="202:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x40b3be80" loc="158:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x40b3cd78" loc="138:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
          <long>&#10; Disables the Uart TX module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x40b6ef20" loc="95:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40b91420" loc="105:../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x40bd6210" loc="90:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x40bd6710" loc="98:../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x40bf4ba0" loc="39:../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40c0d938" loc="56:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x40c0c3b0" loc="73:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40c0d408" loc="46:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x40c0de48" loc="65:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40c0c988" loc="81:../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x40c04010" loc="79:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40c0b9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40c05e88" loc="79:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40c0b9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x40c08c68" loc="53:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x40c05348" loc="62:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40c0b9d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40c051f0" loc="62:../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40c0b9d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40c058f8" loc="70:../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x40c0b9d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x40c49e78" loc="62:../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BigQueue" loc="43:../../tos/interfaces/BigQueue.nc">
      <documentation loc="33:../../tos/interfaces/BigQueue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2007-09-19 17:29:17 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40cb0f20" loc="43:../../tos/interfaces/BigQueue.nc">
          <interfacedef-ref qname="BigQueue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x40caa568" loc="80:../../tos/interfaces/BigQueue.nc">
        <documentation loc="74:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x40ca8010" loc="97:../../tos/interfaces/BigQueue.nc">
        <documentation loc="90:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param newVal - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40caae78" loc="97:../../tos/interfaces/BigQueue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x40ca8640" loc="108:../../tos/interfaces/BigQueue.nc">
        <documentation loc="99:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40ca84e8" loc="108:../../tos/interfaces/BigQueue.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="full" ref="0x40cab808" loc="57:../../tos/interfaces/BigQueue.nc">
        <documentation loc="52:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Returns if the queue is full.</short>
          <long>&#10; Returns if the queue is full.&#10;&#10; @return Whether the queue is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40caa138" loc="72:../../tos/interfaces/BigQueue.nc">
        <documentation loc="67:../../tos/interfaces/BigQueue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40caa9e8" loc="88:../../tos/interfaces/BigQueue.nc">
        <documentation loc="82:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40cb0f20"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40cab3d8" loc="50:../../tos/interfaces/BigQueue.nc">
        <documentation loc="45:../../tos/interfaces/BigQueue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40cabc58" loc="65:../../tos/interfaces/BigQueue.nc">
        <documentation loc="59:../../tos/interfaces/BigQueue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BigQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:../../tos/lib/printf/Putchar.nc">
      <documentation loc="32:../../tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TINYOS_OS_DIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x40cc2370" loc="49:../../tos/lib/printf/Putchar.nc">
        <documentation loc="46:../../tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x40cc2218" loc="49:../../tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadStream" loc="57:../../tos/interfaces/ReadStream.nc">
      <documentation loc="33:../../tos/interfaces/ReadStream.nc">
        <short>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices.</short>
        <long>&#10; The ReadStream interface is intended for buffered high data rate&#10; reading, usually from sensor devices. The type of the values being&#10; read is given as a template argument. &#10;&#10; &#60;p> To use this interface, allocate one or more buffers in your own&#10; space. Then, call postBuffer to pass these buffers into the&#10; device. Call read() to begin the sampling process. The buffers will&#10; be filled in the order originally posted, and a bufferDone() event&#10; will be signaled once each buffer has been filled with data. At any&#10; time while the read() is running, you may post new buffers to be&#10; filled. If the lower layer finishes signaling readDone() and then&#10; finds that no more buffers have been posted, it will consider the&#10; read to be finished, and signal readDone(). &#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40cd97b8" loc="57:../../tos/interfaces/ReadStream.nc">
          <interfacedef-ref qname="ReadStream"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40cd97b8"/></type-var>
        </typedef>
      </parameters>
      <function event="" provided="0" name="bufferDone" ref="0x40cfe5f8" loc="89:../../tos/interfaces/ReadStream.nc">
        <documentation loc="80:../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a previously posted buffer has been filled by the&#10; device.</short>
          <long>&#10; Signalled when a previously posted buffer has been filled by the&#10; device. In the event of a read error, result will not equal&#10; SUCCESS, and the buffer will be filled with zeroes.&#10;&#10; @param result SUCCESS if the buffer was filled without errors&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer that has been filled&#10; @param count the number of values actually read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40cd97b8"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40cfe088" loc="89:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x40cfe288" loc="90:../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40cd97b8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x40cfe490" loc="90:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="postBuffer" ref="0x40cd2060" loc="68:../../tos/interfaces/ReadStream.nc">
        <documentation loc="58:../../tos/interfaces/ReadStream.nc">
          <short>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer.</short>
          <long>&#10; Passes a buffer to the device, and indicates how many values&#10; should be placed into the buffer. Make sure your count doesn't&#10; overrun the buffer.&#10;&#10; @param 'val_t* COUNT(count) buf' a pointer to the buffer&#10; @param count the number of values the buffer should hold&#10;&#10; @return SUCCESS if the post was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40cd97b8"/></type-var>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40cd9cc8" loc="68:../../tos/interfaces/ReadStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40cd97b8"/></type-var>
            </type-pointer>
          </variable>
          <variable name="count" ref="0x40cd9ed0" loc="68:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x40cd2b48" loc="78:../../tos/interfaces/ReadStream.nc">
        <documentation loc="70:../../tos/interfaces/ReadStream.nc">
          <short>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period.</short>
          <long>&#10; Directs the device to start filling buffers by sampling with the&#10; specified period. &#10; &#10; @param usPeriod the between-sample period in microseconds&#10; &#10; @return SUCCESS if the reading process began&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="usPeriod" ref="0x40cd29f0" loc="78:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40cfd3d0" loc="102:../../tos/interfaces/ReadStream.nc">
        <documentation loc="92:../../tos/interfaces/ReadStream.nc">
          <short>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted.</short>
          <long>&#10; Signalled when a buffer has been filled but no more buffers have&#10; been posted. In the event of a read error, all previously posted&#10; buffers will have their bufferDone() event signalled, and then&#10; this event will be signalled with a non-SUCCESS argument.&#10;&#10; @param result SUCCESS if all buffers were filled without errors&#10; @param usActualPeriod Actual sampling period used - may be different&#10;   from period requested at read time. Undefined if result != SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40cfd010" loc="102:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="usActualPeriod" ref="0x40cfd270" loc="102:../../tos/interfaces/ReadStream.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x401eb250"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DeviceMetadata" loc="40:../../tos/interfaces/DeviceMetadata.nc">
      <documentation loc="32:../../tos/interfaces/DeviceMetadata.nc">
        <short>&#10; DeviceMetadata is a way to obtain information about a generic data&#10; access device represented by a SID.</short>
        <long>&#10; DeviceMetadata is a way to obtain information about a generic data&#10; access device represented by a SID. See TEP109 and TEP114 for details.&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.1 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getSignificantBits" ref="0x40c73f18" loc="41:../../tos/interfaces/DeviceMetadata.nc">
        <interfacedef-ref qname="DeviceMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AdcConfigure" loc="45:../../tos/interfaces/AdcConfigure.nc">
      <documentation loc="36:../../tos/interfaces/AdcConfigure.nc">
        <short> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration.</short>
        <long> &#10; This interface is intended to be provided by an ADC client and used by the&#10; ADC subsystem to retrieve the client's ADC configuration. &#10; &#10; @author Jan Hauer &#10; @see  Please refer to TEP 101 for more information about this interface and&#10; its intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="adc_config_t" ref="0x40cebe78" loc="45:../../tos/interfaces/AdcConfigure.nc">
          <interfacedef-ref qname="AdcConfigure"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x40cebe78"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getConfiguration" ref="0x40ce8428" loc="58:../../tos/interfaces/AdcConfigure.nc">
        <documentation loc="48:../../tos/interfaces/AdcConfigure.nc">
          <short> &#10; Returns the configuration of an ADC client.</short>
          <long> &#10; Returns the configuration of an ADC client.  &#60;code>adc_config_t&#60;/code> is&#10; a hardware specific data type that contains all information necessary to&#10; configure the respective ADC hardware for the client. A client MUST always&#10; return the same configuration and, if configuration data is passed as a&#10; pointer, the ADC subsystem (HIL component) MUST NOT reference it after the&#10; return of this command.&#10;  &#10; @return chip specific configuration.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AdcConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="adc_config_t" scoped="" ref="0x40cebe78"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:../../tos/interfaces/ReadNow.nc">
      <documentation loc="33:../../tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40d18dd8" loc="52:../../tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40d18dd8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x40d152c8" loc="58:../../tos/interfaces/ReadNow.nc">
        <documentation loc="53:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40d15a98" loc="66:../../tos/interfaces/ReadNow.nc">
        <documentation loc="60:../../tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40d18dd8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40d15768" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40d15938" loc="66:../../tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40d18dd8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12SingleChannel" loc="69:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <short> &#10; &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample a single adc channel once or repeatedly (one event is&#10; signalled per conversion result) or perform multiple conversions for a&#10; single channel once or repeatedly (one event is signalled per multiple&#10; conversion results). It cannot be used to sample different adc channels with&#10; a single command (use the Msp430Adc12MultiChannel interface instead).&#10; Sampling a channel requires calling a sequence of two commands, configureX()&#10; and getData(), where X is either 'Single', 'SingleRepeat', 'Multiple' or&#10; 'MultipleRepeat'. Conversion results will be signalled by the&#10; dataReadySingle() or dataReadyMultiple() event, depending on the previous&#10; configuration, i.e. there are four possible sequences:&#10; &#10; &#60;p> configureSingle()          -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureSingleRepeat()    -> ( getData() -> singleDataReady() )*&#10; &#60;p> configureMultiple()        -> ( getData() -> multipleDataReady() )*&#10; &#60;p> configureMultipleRepeat()  -> getData() -> multipleDataReady()&#10;&#10; &#60;p> where configureX() and getData() are commands called by the client and&#10; singleDataReady() and multipleDataReady() are events signalled back to the&#10; client by the adc subsystem. Note that a configuration is valid until the&#10; client reconfigures or releases the ADC (using the Resource interface),&#10; except for configureMultipleRepeat(), which is only valid for a single call&#10; to getData(). This means that after a successful configuration with, for&#10; example, configureSingle() the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface).&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x40d09c58" loc="189:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="180:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.</short>
          <long> &#10; Starts sampling an adc channel using the configuration as specified by&#10; the last call to any of the four available configuration commands.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event singleDataReady() or multipleDataReady() will be signalled&#10; (depending on the previous configuration). Otherwise no such event will be&#10; signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingle" ref="0x40d0ff10" loc="84:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="72:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC to perform a single conversion.</short>
          <long> &#10; Configures the ADC to perform a single conversion. Any previous&#10; configuration will be overwritten.  If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>singleDataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config ADC12 configuration data.  &#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40d0fdb8" loc="84:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureSingleRepeat" ref="0x40d0ec80" loc="106:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="86:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for repeated single channel conversion mode.</short>
          <long> &#10; Configures the ADC for repeated single channel conversion mode. Any&#10; previous configuration will be overwritten. If SUCCESS is returned calling&#10; &#60;code>getData()&#60;/code> will start sampling the adc channel periodically&#10; (the first conversion is started immediately).  The sampling period is&#10; specified by the &#60;code>jiffies&#60;/code> parameter, which defines the time&#10; between successive conversions in terms of clock ticks of clock source&#10; &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34; as specified in the&#10; &#60;code>config&#60;/code> parameter. If jiffies is zero successive conversions&#10; are performed as quickly as possible.  Conversion result are signalled&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>singleDataReady()&#60;/code> event handler.&#10; &#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34; and&#10; input divider &#34;sampcon_id&#34;.&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40d0e908" loc="106:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="jiffies" ref="0x40d0eb20" loc="106:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultipleRepeat" ref="0x40d09010" loc="177:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="140:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.</short>
          <long> &#10;&#10; Configures the ADC for sampling a channel multiple times repeatedly.  Any&#10; previous configuration will be overwritten. In contrast to the&#10; &#60;code>configureSingleRepeat()&#60;/code> command this configuration means that&#10; an event with &#60;code>numSamples&#60;/code> conversion results will be&#10; signalled, where 0 &#60; &#60;code>numSamples&#60;/code> &#60;= 16. In contrast to the&#10; &#60;code>configureMultiple()&#60;/code> command, this configuration means that&#10; &#60;code>numSamples&#60;/code> conversion results will be signalled repeatedly&#10; until the client returns &#60;code>FAIL&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler. &#10;&#10; If &#60;code>configureMultipleRepeat()&#60;/code> returns SUCCESS calling&#10; &#60;code>getData()&#60;/code> will start the the first conversion immediately.&#10; The sampling period is specified by the &#60;code>jiffies&#60;/code> parameter,&#10; which defines the time between successive conversions in terms of clock&#10; ticks of clock source &#34;sampcon_ssel&#34; and clock input divider &#34;sampcon_id&#34;&#10; as specified in the &#60;code>config&#60;/code> parameter. If jiffies is zero&#10; successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with &#60;code>numSamples&#60;/code>&#10; conversion results. If the client returns &#60;code>SUCCESS&#60;/code> in the&#10; &#60;code>multipleDataReady()&#60;/code> event handler, &#60;code>numSamples&#60;/code>&#10; new conversions will be performed, otherwise not.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples to take, 0 &#60;&#10; &#60;code>numSamples&#60;/code> &#60;= 16&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40d0a4b0" loc="177:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x40d0a9a8" loc="177:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x40d0abd0" loc="177:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x40d0ade8" loc="177:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="multipleDataReady" ref="0x40d07650" loc="227:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="208:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Multiple ADC conversion results are ready.</short>
          <long> &#10; Multiple ADC conversion results are ready.  If the ADC was configured&#10; with the &#60;code>configureMultiple()&#60;/code> command, then the return value&#10; is ignored. If the ADC was configured with the&#10; &#60;code>configureMultipleRepeat()&#60;/code> command then the returned pointer&#10; defines where to store the next &#60;code>numSamples&#60;/code>&#10; conversion results (the client must make sure that the buffer is big&#10; enough!).  Returning a null pointer means that the repeated conversion&#10; mode will be stopped.&#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of samples stored in &#60;code>buffer&#60;/code> &#10;&#10; @return&#10; A null pointer stops a repeated conversion mode. Any non-zero value is&#10; interpreted as the next buffer, which must have at least&#10; &#60;code>numSamples&#60;/code> entries. The return value is ignored if the ADC&#10; was configured with &#60;code>configureMultiple()&#60;/code>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x40d07278" loc="227:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x40d074b0" loc="227:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="configureMultiple" ref="0x40d0b5d0" loc="138:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="109:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period.</short>
          <long> &#10; Configures the ADC for sampling a channel &#60;code>numSamples&#60;/code> times&#10; with a given sampling period. Any previous configuration will be&#10; overwritten.  In contrast to the &#60;code>configureSingleRepeat()&#60;/code>&#10; command, this configuration means that only one event will be signalled&#10; after all samples have been taken (which is useful for high-frequency&#10; sampling). If SUCCESS is returned calling &#60;code>getData()&#60;/code> will&#10; start sampling the adc channel &#60;code>numSamples&#60;/code> times and the first&#10; conversion is started immediately. Conversion results are stored in a&#10; buffer allocated by the client (the &#60;code>buffer&#60;/code>&#10; parameter). The sampling period is specified by the &#60;code>jiffies&#60;/code>&#10; parameter, which defines the time between successive conversions in terms&#10; of clock ticks of clock source &#34;sampcon_ssel&#34; and clock input divider&#10; &#34;sampcon_id&#34; as specified in the &#60;code>config&#60;/code> parameter. If jiffies&#10; is zero successive conversions are performed as quickly as possible. After&#10; &#60;code>numSamples&#60;/code> conversions an event&#10; &#60;code>multipleDataReady()&#60;/code> is signalled with the conversion results.&#10;&#10; @param config ADC12 configuration data.  &#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;.&#10; @param buffer The user-allocated buffer in which the conversion results&#10; will be stored. It must have at least &#60;code>numSamples&#60;/code> entries,&#10; i.e. it must have a size of at least &#60;code>numSamples&#60;/code> * 2 byte.&#10; @param numSamples Number of adc samples&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start with the first conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40d0cad0" loc="138:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="buffer" ref="0x40d0b010" loc="138:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x40d0b248" loc="138:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x40d0b460" loc="138:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="singleDataReady" ref="0x40d084a0" loc="206:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
        <documentation loc="191:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
          <short> &#10; A single ADC conversion result is ready.</short>
          <long> &#10; A single ADC conversion result is ready. If the ADC was configured with&#10; the &#60;code>configureSingle()&#60;/code> command, then the return value is&#10; ignored. If the ADC was configured with the&#10; &#60;code>configureSingleRepeat()&#60;/code> command then the return value tells&#10; whether another conversion should be performed (&#60;code>SUCCESS()&#60;/code>) or&#10; not (&#60;code>FAIL&#60;/code>).&#10; &#10; @param data Conversion result (lower 12 bit).  &#10;&#10; @return If this event is signalled as response to a call to&#10; &#60;code>configureSingleRepeat()&#60;/code> then &#60;code>SUCCESS&#60;/code> results in&#10; another sampling and &#60;code>FAIL&#60;/code> stops the repeated sampling.&#10; Otherwise the return value is ignored.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12SingleChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40d08348" loc="206:../../tos/chips/msp430/adc12/Msp430Adc12SingleChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12MultiChannel" loc="51:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <short> &#10; This interface provides access to the ADC12 on the level of HAL.</short>
        <long> &#10; This interface provides access to the ADC12 on the level of HAL. It can be&#10; used to sample up to 16 (different) ADC channels. It separates between&#10; configuration and data collection: every time a client has been granted&#10; access to the ADC subsystem (via the Resource interface), it first has to&#10; configure the ADC.  Afterwards the client may call getData() more than once&#10; without reconfiguring the ADC in between (if the client has not released the&#10; ADC via the Resource interface), i.e.&#60;p>&#10; &#10;    configure() -> ( getData() -> dataReady() )*&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x40d35e50" loc="97:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="90:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.</short>
          <long> &#10; Starts sampling the adc channels using the configuration as specified by&#10; the last call to &#60;code>configure()&#60;/code>.&#10;&#10; @return SUCCESS means that the conversion was started successfully and an&#10; event dataReady() will be signalled. Otherwise no event will be signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x40d35500" loc="86:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="54:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Configures the ADC to perform conversion(s) on multiple channels.</short>
          <long> &#10; Configures the ADC to perform conversion(s) on multiple channels.  Any&#10; previous configuration will be overwritten.  If SUCCESS is returned&#10; calling &#60;code>getData()&#60;/code> will start the conversion immediately and a&#10; &#60;code>dataReady()&#60;/code> event will be signalled with the conversion&#10; result when the conversion has finished.&#10;&#10; @param config Main ADC12 configuration and configuration of the first&#10; channel &#10;&#10; @param memctl List of additional channels and respective reference&#10; voltages&#10;&#10; @param numMemctl Number of entries in the list&#10; &#10; @param buffer Buffer to store the conversion results, it must have&#10; numSamples entries. Results will be stored in the order the channels where&#10; specified.&#10;&#10; @param numSamples Total number of samples. Note: numSamples %&#10; (numMemctl+1) must be zero. For example, to sample every channel twice use&#10; numSamples = (numMemctl+1) * 2&#10;&#10; @param jiffies Sampling period in terms of clock ticks of &#34;sampcon_ssel&#34;&#10; and input divider &#34;sampcon_id&#34;. Samples are taken equally-spaced in&#10; time iterating round-robin over the channels (different channels are  &#10; not sampled simultaneously but one after another).&#10;&#10; @return SUCCESS means that the ADC was configured successfully and&#10; &#60;code>getData()&#60;/code> can be called to start the conversion.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40cf9e28"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x40cf80c8"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x40d36820" loc="86:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430adc12_channel_config_t" ref="0x40cf96a0"/></typename>
                <type-tag size="I:4" alignment="I:2"><struct-ref ref="0x40cf91e0"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="memctl" ref="0x40d36a90" loc="87:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40cf9e28"/>
                <typename><typedef-ref name="adc12memctl_t" ref="0x40cf80c8"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="numMemctl" ref="0x40d36cb0" loc="87:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
          <variable name="buffer" ref="0x40d36ee0" loc="87:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x40d35168" loc="88:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
          <variable name="jiffies" ref="0x40d35380" loc="88:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x40d34828" loc="107:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
        <documentation loc="99:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
          <short> &#10; Conversion results are ready.</short>
          <long> &#10; Conversion results are ready. Results are stored in the buffer in the&#10; order the channels where specified in the &#60;code>configure()&#60;/code>&#10; command, i.e. every (numMemctl+1)-th entry maps to the same channel. &#10; &#10; @param buffer Conversion results (lower 12 bit are valid, respectively).&#10; @param numSamples Number of results stored in &#60;code>buffer&#60;/code> &#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12MultiChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x40d34490" loc="107:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="numSamples" ref="0x40d346c8" loc="107:../../tos/chips/msp430/adc12/Msp430Adc12MultiChannel.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Adc12Overflow" loc="44:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <short> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.</short>
        <long> &#10; Signals an ADC12MEMx overflow or conversion time overflow condition to the&#10; client.&#10;&#10; @author Jan Hauer &#10;</long>
      </documentation>
      <function event="" provided="0" name="memOverflow" ref="0x40d38768" loc="49:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="46:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; An ADC12MEMx overflow condition has occured.</short>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionTimeOverflow" ref="0x40d38bf8" loc="54:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
        <documentation loc="51:../../tos/chips/msp430/adc12/Msp430Adc12Overflow.nc">
          <short> &#10; A conversion time overflow condition has occured.</short>
        </documentation>
        <interfacedef-ref qname="Msp430Adc12Overflow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAdc12" loc="45:../../tos/chips/msp430/adc12/HplAdc12.nc">
      <documentation loc="36:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <short>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.</short>
        <long>&#10; The HplAdc12 interface exports low-level access to the ADC12 registers&#10; of the MSP430 MCU.&#10;&#10; @author Jan Hauer&#10; @see  Please refer to TEP 101 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCtl0" ref="0x40d51f18" loc="63:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="59:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Returns the ADC12 control register ADC12CTL0.&#10; @return ADC12CTL0&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cee278"/>
            <typename><typedef-ref name="adc12ctl0_t" ref="0x40cee7f8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMCtl" ref="0x40d4f2d8" loc="82:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="77:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Returns the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @return memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40cf9e28"/>
            <typename><typedef-ref name="adc12memctl_t" ref="0x40cf80c8"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40d4f180" loc="82:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetIFGs" ref="0x40d4d980" loc="106:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="103:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Resets the ADC12 interrupt flag register, ADC12IFG.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isBusy" ref="0x40d4c480" loc="118:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="114:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 BUSY flag.</short>
          <long> &#10; Returns the ADC12 BUSY flag.&#10; @return ADC12BUSY &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="conversionDone" ref="0x40d4c010" loc="112:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="108:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Signals a conversion result.</short>
          <long> &#10; Signals a conversion result. &#10; @param iv ADC12 interrupt vector value 0x6, 0x8, ... , 0x24&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="iv" ref="0x40d4dde8" loc="112:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtl1" ref="0x40d503e8" loc="68:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="65:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> Returns the ADC12 control register ADC12CTL1.</short>
          <long> Returns the ADC12 control register ADC12CTL1. &#10;  @return ADC12CTL1&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cec518"/>
            <typename><typedef-ref name="adc12ctl1_t" ref="0x40cec9d8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMCtl" ref="0x40d50c08" loc="75:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="70:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.</short>
          <long> &#10; Sets the ADC12 conversion memory control register ADC12MCTLx.&#10; @param idx The register index (the 'x' in ADC12MCTLx) [0..15] &#10; @param memControl ADC12MCTLx register data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40cf9e28"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x40cf80c8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40d50840" loc="75:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
          <variable name="memControl" ref="0x40d50aa8" loc="75:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40cf9e28"/>
              <typename><typedef-ref name="adc12memctl_t" ref="0x40cf80c8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x40d4cd98" loc="128:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="125:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Starts a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl0" ref="0x40d51428" loc="51:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="47:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL0.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL0.&#10; @param control0 ADC12CTL0 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cee278"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x40cee7f8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control0" ref="0x40d512d0" loc="51:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cee278"/>
              <typename><typedef-ref name="adc12ctl0_t" ref="0x40cee7f8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMem" ref="0x40d4f960" loc="89:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="84:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 conversion memory register ADC12MEMx.</short>
          <long> &#10; Returns the ADC12 conversion memory register ADC12MEMx.&#10; @param idx The register index (the 'x' in ADC12MEMx) [0..15] &#10; @return ADC12MEMx &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40d4f808" loc="89:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIEFlags" ref="0x40d4d010" loc="95:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="91:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Sets the ADC12 interrupt enable register, ADC12IE.&#10; @param mask Bitmask (0 means interrupt disabled, 1 menas interrupt enabled) &#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40d4fe50" loc="95:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIEFlags" ref="0x40d4d510" loc="101:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="97:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Returns the ADC12 interrupt enable register, ADC12IE.</short>
          <long> &#10; Returns the ADC12 interrupt enable register, ADC12IE.&#10; @return ADC12IE&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopConversion" ref="0x40d4c8e8" loc="123:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="120:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Stops a conversion.</short>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableConversion" ref="0x40d4b1f0" loc="133:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="130:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short>&#10; Enables conversion (sets the ENC bit).</short>
          <long>&#10; Enables conversion (sets the ENC bit).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtl1" ref="0x40d51a50" loc="57:../../tos/chips/msp430/adc12/HplAdc12.nc">
        <documentation loc="53:../../tos/chips/msp430/adc12/HplAdc12.nc">
          <short> &#10; Sets the ADC12 control register ADC12CTL1.</short>
          <long> &#10; Sets the ADC12 control register ADC12CTL1. &#10; @param control1 ADC12CTL1 register data.&#10;*</long>
        </documentation>
        <interfacedef-ref qname="HplAdc12"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cec518"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x40cec9d8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control1" ref="0x40d518f8" loc="57:../../tos/chips/msp430/adc12/HplAdc12.nc">
            <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x40cec518"/>
              <typename><typedef-ref name="adc12ctl1_t" ref="0x40cec9d8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SensirionSht11" loc="40:../../tos/chips/sht11/SensirionSht11.nc">
      <documentation loc="32:../../tos/chips/sht11/SensirionSht11.nc">
        <short>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor.</short>
        <long>&#10; SensirionSht11 is the rich interface to the Sensirion SHT11&#10; temperature/humidity sensor. &#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:12 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="measureHumidityDone" ref="0x40f57d48" loc="84:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="78:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a humidity measurement.</short>
          <long>&#10; Presents the result of a humidity measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the humidity reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40f579f8" loc="84:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40f57be8" loc="84:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="readStatusReg" ref="0x40f56298" loc="92:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="86:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Reads the current contents of the SHT11 status and control&#10; register.</short>
          <long>&#10; Reads the current contents of the SHT11 status and control&#10; register. See the datasheet for interpretation of this register.&#10;&#10; @return SUCCESS if the read will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="measureHumidity" ref="0x40f57520" loc="76:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="71:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Starts a humidity measurement.</short>
          <long>&#10; Starts a humidity measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="measureTemperature" ref="0x40f58730" loc="61:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="56:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Starts a temperature measurement.</short>
          <long>&#10; Starts a temperature measurement.&#10;&#10; @return SUCCESS if the measurement will be made&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeStatusReg" ref="0x40f54188" loc="109:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="102:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Writes a new value to the SHT11 status and control register.</short>
          <long>&#10; Writes a new value to the SHT11 status and control register.&#10;&#10; @param val the new value to be written&#10;&#10; @return SUCCESS if the write will be performed&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40f54030" loc="109:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40f5bc68" loc="47:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="42:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Resets the sensor.</short>
          <long>&#10; Resets the sensor.&#10;&#10; @return SUCCESS if the sensor will be reset&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="writeStatusRegDone" ref="0x40f54810" loc="116:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="111:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Signals the completion of the status register write.</short>
          <long>&#10; Signals the completion of the status register write.&#10;&#10; @param result SUCCESS if the write was successful&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40f546b8" loc="116:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readStatusRegDone" ref="0x40f56b18" loc="100:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="94:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the value of the status register.</short>
          <long>&#10; Presents the value of the status register.&#10;&#10; @param result SUCCESS if the read succeeded&#10; @param val the value of the register&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40f567d8" loc="100:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40f569b8" loc="100:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4003add8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="resetDone" ref="0x40f58240" loc="54:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="49:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Signals that the sensor has been reset.</short>
          <long>&#10; Signals that the sensor has been reset.&#10;&#10; @param result SUCCESS if the reset succeeded&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40f580e8" loc="54:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="measureTemperatureDone" ref="0x40f57010" loc="69:../../tos/chips/sht11/SensirionSht11.nc">
        <documentation loc="63:../../tos/chips/sht11/SensirionSht11.nc">
          <short>&#10; Presents the result of a temperature measurement.</short>
          <long>&#10; Presents the result of a temperature measurement.&#10;&#10; @param result SUCCESS if the measurement was successful&#10; @param val the temperature reading&#10;</long>
        </documentation>
        <interfacedef-ref qname="SensirionSht11"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40f58c28" loc="69:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40f58e18" loc="69:../../tos/chips/sht11/SensirionSht11.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401eb010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x40f64e48" loc="68:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x40f649e8" loc="61:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x40f645d8" loc="54:../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x40f64070" loc="53:../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40363da0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="37:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x40fdb010" loc="52:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="49:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40fda010" loc="72:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x40fdeb90" loc="47:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="44:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x40fdba78" loc="67:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="61:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x40fdb920" loc="67:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x40fde748" loc="42:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="39:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x40fdb460" loc="59:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="54:../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port.</short>
          <long> &#10; Gets the current value of the input voltage of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4035ae80"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
